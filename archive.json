{
  "magic": "E!vIA5L86J2I",
  "timestamp": "2025-09-21T01:52:29.388285+00:00",
  "repo": "quicwg/ack-frequency",
  "labels": [
    {
      "name": "duplicate",
      "description": "This issue or pull request already exists",
      "color": "cfd3d7"
    },
    {
      "name": "invalid",
      "description": "This doesn't seem right",
      "color": "e4e669"
    },
    {
      "name": "wontfix",
      "description": "This will not be worked on",
      "color": "ffffff"
    },
    {
      "name": "editorial",
      "description": "",
      "color": "bfd4f2"
    },
    {
      "name": "design",
      "description": "",
      "color": "B60205"
    },
    {
      "name": "needs-pr",
      "description": "",
      "color": "1D76DB"
    },
    {
      "name": "needs-discussion",
      "description": "",
      "color": "5319E7"
    },
    {
      "name": "has-pr",
      "description": "",
      "color": "44AE4B"
    },
    {
      "name": "ready-to-merge",
      "description": "",
      "color": "fbca04"
    },
    {
      "name": "no action needed",
      "description": "",
      "color": "E72F89"
    },
    {
      "name": "question",
      "description": "",
      "color": "e99695"
    }
  ],
  "issues": [
    {
      "number": 1,
      "id": "MDU6SXNzdWU1NDc2NjUzMDY=",
      "title": "Discuss whether this affects the max_ack_delay used in PTO",
      "url": "https://github.com/quicwg/ack-frequency/issues/1",
      "state": "CLOSED",
      "author": "ianswett",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "If it doesn't change it, we should say so.  If it allows it to be reduced, then we need to understand what the limits are(ie: it can't be lowered to 1us presumably?).\r\n\r\nAdmittedly, the way we're using max_ack_delay should be safe to assuming a 0 value, since the SRTT will accrue the excess.",
      "createdAt": "2020-01-09T19:09:49Z",
      "updatedAt": "2020-01-17T21:59:36Z",
      "closedAt": "2020-01-17T21:59:36Z",
      "comments": []
    },
    {
      "number": 2,
      "id": "MDU6SXNzdWU1NDc2NjY5MDE=",
      "title": "Make both parameters required and specify invalid values",
      "url": "https://github.com/quicwg/ack-frequency/issues/2",
      "state": "CLOSED",
      "author": "ianswett",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "I think it'll be easier to make both parameters required.  Not doing so saves 1 to 2 bytes, which is really not much in a frame I expect will be sent a few times a connection.\r\n\r\nAlso, I think 0 should be an invalid value for both params, and 1 should be invalid for the number of packets, though I can see someone arguing that point.",
      "createdAt": "2020-01-09T19:12:32Z",
      "updatedAt": "2020-01-17T20:29:05Z",
      "closedAt": "2020-01-17T20:29:05Z",
      "comments": [
        {
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "body": "#4 addresses these issues, with the exception that 1 is allowed for packet tolerance. I think that's actually useful for some startup schemes, so we shouldn't disallow it.",
          "createdAt": "2020-01-17T20:28:04Z",
          "updatedAt": "2020-01-17T20:28:04Z"
        }
      ]
    },
    {
      "number": 3,
      "id": "MDU6SXNzdWU1NDc2Njg2MTE=",
      "title": "Make both fields in the frame required",
      "url": "https://github.com/quicwg/ack-frequency/issues/3",
      "state": "CLOSED",
      "author": "ianswett",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "I think it'll be easier to make both parameters required.  Not doing so saves 1 to 2 bytes, which is really not much in a frame I expect will be sent a few times a connection.  It also means the frame only needs one type value.\r\n\r\nAlso, I think 0 should be an invalid value for both params, and 1 should be invalid for the number of packets, though I can see someone arguing that point.",
      "createdAt": "2020-01-09T19:16:10Z",
      "updatedAt": "2020-01-09T19:16:29Z",
      "closedAt": "2020-01-09T19:16:29Z",
      "comments": []
    },
    {
      "number": 5,
      "id": "MDU6SXNzdWU1NTE2NDA4MTc=",
      "title": "Frame should have its own sequence number",
      "url": "https://github.com/quicwg/ack-frequency/issues/5",
      "state": "CLOSED",
      "author": "janaiyengar",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "We currently use PNs for ordering, but that runs afoul of requirements at the receiver specified in [https://quicwg.org/base-drafts/draft-ietf-quic-transport.html#section-13.3-5](https://quicwg.org/base-drafts/draft-ietf-quic-transport.html#section-13.3-5).",
      "createdAt": "2020-01-17T21:30:10Z",
      "updatedAt": "2020-01-17T22:47:58Z",
      "closedAt": "2020-01-17T22:47:58Z",
      "comments": []
    },
    {
      "number": 6,
      "id": "MDU6SXNzdWU1NTE2NDE3MTQ=",
      "title": "Allow reordering-tolerant ack delay",
      "url": "https://github.com/quicwg/ack-frequency/issues/6",
      "state": "CLOSED",
      "author": "janaiyengar",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Endpoints expect the connection to encounter reordering might want to indicate that the receiver should not send immediate acks on receiving a reordered packet.",
      "createdAt": "2020-01-17T21:32:42Z",
      "updatedAt": "2020-01-18T00:01:17Z",
      "closedAt": "2020-01-18T00:01:17Z",
      "comments": []
    },
    {
      "number": 14,
      "id": "MDU6SXNzdWU1NTMwNTc1NDQ=",
      "title": "Slow Start and Hystart need references",
      "url": "https://github.com/quicwg/ack-frequency/issues/14",
      "state": "CLOSED",
      "author": "ianswett",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "\"Starting a connection up quickly without inducing much queue is important for latency reduction, for both short and long flows. The sender often needs frequent acknowledgments during this phase; see slow start and hystart.\"\r\n\r\nThere's no description of them in this doc.  Slow start is in the recovery draft, but hystart is not, so we'd have to reference a non-QUIC RFC?",
      "createdAt": "2020-01-21T18:40:01Z",
      "updatedAt": "2020-01-31T02:50:22Z",
      "closedAt": "2020-01-31T02:50:22Z",
      "comments": [
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "Maybe paced chirping too.",
          "createdAt": "2020-01-21T23:47:20Z",
          "updatedAt": "2020-01-21T23:47:20Z"
        },
        {
          "author": "mjoras",
          "authorAssociation": "CONTRIBUTOR",
          "body": "An added nit to this: congestion controllers like BBR do not have a slow start / hystart phase exactly, but are still sensitive to ACKs early in the flow during \"Startup\". With a BBR congestion controller the ACKing interval early in the flow has a measurable effect on the time it takes to find the bottleneck bandwidth.\r\n\r\nMore generally I suspect this is true of pretty much every congestion controller that's trying to find an optimal congestion window. Given that, perhaps we need more general language here about the benefit of ACKs early in a flow, and then referencing slow start and hystart specifically?",
          "createdAt": "2020-01-23T22:48:31Z",
          "updatedAt": "2020-01-23T22:48:31Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "BBR has 'Startup', which is quite similar to slow start, so maybe flow startup a better general purpose term?\r\n\r\nI think we can remove the reference to hystart entirely, since I wouldn't expect decreasing ACK frequency to have a negative impact on it, particularly given QUIC's explicit ack delay.",
          "createdAt": "2020-01-23T23:13:48Z",
          "updatedAt": "2020-01-23T23:13:48Z"
        }
      ]
    },
    {
      "number": 17,
      "id": "MDU6SXNzdWU1NTQ0NDE1ODY=",
      "title": "Should this extension recommend an endpoint behavior?",
      "url": "https://github.com/quicwg/ack-frequency/issues/17",
      "state": "CLOSED",
      "author": "mjoras",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "As discussed on [3304](https://github.com/quicwg/base-drafts/issues/3304) in the base draft, we have some confidence in a particular heuristic (default tolerance of 2 for the first 100 packets, followed by a tolerance of 10) which we know to work fairly well in multiple deployments serving \"typical\" Internet resources to typical users. Do we want to make that recommendation explicit, or otherwise give guidance in this extension?",
      "createdAt": "2020-01-23T22:22:04Z",
      "updatedAt": "2020-03-19T23:08:56Z",
      "closedAt": "2020-03-19T23:08:56Z",
      "comments": [
        {
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "body": "I think it's a good idea to describe the values for which we have experience, while encouraging experimentation. We don't need to _recommend_ the strategy, we just need to document it as an example strategy.",
          "createdAt": "2020-01-23T22:29:52Z",
          "updatedAt": "2020-01-23T22:29:52Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "I think a section on considerations and maybe past experience would be very helpful.  I think it's going to be a bit of a challenge to write, but I'm happy to take a stab if no one else wants to.",
          "createdAt": "2020-01-25T00:02:21Z",
          "updatedAt": "2020-01-25T00:02:21Z"
        },
        {
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "body": "What I'd want to see is just a simple explanation of what a sender could do... I would not describe results from experience, since those are anecdotal and are going to change over time. This could be a fairly short section.",
          "createdAt": "2020-01-25T00:36:44Z",
          "updatedAt": "2020-01-25T00:36:44Z"
        },
        {
          "author": "mjoras",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@janaiyengar @ianswett I can take a stab at writing something and we can go from there.",
          "createdAt": "2020-01-28T00:26:07Z",
          "updatedAt": "2020-01-28T00:26:07Z"
        },
        {
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks, @mjoras !",
          "createdAt": "2020-01-28T00:29:15Z",
          "updatedAt": "2020-01-28T00:29:15Z"
        },
        {
          "author": "mjoras",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I do think the pitfalls of e.g. #25 should be conveyed in such \"cautionary\" text as well. I will submit a PR this week time permitting between interop.",
          "createdAt": "2020-02-03T07:11:00Z",
          "updatedAt": "2020-02-03T07:11:00Z"
        }
      ]
    },
    {
      "number": 18,
      "id": "MDU6SXNzdWU1NTQ1MjI3MzI=",
      "title": "Why is the response to reordering a TP?",
      "url": "https://github.com/quicwg/ack-frequency/issues/18",
      "state": "CLOSED",
      "author": "marten-seemann",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Maybe it would be more consistent if this was a field on the ACK_FREQUENCY frame?",
      "createdAt": "2020-01-24T03:12:58Z",
      "updatedAt": "2020-02-03T16:23:11Z",
      "closedAt": "2020-02-03T16:23:11Z",
      "comments": [
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "I agree. Not only for consistency but also for practical benefits.\r\n\r\nFirstly, in many cases, the sender will only be able to tell if the path is going to have lots of reorders. Allowing the sender to alter the client behavior mid-connection would be beneficial, as that would allow the sender reduce the ACK rate when it disables packet number-based loss detection.\r\n\r\nThe second use case is for clustered servers sending different streams from different hosts. Packets being sent from such clustered servers would have reorder when there are multiple servers handling streams, but not when there is only server handling streams (consider the case where only one stream, or only one HTTP request is open). In such deployments, it is beneficial to have the capability of turning off reordering detection mid-connection.",
          "createdAt": "2020-01-24T06:30:24Z",
          "updatedAt": "2020-01-24T06:30:24Z"
        },
        {
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> Firstly, in many cases, the sender will only be able to tell if the path is going to have lots of reorders. Allowing the sender to alter the client behavior mid-connection would be beneficial, as that would allow the sender reduce the ACK rate when it disables packet number-based loss detection.\r\n\r\nLet's assume here that peers might adjust their reordering threshold based on the amount of reordering they're seeing, i.e. that they will increase it from the default value of 3 to a higher value if they detect a lot of spurious retransmissions when using 3.\r\nIn that case, would it maybe make sense to define a threshold when to send an ACK for a reordered packet? For example, let's say packet N is missing, but N+1 is received. If you're using a high reordering threshold, you wouldn't care to receive an ACK for this event immediately. However, you'd still care to get an ACK when N+10 is received, because in that case your packet number-based loss detection will be able to quickly repair the loss of packet N.\r\n",
          "createdAt": "2020-01-24T06:40:51Z",
          "updatedAt": "2020-01-24T06:40:51Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "@marten-seemann I agree that that's a possibility. At the same time, it could be well the case that simply turning off reordering detection and solely relying on the time-based loss recovery would be sufficient.",
          "createdAt": "2020-01-24T07:06:41Z",
          "updatedAt": "2020-01-24T07:06:41Z"
        },
        {
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@kazuho I can't really tell what makes sense from the point of a congestion control algorithm, but I'm wondering if it makes sense to specify something here that would allow a wide range of algorithms to get the kind of information that they deem useful.\r\nIf we made that field a varint instead of a bool (then we can also avoid the question of how we would encode a bool), you could still effectively disable ACKs for reordered packets by sending a very large value for that field, if you want to disable packet number-based loss recovery.",
          "createdAt": "2020-01-24T07:25:31Z",
          "updatedAt": "2020-01-24T07:25:31Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "When @janaiyengar and I were discussing this, we thought it was best to not make this part of the mechanism overly complex, hence the transport param.  Unfortunately, we have very little(or no) deployment experience in this area, so the TP was more of a future-proofing mechanism than one based on past experience.\r\n\r\nIf we were going to add a field, I'd suggest a max_reordering field where 0 indicates any reordering is tolerated and any other values indicate a max packet number gap before an immediate ACK is sent?  If you want immediate ACK upon reordering, you'd send 1.\r\n\r\nThat only adds a byte to the frame size in almost all cases, but I think should work well in a wide variety of use cases.  \r\n\r\nMy main concern is whether the implementation complexity increases more than the value it's providing?\r\n\r\n",
          "createdAt": "2020-01-24T23:57:29Z",
          "updatedAt": "2020-01-24T23:57:29Z"
        },
        {
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "body": "I think there's value in making this a field in the frame instead of a TP... as @ianswett noted, we used a TP because that seemed like the simplest approach, not necessarily the most flexible one.\r\n\r\nI agree with @marten-seemann that allowing for communicating a \"threshold\" has the most room for play with reordering robustness in the future. I'm not convinced that it'll get all that used, but if the receiver behavior is not much more complicated to implement, then I'm ok with specifying that.\r\n\r\nSo, here's a shot at defining receiver behavior. A receiver has to measure the degree of reordering and then decide whether to ack immediately or not.  This degree of reordering can be defined as follows: the distance of the received packet from the largest_received (for that PN space). Basically:\r\n\r\n```\r\nif (PN > LR):\r\n    if (PN - LR >= max_reordering): send immediate ack\r\nelse:\r\n    if (LR - PN >= max_reordering): send immediate ack\r\n```\r\n\r\nA couple of examples to see if this works out. Let's say LR is the largest_received packet number.\r\n\r\nA reordering distance of 2 means that LR+2 and larger or LR-2 and smaller will trigger an immediate ack. This seems ok. All distances greater than 2 also seem ok.\r\n\r\nReordering distance of 1 is a bit tricky. This distance means that if LR+1 is received, that triggers an immediate ack. Similarly, anything smaller than or equal to LR-1 will also trigger immediate ack (anything smaller than the largest received). The current reordering recommendation in the transport draft will have the receiver acking immediately on receiving LR-1, and we should be able to cover that case, so we should be able to express this value.\r\n\r\nBut this is a bit wonky, since LR+1 is basically the next expected, and this reordering value effectively turns into `ack every packet`. It would be nice to avoid this problem. We can do that by using Ian's suggestion of special casing the value 1: \"any reordering, as defined as a PN that does not increase the LR by 1, will trigger an ack.\"\r\n\r\nSimilarly, special casing the value 0 for disable immediate acking on reordering is useful.\r\n\r\nHaving worked through this, it doesn't seem that terrible. I'm ok with varint or single byte. I agree with @ianswett that the most usefulness will be in 1 byte, but I can see the value in leaving it open and uniform.\r\n\r\nThoughts?",
          "createdAt": "2020-01-25T01:17:00Z",
          "updatedAt": "2020-01-25T01:17:00Z"
        },
        {
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "body": "So the final algorithm becomes:\r\n```\r\nbool ShouldSendImmediateAck(uint LR, uint PN):\r\n    if (max_reordering == 0): return false\r\n    if (max_reordering == 1):\r\n        if (PN != LR+1): return true\r\n        else: return false\r\n\r\n    if (PN > LR):\r\n        if (PN - LR >= max_reordering): return true\r\n    else:\r\n        if (LR - PN >= max_reordering): return true\r\n\r\n    return false\r\n```",
          "createdAt": "2020-01-25T01:21:48Z",
          "updatedAt": "2020-01-25T01:21:48Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "I'd rather have a varint for consistency, even if it's almost always a single byte.",
          "createdAt": "2020-01-25T01:38:46Z",
          "updatedAt": "2020-01-25T01:38:46Z"
        },
        {
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@janaiyengar, thank you for picking up my suggestion and writing the pseudo code.\r\nI'm not sure if just looking at the largest received is sufficient to properly cover all cases. Assume you receive packet `N`, packet `N+2`. At this point `LR = N+2`. Now you receive `N + max_reordering`. I would have assumed that it makes sense now to send an immediate ACK to help with the recovery of `N+1`, however, the algorithm doesn't capture that case.\r\n\r\nFurthermore, I was wondering about the negative branch (where `PN < LR`). This branch can only be taken if we sent an ACK earlier for exceeding the `max_reordering`. Assuming that ACK was received, the packet in question would already have been declared lost, so in that case sending an immediate ACK wouldn't make any difference. Is my understanding correct that the negative branch exists for the case in which the original ACK was lost?\r\n\r\nEncoding-wise, we might be able to simplify things a bit replacing `max_reordering` by `max_gap` (where a `max_gap` of 1 would be a `max_reordering` of 2). Then we could avoid special-casing the value of 1.\r\n\r\nI'm also wondering how many immediate ACKs you're supposed to send. Currently, the draft has some quite complicated conditions for this:\r\n> an endpoint SHOULD send an ACK frame immediately on receiving an ack-eliciting packet that is out of order. The endpoint MAY continue sending ACK frames immediately on each subsequently received packet, but the endpoint SHOULD return to acknowledging every other packet within a period of 1/8 x RTT, unless more ack-eliciting packets are received out of order.\r\n\r\nDo we need some similar advice here? Or do we need to make it configurable?\r\n",
          "createdAt": "2020-01-25T05:42:51Z",
          "updatedAt": "2020-01-25T05:42:51Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "@marten-seemann on the point about how many immediate ACKs to send, I believe we should only send one, so I have an issue(#3357) and PR(#3361) to change the text you quoted.\r\n\r\nIn terms of the 'negative branch' as you're describing it, the idea is that it's very possible the packet has not yet been declared lost yet, even though the ACK has arrived.  If they're using this reordering tolerant setting, it seems likely they're tolerant to more reordering than a typical sender.  For example, it could be because they have adaptive packet threshold loss detection and the threshold has been increased substantially due to observing past reordering.",
          "createdAt": "2020-01-25T15:48:36Z",
          "updatedAt": "2020-01-25T15:48:36Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "We definitely need to have a few people ship this reordering tolerant feature before we finalize this draft.  I'm quite confident in everything else in the draft, but I'm fairly unsure about exactly how this can and should be used.  I'm also not yet sure packet threshold is actually better than time.  It seems more appealing, but I think it depends on the use case.\r\n\r\nI'm also concerned it adds non-trivial implementation complexity.  Implementations already have a max_ack_delay and a number of packets before sending an immediate ACK, so this is just adding a mechanism to change those thresholds during the connection.  However, this reordering feature may end up substantially changing the code to send ACKs.  I'd be pretty sad if a bunch of implementations didn't implement the draft because they didn't want to deal with the extra complexity.",
          "createdAt": "2020-01-25T21:30:39Z",
          "updatedAt": "2020-01-25T21:30:39Z"
        },
        {
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "body": "I agree, @ianswett, which is why I wanted to go through and see if we could define simple enough behavior that is useful.\r\n\r\nI don't think we want to be perfect with the detection, but reasonable. I'll think of simplifications to this, but we want to make sure that we dont make this unnecessarily ornate. I am concerned that this threshold becomes another footgun, since we really don't have a good recommendation for how to set it.\r\n\r\nThe primary property we want is a dynamic way to indicate to the peer to not send immediate acks on reordering. Simply moving the TP to the frame will give us that.\r\n\r\nI am increasingly leaning towards just calling this a boolean instead of a threshold. I will plan to write that up by tomorrow. Any strong objections?",
          "createdAt": "2020-02-01T22:28:05Z",
          "updatedAt": "2020-02-01T22:28:05Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "Boolean as a frame field works perfectly fine for my use case.",
          "createdAt": "2020-02-02T02:34:01Z",
          "updatedAt": "2020-02-02T02:34:01Z"
        }
      ]
    },
    {
      "number": 19,
      "id": "MDU6SXNzdWU1NTcxMDk4MzQ=",
      "title": "Use underscore in frame name",
      "url": "https://github.com/quicwg/ack-frequency/issues/19",
      "state": "CLOSED",
      "author": "dtikhonov",
      "authorAssociation": "MEMBER",
      "assignees": [
        "ianswett"
      ],
      "labels": [],
      "body": "Use `ACK_FREQUENCY` instead of `ACK-FREQUENCY` following naming convention in the transport draft.",
      "createdAt": "2020-01-29T20:54:47Z",
      "updatedAt": "2020-01-31T02:49:44Z",
      "closedAt": "2020-01-31T02:49:44Z",
      "comments": []
    },
    {
      "number": 20,
      "id": "MDU6SXNzdWU1NTcxMTc3OTE=",
      "title": "min/max delay clarification",
      "url": "https://github.com/quicwg/ack-frequency/issues/20",
      "state": "CLOSED",
      "author": "dtikhonov",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "I've re-read the draft a few times, but I still want to ask you to verify my understanding, just to be sure:\r\n\r\n1. Each side informs the other of **its own** minimum and maximum ACK delay values using the (new) `min_ack_delay` and `max_ack_delay` transport parameters.\r\n\r\n2. The `Update Max Ack Delay` value changes the **peer's** maximum ACK delay.  It must not be smaller than the `min_ack_delay` advertised by the peer.",
      "createdAt": "2020-01-29T21:11:17Z",
      "updatedAt": "2020-02-27T23:40:06Z",
      "closedAt": "2020-02-27T23:40:06Z",
      "comments": [
        {
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "body": "@dtikhonov : Yes, that is correct. I know it can be a bit confusing. Hope the text is clear on this though.",
          "createdAt": "2020-01-30T21:09:45Z",
          "updatedAt": "2020-01-30T21:09:45Z"
        },
        {
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "body": "@dtikhonov : I'm closing this issue. If you think we ought to clarify this in the text further, please re-open.",
          "createdAt": "2020-02-27T23:40:06Z",
          "updatedAt": "2020-02-27T23:40:06Z"
        }
      ]
    },
    {
      "number": 22,
      "id": "MDU6SXNzdWU1NTcxMzQ4MDM=",
      "title": "Specify in which packets ACK_FREQUENCY may appear",
      "url": "https://github.com/quicwg/ack-frequency/issues/22",
      "state": "CLOSED",
      "author": "dtikhonov",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "design"
      ],
      "body": "See Table in [Section 12.4](https://tools.ietf.org/html/draft-ietf-quic-transport-25#section-12.4) of the transport draft.",
      "createdAt": "2020-01-29T21:46:27Z",
      "updatedAt": "2021-09-10T16:15:48Z",
      "closedAt": "2021-09-10T16:15:48Z",
      "comments": [
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "We recommend endpoints to ACK Initial and Handshake packets immediately (see https://quicwg.org/base-drafts/draft-ietf-quic-transport.html#section-13.2.1-1). I do not think we need to change that, and therefore my view is that use of ACK_FREQUENCY frames can (and should) be limited to 1-RTT.",
          "createdAt": "2020-01-30T00:06:06Z",
          "updatedAt": "2020-01-30T00:10:37Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "Agreed, I think we just need to specify that.",
          "createdAt": "2020-01-30T00:26:07Z",
          "updatedAt": "2020-01-30T00:26:07Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "Just a note that, new TPs are required to clarify if the TP is to be remembered (https://quicwg.org/base-drafts/draft-ietf-quic-transport.html#section-7.4.1-3).\r\n\r\nBased on the understanding that the use of the ACK_FREQUENCY frame will be limited to 1-RTT packets, I assume that remembering the min_ack_delay TP will be prohibited.",
          "createdAt": "2020-10-22T05:23:59Z",
          "updatedAt": "2020-10-22T05:23:59Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "Good point @kazuho I do not believe min_ack_delay should be remembered, since it has no use prior to handshake completion.",
          "createdAt": "2020-10-22T06:38:07Z",
          "updatedAt": "2020-10-22T06:38:07Z"
        },
        {
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> We recommend endpoints to ACK Initial and Handshake packets immediately\r\n\r\n> Based on the understanding that the use of the ACK_FREQUENCY frame will be limited to 1-RTT packets\r\n\r\nI agree that ACK_FREQUENCY should not apply to Initial and Handshake packets. That doesn't mean that we need to limit ACK_FREQUENCY to 1-RTT packets though, it could apply to 0-RTT packets as well, if peers are required to remember the value of the TP. The client could then send an ACK_FREQUENCY in 0-RTT.\r\n\r\nI don't have a strong preference in either direction, but preventing a flood of ACKs for 0-RTT packets sounds like it could potentially be useful.",
          "createdAt": "2021-01-11T07:18:59Z",
          "updatedAt": "2021-01-11T07:18:59Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "Considering our track record of allowing most frames to be sent in 0-RTT, I am fine with allowing the transmission of ACK_FREQUENCY frames in 0-RTT.\r\n\r\nOTOH, I do not think we should require endpoints to retain min_ack_delay TP across resumptions. That would essentially prohibits client from sending ACK_FREQUENCY frames in 0-RTT.",
          "createdAt": "2021-01-11T07:29:45Z",
          "updatedAt": "2021-01-11T07:29:45Z"
        },
        {
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@kazuho Your two statements seem to contradict each other. If we allow ACK_FREQUENCY in 0-RTT, peers need to remember the value of the TP. If peers are not required to remember the value of the TP, ACK_FREQUENCY can't be sent in 0-RTT, otherwise a client would risk a PROTOCOL_VIOLATION if a server disabled the extension.",
          "createdAt": "2021-01-11T07:34:56Z",
          "updatedAt": "2021-01-11T07:34:56Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "@marten-seemann That's a good point. And as you might have already observed, even if the client remembered min_ack_delay, it might still not be possible to send an ACK_FREQUENCY frame in 0-RTT. That's because max_ack_delay would be unknown.\r\n\r\nI think we are reaching consensus that clients would not send ACK_FREQUENCY frames in 0-RTT, even if the specification allowed that?",
          "createdAt": "2021-01-11T11:33:49Z",
          "updatedAt": "2021-01-11T11:33:49Z"
        },
        {
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> @marten-seemann That's a good point. And as you might have already observed, even if the client remembered min_ack_delay, it might still not be possible to send an ACK_FREQUENCY frame in 0-RTT. That's because max_ack_delay would be unknown.\r\n\r\nNow I'm a bit confused. In my mind, this is how this extension works (describing it using \"client\" and \"server\" for added clarity, it works the same way in the opposite direction):\r\nThe client declares a max_ack_delay in the transport parameters. When generating acknowledgements, the server will then make sure that every ACK is generated within that time frame. When the client sends an ACK_FREQUENCY frame, it instructs the server to discard the previous max_ack_delay value and use the one encoded in the frame instead.\r\n\r\nAssuming that my understanding is correct, the fact that the client hasn't received the server's max_ack_delay should be irrelevant when considering whether we want to send this frame in 0-RTT packets. Furthermore, the fact that the ClientHello has to be received before the server can decode any 0-RTT packet would guarantee that the server has processed the client's transport parameters before it is able to process any ACK_FREQUENCY frame.",
          "createdAt": "2021-01-11T11:47:01Z",
          "updatedAt": "2021-01-11T11:47:01Z"
        },
        {
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "body": "@ianswett and I chatted about this; summarizing. An endpoint's ACK_FREQUENCY_FRAME updates the received max_ack_delay. This makes all situations where an endpoint sends an ACK_FREQUENCY_FRAME without receiving the peer's max_ack_delay problematic. Since a client does not remember the peer's max_ack_delay, sending an ACK_FREQUENCY_FRAME that updates it makes little sense.\r\n\r\nWe should disallow ACK_FREQUENCY_FRAMEs in 0-RTT packets because a client does not have the base value which it wants to update with this frame until 1-RTT keys are established.",
          "createdAt": "2021-07-12T17:37:37Z",
          "updatedAt": "2021-07-12T17:37:37Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "And we agree with @kazuho that #40 is intertwined with this issue, since if the transport parameter is not remembered, you can't send the ACK_FREQUENCY frame.",
          "createdAt": "2021-07-12T17:49:00Z",
          "updatedAt": "2021-07-12T17:49:00Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "MEMBER",
          "body": "My preference here is \"application\" packet number space.\r\n\r\nThis means that the transport parameter needs to be remembered.  It also means that - because max_ack_delay is not remembered - that you have to avoid exceeding the max_ack_delay default (and permit that variance as a server if you set a lower value for max_ack_delay).",
          "createdAt": "2021-07-27T21:01:20Z",
          "updatedAt": "2021-07-27T21:02:05Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "NONE",
          "body": "My real issue is whether the frames might appear before the TP negotiation has concluded. The client should not send ACK FREQUENCY frames before that. I think this naturally precludes sending ACK FREQUENCY in 0-RTT, but there might be corner cases in which the client knows the result of the TP negotiation before it has access to the 1-RTT keys -- for example if some of the crypto processing is going on in a crypto offload engine. If we are firm on negotiation, then we don't need to make a statement about 0RTT vs 1RTT.",
          "createdAt": "2021-07-27T21:10:11Z",
          "updatedAt": "2021-07-27T21:10:11Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "@huitema I'm not sure if that follows the design of RFC 9000.\r\n\r\nFor frames that can be sent in 0-RTT, RFC 9000 requires endpoints to remember and reuse the value of the Transport Parameters:\r\n> When sending frames in 0-RTT packets, a client MUST only use remembered transport parameters; importantly, it MUST NOT use updated values that it learns from the server's updated transport parameters or from frames received in 1-RTT packets. ([section 7.4.1 of RFC 9000](https://quicwg.org/base-drafts/rfc9000.html#section-7.4.1-12))",
          "createdAt": "2021-07-28T06:52:35Z",
          "updatedAt": "2021-07-28T06:52:35Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "MEMBER",
          "body": "Another potential option here in support of the basic design: this document could require that the value of max_ack_delay be remembered alongside min_ack_delay, (only)? for the generation of ACK_FREQUENCY frames.",
          "createdAt": "2021-07-28T07:03:11Z",
          "updatedAt": "2021-07-28T07:03:11Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "@martinthomson Would you mind elaborate why your implementation cannot prohibit frames being sent in 0-RTT packets from being affected by TPs other than remembered ones?\r\n\r\nRFC 9000 states that _when sending frames in 0-RTT packets, a client MUST only use remembered transport parameters_, and that _the definition of a new transport parameter MUST specify whether storing the transport parameter for 0-RTT is mandatory, optional, or prohibited_ ([section 7.4.1](https://quicwg.org/base-drafts/rfc9000.html#section-7.4.1)).\r\n\r\nSo it seems to me that, for Transport parameters that are prohibited to be remembered, QUIC stacks are expected to be capable of prohibiting those parameters to be used when sending frames using 0-RTT packets.\r\n\r\nIt seems to me that you are against us building extensions on that guidance.",
          "createdAt": "2021-07-28T07:13:34Z",
          "updatedAt": "2021-07-28T07:13:34Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "NONE",
          "body": "I think there is broad support for not sending ACK_FREQUENCY frames before the negotiation completes. In response to the comment from @kazuho, this requires that \"storing the transport parameter for 0-RTT is prohibited.\" If we do that, we also satisfy the requirement stated by @martinthomson that 0-RTT processing be pretty much the same as 1-RTT processing: there is no new difference between 0-RTT and 1-RTT, in both cases the transport can only send the frame if the peer has explicitly accepted them.",
          "createdAt": "2021-07-28T17:18:46Z",
          "updatedAt": "2021-07-28T17:18:46Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks @kazuho and @huitema I agree that if we prohibit storing min_ack_delay, ACK_FREQUENCY can't be sent in 0-RTT, and I believe that should solve @martinthomson issue?\r\n\r\nStoring BOTH min_ack_delay and max_ack_delay is a direction I'd really rather avoid.  ",
          "createdAt": "2021-07-28T20:16:20Z",
          "updatedAt": "2021-07-28T20:16:20Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "MEMBER",
          "body": "This works to ensure that there are no surprises for servers. But it doesn't prevent clients from sending the frame in 0-RTT. Our stack will apply transport parameters after receiving them. This is before handshake completion, so if we are still sending 0-RTT, we might send the frame. I don't believe that we will in practice, due to the logic we use for sending it. That logic is something that might change, so there are no strong guarantees.\r\n\r\nI do think that this is a good solution, I just want to make the consequences clear.",
          "createdAt": "2021-07-31T23:48:43Z",
          "updatedAt": "2021-07-31T23:48:43Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "@martinthomson If we are to prohibit min_ack_delay from being remembered, I do not think we can allow them to be sent in 0-RTT. \r\n\r\nRequoting from RFC 9000, _when sending frames in 0-RTT packets, a client MUST only use remembered transport parameters_, and that _the definition of a new transport parameter MUST specify whether storing the transport parameter for 0-RTT is mandatory, optional, or prohibited_ ([section 7.4.1](https://quicwg.org/base-drafts/rfc9000.html#section-7.4.1)).\r\n\r\nAm I missing something?\r\n\r\nAlso, I would point out that, even for remembered TPs, QUIC stacks are required to refrain from using the newly received ones in 0-RTT packets. For example, if the remembered value of MAX_STREAMS is 0 and the newly received value is 4, an endpoint is forbidden to open _any_ stream in 0-RTT even _after_ receiving the transport parameters. It is only when you switch to using 1-RTT packets that the newly received transport parameter is applied.\r\n\r\nFor your implementation, wouldn't it be possible to use the same latch for ack_frequency?",
          "createdAt": "2021-08-01T22:08:04Z",
          "updatedAt": "2021-08-01T22:08:04Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "MEMBER",
          "body": "Oh, whoops.  We don't have that latch.  We'll probably open 4 streams if initial_max_streams_xxx is 4 in the handshake and we remembered 0.\r\n\r\nIn any case, we can probably add a latch.  It might even make the code simpler.",
          "createdAt": "2021-08-02T05:18:55Z",
          "updatedAt": "2021-08-02T05:18:55Z"
        }
      ]
    },
    {
      "number": 25,
      "id": "MDU6SXNzdWU1NTg3Njk1NDE=",
      "title": "what between false start and handshake done?",
      "url": "https://github.com/quicwg/ack-frequency/issues/25",
      "state": "CLOSED",
      "author": "huitema",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "editorial",
        "needs-pr"
      ],
      "body": "I found an interesting regression when implementing the delayed ack extension. The extension allows the sender of the data to control the max ack delay and the ack gap. In general that's a good idea, but not for the 2 RTT of the connection. Once the client obtains the 1RTT key, it will start receiving data sent by the server in \"false start\". At that point the client has assessed the RTT of the connection, but the server has not. The \"max ack delay\" sent by the server is a guess based on statistics. It will typically be longer than recommended values like RTT/4. The effect is that the first ACKs are sent too late, which  has a cascading effect with some congestion control algorithms.\r\n\r\nMy fix was to use the values locally computed by the client until the session is confirmed and the server can send accurate \"ack frequency\" frames. Not sure whether we should have text about that in the draft.",
      "createdAt": "2020-02-02T22:36:49Z",
      "updatedAt": "2021-09-10T16:23:50Z",
      "closedAt": "2021-09-10T16:23:50Z",
      "comments": [
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm not completely clear on the details here, so hopefully you can clarify.\r\n\r\nIs the server sending an ACK_FREQUENCY frame in 0.5RTT before it has any RTT samples?  If so, yes I would say that's a bad idea and we should add a SHOULD NOT to advise against that.  And the regression is that slow start is slowed down substantially vs the default behavior of sending an ACK every 2 packets?  Or is there another regression?\r\n\r\nPossibly this issue is a variation on #17 about recommendations and potential pitfalls of this extension frame?",
          "createdAt": "2020-02-03T00:28:26Z",
          "updatedAt": "2020-02-03T00:28:26Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "NONE",
          "body": "At 0.5 RTT, the server will start sending data frames: HTTP settings for example, or maybe responses to client requests in 0-RTT packets. \r\n\r\nAs you say, the server should not send an ACK FREQUENCY frame in 0.5RTT before it has any RTT samples. Let's assume it doesn't.\r\n\r\nThe client knows that Min Ack Delay has been negotiated. In that case, my first implementation of the extension was completely deferring to the server, and just setting Ack Delay Max to the parameter advertised by the server. After all, the draft does says that the ACK FREQUENCY frame carries _an update to the peer's \"max_ack_delay\" transport parameter_. That was be by the book. But it was also causing regressions in a number of performance tests, because the value in the TP is typically an upper bound. The acks were sent too late, the connection was ramping up too slowly.",
          "createdAt": "2020-02-03T00:57:48Z",
          "updatedAt": "2020-02-03T00:57:48Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks, presumably the client is setting \"Packet Tolerance\" to a value larger than 2 in its ACK_FREQUENCY frame?  If so, that makes sense.\r\n\r\nIn the \"Motivations\" section, the existing draft says:\r\n\"Starting a connection up quickly without inducing excess queue is important for latency \r\n reduction, for both short and long flows. The sender often needs more frequent \r\n acknowledgments during this phase.\"\r\n\r\nBut maybe there needs to be more cautionary text later in the draft, and less text in \"Motivations\"?",
          "createdAt": "2020-02-03T01:27:17Z",
          "updatedAt": "2020-02-03T01:27:17Z"
        },
        {
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "body": "Summarizing editors' discussion: the issue here seems to be that in an interpretation of the mechanism, the client could change its behavior after receiving `min_ack_delay` but before receiving an ACK-FREQUENCY frame. This should not happen... the goal of `min_ack_delay` is to negotiate future use of ACK-FREQUENCY frames. Until an ACK-FREQUENCY frame is received, an endpoint continues with RFC 9000 behavior. We will add text to this effect.\r\n\r\n@huitema, does this work for you?",
          "createdAt": "2021-07-19T20:22:52Z",
          "updatedAt": "2021-07-19T20:24:41Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "NONE",
          "body": "@janaiyengar yes, that makes sense. I will check that the picoquic code does that.",
          "createdAt": "2021-07-20T19:39:13Z",
          "updatedAt": "2021-07-20T19:39:13Z"
        }
      ]
    },
    {
      "number": 26,
      "id": "MDU6SXNzdWU1NTkwMTAzMzM=",
      "title": "min_ack_delay=0 in TP parameter ",
      "url": "https://github.com/quicwg/ack-frequency/issues/26",
      "state": "CLOSED",
      "author": "junhochoi",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "> Values of 0 and 2^24 or greater are invalid\r\n\r\nI think min_ack_delay=0 should be allowed? It means there is no delay sending ack, which is a current behavior.",
      "createdAt": "2020-02-03T11:07:20Z",
      "updatedAt": "2020-02-06T07:11:18Z",
      "closedAt": "2020-02-06T07:11:18Z",
      "comments": [
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "0 is equivalent to 1 as a value for the \"Packet Tolerance\" field I believe, so I agree that declaring it invalid seems unnecessary.  Also, 0 and 1 are extremely similar given this is in microseconds, and 1 is valid.",
          "createdAt": "2020-02-03T11:11:48Z",
          "updatedAt": "2020-02-03T11:11:48Z"
        },
        {
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "body": "0 and 1 are different, since 0 is immediate, and 1 involves a timer. Though, yeah, it seems silly to disallow immediate.",
          "createdAt": "2020-02-06T07:10:58Z",
          "updatedAt": "2020-02-06T07:10:58Z"
        }
      ]
    },
    {
      "number": 27,
      "id": "MDU6SXNzdWU1NjA4MTgzMDI=",
      "title": "Packet Tolerance is a non-obvious name",
      "url": "https://github.com/quicwg/ack-frequency/issues/27",
      "state": "CLOSED",
      "author": "ianswett",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "ianswett"
      ],
      "labels": [
        "editorial"
      ],
      "body": "By itself, it's not obvious(at least to me), what the field indicates without reading the description.\r\n\r\nAn alternate suggestion is \"Packet threshold\", since recovery calls it \"Packet threshold loss detection\".\r\n \r\n This is pretty clearly editorial.",
      "createdAt": "2020-02-06T07:00:59Z",
      "updatedAt": "2021-07-29T14:39:25Z",
      "closedAt": "2021-07-29T14:39:25Z",
      "comments": [
        {
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "body": "The use of it in loss detection is why I didn't call it packet threshold, to avoid confusion. But I agree that packet threshold is more natural... if you don't think this will cause confusion, I'm fine with it.",
          "createdAt": "2020-02-06T07:08:03Z",
          "updatedAt": "2020-02-06T07:08:03Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "Actually, how about \"Update Packet Threshold\" to align with \"Update Max Ack Delay\"?",
          "createdAt": "2020-02-06T07:14:05Z",
          "updatedAt": "2020-02-06T07:14:05Z"
        },
        {
          "author": "dtikhonov",
          "authorAssociation": "MEMBER",
          "body": "s/Update/New/?",
          "createdAt": "2020-02-06T08:12:52Z",
          "updatedAt": "2020-02-06T08:12:52Z"
        },
        {
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "body": "Both SGTM",
          "createdAt": "2020-02-06T08:34:47Z",
          "updatedAt": "2020-02-06T08:34:47Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "Actually, let me think more, after starting a PR, I think packet threshold would be confusing.",
          "createdAt": "2020-02-06T08:46:16Z",
          "updatedAt": "2020-02-06T08:46:16Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "Do we need \"update_\" in every field name? That seems excessive to me.\r\n\r\nIf we do think that we'd need to have the word somewhere, I think my preference goes to to changing the name of the frame to \"update_ack_frequency,\" and refrain from having \"update_\" in each field name.",
          "createdAt": "2020-04-07T01:51:26Z",
          "updatedAt": "2020-04-07T01:51:26Z"
        },
        {
          "author": "dtikhonov",
          "authorAssociation": "MEMBER",
          "body": "[Currently](https://tools.ietf.org/html/draft-iyengar-quic-delayed-ack-00), the draft states:\r\n\r\n```\r\n   Packet Tolerance:  A variable-length integer representing the maximum\r\n      number of ack-eliciting packets after which the receiver sends an\r\n      acknowledgement.  A value of 1 will result in an acknowledgement\r\n      being sent for every ack-eliciting packet received.  A value of 0\r\n      is invalid.\r\n```\r\n\r\nWe see that \"packet\" is a unit of measure; what it measures is the threshold after which an ACK is sent.  A better name would be _ACK-eliciting threshold_.  The fact that it represents a number of packets does not have to be in the name itself.",
          "createdAt": "2020-04-07T12:57:12Z",
          "updatedAt": "2020-04-07T12:57:12Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "ACK-eliciting threshold does seem better.  Or even Ack threshold.\r\n\r\n@kazuho changing the frame to UPDATE_ACK_FREQUENCY and then removing update_ from the names WFM.",
          "createdAt": "2020-04-07T18:33:07Z",
          "updatedAt": "2020-04-07T18:33:07Z"
        },
        {
          "author": "dtikhonov",
          "authorAssociation": "MEMBER",
          "body": "How about _ACK_FREQUENCY_UPDATE_, then?  This way, you can still write the frame type as an abbreviation, `0xAFu`!",
          "createdAt": "2020-04-07T18:40:44Z",
          "updatedAt": "2020-04-07T18:40:44Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "Do we need \"update\" at all?\r\n\r\nI think we can simply say that an \"ACK_FREQUENCY\" frame updates how frequent ACK frames are sent.\r\n\r\nConsider MAX_STREAMS. The frame name does not include \"update\". It's implied. The same goes to the field name. The name is simply \"maximum streams.\" We can follow that convention.",
          "createdAt": "2020-04-07T19:05:54Z",
          "updatedAt": "2020-04-07T19:05:54Z"
        },
        {
          "author": "mjoras",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Agree with @kazuho on not including UPDATE in the name. Updating is implicit in the semantics of this frame, as it is not an informative frame.\r\n\r\nI also prefer ACK-eliciting threshold to just ACK threshold. ACK-eliciting threshold makes it clear that the threshold is against ACK-eliciting packets, which are well-defined.",
          "createdAt": "2020-04-29T16:38:34Z",
          "updatedAt": "2020-04-29T16:38:34Z"
        },
        {
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "body": "Both changes SGTM (remove \"Update\" and change to \"Ack-eliciting Threshold\")",
          "createdAt": "2021-07-12T17:40:17Z",
          "updatedAt": "2021-07-12T17:40:17Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "One potential issue with changing 'Update Max Ack Delay' to 'Max Ack Delay' is it could be confused with the 'max_ack_delay' transport param.",
          "createdAt": "2021-07-12T17:44:08Z",
          "updatedAt": "2021-07-12T17:44:08Z"
        },
        {
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "body": "Yeah, we do need clarity here. An endpoint advertizes its own max_ack_delay in the TP, but the ACK-FREQUENCY frame is a command or request to the peer to change the peer's advertized value.",
          "createdAt": "2021-07-19T20:31:28Z",
          "updatedAt": "2021-07-19T20:31:28Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "@janaiyengar and I were talking and are worried about confusion on this one.\r\n\r\nOne suggestion is \"Request Max Ack Delay\"",
          "createdAt": "2021-07-19T20:32:21Z",
          "updatedAt": "2021-07-19T20:32:21Z"
        }
      ]
    },
    {
      "number": 30,
      "id": "MDU6SXNzdWU1NjIwMDQxNTQ=",
      "title": "Make it more clear that implementations can send less ACKs",
      "url": "https://github.com/quicwg/ack-frequency/issues/30",
      "state": "CLOSED",
      "author": "rpaulo",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial",
        "needs-pr"
      ],
      "body": "As discussed with @janaiyengar a couple days ago, I think the draft should make it clear that implementations are allowed to send less ACKs than the requested \"packet tolerance\".\r\n\r\n> 6.3.  Batch Processing of Packets\r\n>   For performance reasons, an endpoint can receive incoming packets\r\n>   from the underlying platform in a batch of multiple packets.  This\r\n>   batch can contain enough packets to cause multiple acknowledgements\r\n>   to be sent.\r\n>\r\n>   To avoid sending multiple acknowledgements in rapid succession, an\r\n>   endpoint MAY process all packets in a batch before determining\r\n>   whether a threshold has been met and an acknowledgement is to be sent\r\n>   in response.\r\n\r\nThe last paragraph is a bit unclear since \"threshold\" is undefined.  I think we should just say that:\r\n\r\n1) it MAY process all packets in a batch (already there)\r\n2) it MAY send less ACKs when it has finished processing the batch\r\n\r\n",
      "createdAt": "2020-02-08T11:02:23Z",
      "updatedAt": "2021-10-01T20:36:49Z",
      "closedAt": "2021-10-01T20:36:49Z",
      "comments": [
        {
          "author": "rpaulo",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Already clarified in RFC 9000.",
          "createdAt": "2021-10-01T20:36:49Z",
          "updatedAt": "2021-10-01T20:36:49Z"
        }
      ]
    },
    {
      "number": 34,
      "id": "MDU6SXNzdWU1OTYzMDU2MzM=",
      "title": "ignore_order vs. inducing ack on PTO (aka IMMEDIATE_ACK)",
      "url": "https://github.com/quicwg/ack-frequency/issues/34",
      "state": "CLOSED",
      "author": "kazuho",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "design"
      ],
      "body": "When sending a PTO packet, a sender wants to induce an immediate ACK. The only trick I know to induce such an ACK is intentionally skip the packet number.\r\n\r\nHowever, the problem of that approach is that it relies on the receiver not ignoring reorders.\r\n\r\nWhen an ACK_FREQUENCY frame previously sent had set the `ignore_order` bit, then it become impossible for a sender to induce an immediate ACK when sending a PTO packet.\r\n\r\nAt the moment, the only solution is to bundle an ACK_FREQUENCY packet in each PTO packet, but that seems like a bit of unnecessary overhead to me. Should we have a dedicated frame for inducing immediate ACKs instead?",
      "createdAt": "2020-04-08T04:48:29Z",
      "updatedAt": "2021-09-15T23:28:30Z",
      "closedAt": "2021-09-15T23:28:30Z",
      "comments": [
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "That's an option.  Another option is to revisit the max_reordering idea discussed in #18.\r\n\r\nIf the max reordering was 5, then you could skip 5 PNs.  I do feel like it'd be nice to allow specifying an int for max reordering, since that matches up with adaptive packet threshold loss detection, but as I expressed in #18, I think getting the details right are deceptively difficult, so I'm torn.",
          "createdAt": "2020-04-08T14:00:56Z",
          "updatedAt": "2020-04-08T14:00:56Z"
        },
        {
          "author": "mjoras",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This does seem like a real problem. I like the idea of a single \"ELICIT_ACK\" type frame. With one byte a sender could effectively mark its PTOs ensuring they get an ACK without relying on the trick.\r\n\r\nAn explicit frame is also easier to implement for the sender than the packet number skipping.",
          "createdAt": "2020-04-29T16:49:47Z",
          "updatedAt": "2020-04-29T16:49:47Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "There's quite a bit of discussion on this on the tcpm mailing list at the moment, ie: https://mailarchive.ietf.org/arch/browse/tcpm/?gbt=1&index=OlHjbLuquYYe7twVPuZBHqbBph8\r\n\r\nI'm increasingly thinking it's worth using an unused protected bit in the header for this.  It'd end up competing with the 2-bit packet loss measurements, but given those are experimental and may never be widely deployed, I think it might be worth it.\r\n\r\nFor example, I believe this could allow an implementation to not include max_ack_delay in PTO if it set the \"ACK-pull\"(or whatever it's called) bit on the final packet.  That already seems possible if more than the threshold number of ack-eliciting packets are outstanding.",
          "createdAt": "2020-05-02T20:51:35Z",
          "updatedAt": "2020-05-02T20:51:35Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "I've thought more about this, and I think most of the time a 1-byte frame would be acceptable, but it definitely adds some implementation complexity, so I'd be curious which design others prefer?  If we can decide, then I'll be happy to write a PR(or @kazuho can).\r\n\r\nBesides PTO, a use case would be making the last packet before becoming app-limited elicit an immediate ACK.  This could allow skipping max_ack_delay for all PTOs(see #37), though always doing it could be a bit much in some cases.  For example, browsers commonly send a series of requests, but to the transport it seems app-limited between them, because it doesn't know the browser has another request to send.\r\n\r\nIt might be useful for 'chirping' as well, but I've never tried that, so it's mostly speculation.",
          "createdAt": "2020-05-03T20:34:58Z",
          "updatedAt": "2020-05-03T20:36:04Z"
        },
        {
          "author": "mjoras",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> I'm increasingly thinking it's worth using an unused protected bit in the header for this. It'd end up competing with the 2-bit packet loss measurements, but given those are experimental and may never be widely deployed, I think it might be worth it.\r\n\r\nWe don't currently have any intention of deploying them either, and I think that's unlikely to change. I haven't seen a lot of good evidence that they are terribly helpful, and content providers don't seem to have a good incentive for implementing it. \r\n\r\n> I've thought more about this, and I think most of the time a 1-byte frame would be acceptable, but it definitely adds some implementation complexity, so I'd be curious which design others prefer? If we can decide, then I'll be happy to write a PR\r\n\r\nFor us at least, the difference in complexity for a frame versus a bit in the header is negligible. A frame is actually be slightly easier to implement and losing a byte here and there isn't so bad.",
          "createdAt": "2020-05-05T23:32:12Z",
          "updatedAt": "2020-05-06T00:00:01Z"
        },
        {
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> I've thought more about this, and I think most of the time a 1-byte frame would be acceptable, but it definitely adds some implementation complexity, so I'd be curious which design others prefer?\r\n\r\nI strongly prefer using the header bit. Although it will be a bit more work to implement, the fact that I won't end up with a 1-byte STREAM frame that I have to split off at the end of the packet will be worth the effort.",
          "createdAt": "2020-05-06T01:02:48Z",
          "updatedAt": "2020-05-06T01:02:48Z"
        },
        {
          "author": "dtikhonov",
          "authorAssociation": "MEMBER",
          "body": ">>   I'm increasingly thinking it's worth using an unused protected bit in the header for this. It'd end up competing with the 2-bit packet loss measurements, but given those are experimental and may never be widely deployed, I think it might be worth it.\r\n>\r\n> We don't currently have any intention of deploying them either, and I think that's unlikely to change. **I haven't seen a lot of good evidence that they are terribly helpful**\r\n\r\nIs testimony of network operators not taken as evidence?  I remember a line of people, from different companies -- BT, ATT, and so on, at IETF 101 practically begging for some information in QUIC packets to be exposed for monitoring and troubleshooting.",
          "createdAt": "2020-08-07T11:59:47Z",
          "updatedAt": "2020-08-07T11:59:47Z"
        },
        {
          "author": "dtikhonov",
          "authorAssociation": "MEMBER",
          "body": "> I strongly prefer using the header bit. Although it will be a bit more work to implement, the fact that I won't end up with a 1-byte STREAM frame that I have to split off at the end of the packet will be worth the effort.\r\n\r\nI do not see anyone propose a 1-byte *STREAM* frame.  I believe what is meant is a new frame type.\r\n\r\nIf anything, using a new frame type to elicit an ACK is easier than using a header bit, as it involves fewer parts of the code to change.",
          "createdAt": "2020-08-07T12:08:36Z",
          "updatedAt": "2020-08-07T12:08:36Z"
        },
        {
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> I do not see anyone propose a 1-byte STREAM frame. I believe what is meant is a new frame type.\r\n\r\nNobody is proposing a 1-byte STREAM frame (you can't just make up stream data anyway). \r\nThe problem is that a new frame would consume bytes (or probably one byte) in the packet payload. Given that you set this signal on a PTO, and PTOs are often retransmissions of packets, this would require you to repackage (and, most likely, cut off a single byte from a STREAM frame). Using a header bit would solve that problem.",
          "createdAt": "2020-08-07T12:29:40Z",
          "updatedAt": "2020-08-07T12:29:40Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "@janaiyengar and I discussed this and there are number of ways to fix this, but given this issue of not being able to elicit an immediate ACK by skipping packet numbers is introduced by the draft, we feel it's important it be fixed in some way.\r\n\r\nOne more option is new STREAM frame codepoints that elicit an immediate ACK.",
          "createdAt": "2021-07-19T20:50:57Z",
          "updatedAt": "2021-07-19T20:50:57Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm ready to write a PR, but I'd appreciate thoughts on whether the existing PING frame should be repurposed or we should add a new frame(ACK, PONG, etc).\r\n\r\nI lean towards a new frame, since there are enough code-points and I believe there are use cases for the existing PING frame that does not elicit an immediate ACK.",
          "createdAt": "2021-07-31T01:29:37Z",
          "updatedAt": "2021-07-31T01:29:37Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "> I lean towards a new frame, since there are enough code-points and I believe there are use cases for the existing PING frame that does not elicit an immediate ACK.\r\n\r\n+1. While I would not be opposed to repurposing the existing PING frame, I do not see the necessity of doing that. Let's simply consume one code point of the remaining 33.",
          "createdAt": "2021-08-02T02:05:36Z",
          "updatedAt": "2021-08-02T02:05:36Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks, now for bikeshedding time.\r\n\r\nSome possible names:\r\n ACK_ME\r\n ACK_PULL (from TCP)\r\n FAST_ACK\r\n PONG",
          "createdAt": "2021-08-02T15:36:11Z",
          "updatedAt": "2021-08-02T15:36:11Z"
        },
        {
          "author": "mjoras",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Putting on my bikeshedding hat:\r\n\r\nI don't think we should prefix the frame name with ACK_ since that almost makes it looks like yet another variant of the ACK frame.\r\n\r\nThe \"pull\" TCP terminology is fine (e.g. PULL_ACK) but we could also be more explicit with something like SOLICIT_ACK.",
          "createdAt": "2021-08-02T18:22:44Z",
          "updatedAt": "2021-08-02T18:22:44Z"
        },
        {
          "author": "msvoelker",
          "authorAssociation": "NONE",
          "body": "SCTP has something similar and calls it SACK-IMMEDIATELY (RFC 7053).",
          "createdAt": "2021-08-04T13:56:09Z",
          "updatedAt": "2021-08-04T13:56:09Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks, I'd be happy with ACK_IMMEDIATELY or IMMEDIATE_ACK",
          "createdAt": "2021-08-04T14:48:01Z",
          "updatedAt": "2021-08-04T14:48:01Z"
        },
        {
          "author": "mjoras",
          "authorAssociation": "CONTRIBUTOR",
          "body": "For those two options I'd prefer IMMEDIATE_ACK for the same reasoning as above -- so it appears less like an ACK variant.",
          "createdAt": "2021-08-04T21:06:43Z",
          "updatedAt": "2021-08-04T21:06:43Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "IMMEDIATE_ACK sounds good to me. Alternatively, I'd be also fine with something like ACK_NOW.",
          "createdAt": "2021-08-04T21:14:56Z",
          "updatedAt": "2021-08-04T21:14:56Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "IMMEDIATE_ACK it is, PR coming.",
          "createdAt": "2021-09-08T12:19:34Z",
          "updatedAt": "2021-09-08T12:19:34Z"
        }
      ]
    },
    {
      "number": 35,
      "id": "MDU6SXNzdWU2MDI1NDQyMjY=",
      "title": "Replace Ignore Order with Packet Threshold",
      "url": "https://github.com/quicwg/ack-frequency/issues/35",
      "state": "CLOSED",
      "author": "ianswett",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "ianswett"
      ],
      "labels": [
        "design",
        "needs-discussion"
      ],
      "body": "Issue #34 points out that if ignore_order is true, there's no way to get an immediate ACK(for PTO or otherwise).\r\n\r\nThis proposal is very similar to that discussed in #18, but I believe I can specify both how to implement it and how it could be used better than I was able to previously.\r\n\r\nI believe there's a straightforward use case every implementation can benefit from, which is communicating one's packet threshold for loss detection.\r\n\r\nI previously presented data at maprg which showed about half of reordering is twiddles(reorder of 1), so having some tolerance for it can reduce the number of unnecessary immediate acks substantially.  In order for this to not delay loss detection in some cases, the ack_delay field needs to be no larger than the time threshold for loss detection, which could be a limitation depending upon min_ack_delay, but I would typically expect to be fine.\r\n\r\nThe field could also be used for other use cases where packets aren't always sent in order, but that doesn't need to be explained in this draft.\r\n\r\nFor implementation, on every ack-eliciting packet:\r\n- If it's smaller than the largest acked in the last sent ack frame, send an immediate ACK because it fills a hole.\r\n- If it's larger than the last sent largest acked, only send an immediate ACK if there are missing packets greater than the last sent largest acked that are at least packet_threshold away from the current largest received packet.\r\n\r\nThis speeds up loss detection very slightly vs the core transport draft if the packet reordering threshold isn't an odd number, because the ACK is sent exactly when the sender will be able to use it to declare a loss.",
      "createdAt": "2020-04-18T20:24:57Z",
      "updatedAt": "2021-09-10T16:26:52Z",
      "closedAt": "2021-09-10T16:26:52Z",
      "comments": [
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "Thank you for opening the issue, I think this is the correct direction.\r\n\r\nHaving a way to specify a threshold is nothing but improvement from just having a boolean. I do not think there is a reason to object against changing the field to a threshold, based on the assumption that there is a use-case (as you describe).\r\n\r\nTo be clear, I am not excited about using reorder threshold for incuding ACKs when sending PTOs, because skipping _N_ is uglier than skipping 1, considering the fact that N (i.e. the threshold) might or not have been delivered to the peer. But that's a complaint against reusing this mechanism for inducing ACKs, and not an argument against changing the boolean flag to a threshold.",
          "createdAt": "2020-04-21T23:15:10Z",
          "updatedAt": "2020-04-21T23:15:10Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks for your thoughts and support @kazuho \r\n\r\nI agree that this is not an ideal fix for #34 and we may want to do more than this.",
          "createdAt": "2020-04-22T18:57:01Z",
          "updatedAt": "2020-04-22T18:57:01Z"
        },
        {
          "author": "mjoras",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I agree that an explicit threshold is strictly better than a boolean. The only problem is one of naming, where we now have two things that are arguably thresholds, where only one is titled as such (\"Packet Loss Threshold\" and \"Packet Tolerance\" )\ud83d\ude42 , but that's a bikeshed for #27.\r\n\r\n\r\n\r\n",
          "createdAt": "2020-04-29T16:35:17Z",
          "updatedAt": "2020-04-29T16:35:17Z"
        },
        {
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "body": "I think this is probably fine. This does put a larger burden on the receiver (a sender can simply set the variable to 0), but as I noted in [this comment](https://github.com/janaiyengar/ack-frequency/issues/18#issuecomment-578361546) on #18, the receiver can be reasonably simple too.\r\n\r\nI agree that it doesn't seem great though to solve this particular problem... in addition to requiring skipping N packets at the sender, it also means that when wanting an immediate ACK, a sender that would otherwise use 0 (ignore order) will now have to send two ACK_FREQUENCY frames: one to elicit the immediate ACK, and another later to set the ignore order back again. I'll think about this a bit more.",
          "createdAt": "2020-05-01T23:19:45Z",
          "updatedAt": "2020-05-01T23:19:45Z"
        },
        {
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "body": "How about if we simply say that the receiver always ACKs PINGs immediately? Does that solve the immediate ACK on PTO problem?",
          "createdAt": "2020-05-01T23:20:47Z",
          "updatedAt": "2020-05-01T23:20:47Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "ACKing PINGs immediately seems sensible and this question has come up before(I believe Igor raised it).  At the moment, PINGs exist to elicit an ACK and I don't think they have any other purpose?  There may need to be some rate-limit on immediate ACKs(ie: ACK within kGranularity rather than 'immediately'), but I think we have text that indicates waiting for kGranularity still counts as 'immediate'.\r\n\r\nChanging the response to PING would be a change to the core spec, so I'd suggest you create an issue immediately if we're going to do that.  In an ideal world, it wouldn't consume a byte, since that can make retransmission logic more complex(ie: do I include a PING with my PTO and remove a byte of payload or just send the full payload).  We have 2 unused bits in the header, so we could use one of those if we wanted.  That could be an extension, though it'd end up competing with the loss bits.\r\n\r\nBut this entire comment relates to #34 more than this issue.",
          "createdAt": "2020-05-02T00:58:08Z",
          "updatedAt": "2020-05-02T00:58:08Z"
        },
        {
          "author": "dtikhonov",
          "authorAssociation": "MEMBER",
          "body": "> Changing the response to PING would be a change to the core spec\r\n\r\nCan't we simply limit this change to PING to when this extension is negotiated?",
          "createdAt": "2020-08-07T12:23:13Z",
          "updatedAt": "2020-08-07T12:23:13Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "MEMBER",
          "body": "As you might be able to tell from the discussion on the pull request, I've spent a little time working on this.  I struggled to understand this proposal, because the way it is framed is confusing.  I believe that there is a much simpler way of describing and implementing this than is in the current draft (and the proposed change).\r\n\r\nThe current strategy has you immediately ACK for any Initial or Handshake packet, or any packet numbered lower than the largest acknowledged.  (You might also add a packet containing PING, which is reasonable.)  The draft should put those universal conditions for an immediate ACK in a separate section.  Right now, this is not very clear in the text.\r\n\r\nThen there are those packets that arrive after largest acknowledged.  The draft before this change covers packets that arrive perfectly in sequence.  For those, there are a certain number that arrive that don't get acknowledged.  If you get more than that, then you acknowledge immediately.  This is currently phrased differently, in that you acknowledge when you receive N.  \r\n\r\nThis issue proposes to cover the case where the packets you receive after largest acknowledged are NOT contiguous.  Phrased in that way, the number is the same as the packet threshold, but it only applies after there is a gap detected.\r\n\r\nThat leaves you with:\r\n\r\n![Immediate ACK conditions](https://user-images.githubusercontent.com/67641/89747912-38f2a680-db04-11ea-9d7d-430556a8933a.png)\r\n\r\nThat is, there is a window in which packets can arrive without generating an immediate acknowledgment.  I've found that thinking in those terms simplifies this a lot.\r\n\r\nWith this picture in mind, the special 0 value that Ian's pull request uses to disable the loss threshold isn't necessary.  You can disable the special loss threshold by setting that value to be the same as the packet threshold.  You might have to prohibit the loss threshold from exceeding the packet threshold just to avoid silly conditions where a gap causes more delays, but the receiver could just clamp the value.\r\n\r\nI am going to suggest that this be changed to the number of unacknowledged, contiguous packets so that you can remove 0 as an invalid value.  That is, of course, orthogonal; you can always add one, but you can see that this is not necessary.  As you can see from the diagram, if you want an immediate ACK always, it is easier to think of the window being 0 width than it is to think about the packet that you received.\r\n\r\nBTW, you can also think about the time component in the same way: there is a period of time during which you don't generate an immediate acknowledgment.  That isn't perfect, because you start that period when the first packet arrives, but it's not a *bad* fit.",
          "createdAt": "2020-08-10T02:35:17Z",
          "updatedAt": "2020-08-10T02:35:17Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "MEMBER",
          "body": "One thing to note about the above is that you need to skip all non-ack-eliciting packets that appear immediately after the largest acknowledged packet.  Our stack doesn't individually track whether a received packet is ack-eliciting or not, so our logic isn't perfect in that regard.  I believe you get close though if you increase \"largest acknowledged\" by one every time the next packet arrives and it isn't ack-eliciting.\r\n\r\nThen the logic is fairly simple:\r\n\r\n```python\r\n# def on_received(pn):\r\nranges.add(pn) # Track receipt.\r\n\r\nif space != ApplicationData:\r\n    immediate_ack = true\r\nelse if pn == ranges.largest.largest:\r\n    # This determines whether there is a gap in the unacknowledged packets.\r\n    if largest_acknowledged < ranges.largest.smallest:\r\n        threshold = loss_threshold\r\n    else:\r\n        threshold = packet_threshold\r\n    immediate_ack = pn > largest_acknowledged + threshold\r\nelse if pn < largest_acknowledged:\r\n    immediate_ack = true\r\nelse:\r\n    immediate_ack = false\r\n\r\nif ack_eliciting:\r\n    if immediate_ack:\r\n        send_ack(now)\r\n    else:\r\n        schedule_ack(now + ack_delay)\r\nelse if pn == largest_acknowledged + 1:\r\n    # Disregard this packet for later packet/loss threshold calculations.\r\n    largest_acknowledged = pn\r\n```",
          "createdAt": "2020-08-10T09:56:46Z",
          "updatedAt": "2020-08-10T09:57:26Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "@martinthomson I think that _almost_ works, but I am not sure if it's sufficient. It seems that the approach does not handle reordered packets that carry packet numbers below largest acked, and I think that might be a problem.\r\n\r\nLet's consider the following example. There are two paths from the server, with a difference of 10ms. The server sends a packet every millisecond. Odd-numbered packets are transferred on the faster path, even-numbered ones on the slower path. \"Packet Tolerance\" is set to 25 packets (1/8th of RTT).\r\n\r\n```\r\n   +------ 100ms ------+\r\n   v                   |\r\nserver --> 100ms --> client\r\n       --> 110ms -->\r\n```\r\n\r\nThe client will receive packets in the order of something like: 11, 2, 13, 4, 15, 6, 17, 8, 19, 10, 21, 12, 23, 14, 25, 16, 27, 18, 29, 20 ...\r\n\r\nWhat we want to achieve is:\r\n* When the reordering threshold is small (e.g., 5), this pattern should elicit one ack every 2 packets.\r\n* When the reordering threshold is above the reorder (e.g., 12), this pattern should elicit one ack every 25 packets.\r\n\r\nGoing back to the algorithm proposed in https://github.com/janaiyengar/ack-frequency/issues/35#issuecomment-671265305. Let's say that the client has sent an ack when it received 15. It will then go on to send acks when it receives packet 6, 8, 10, 12, 14, because the received packet number is below largest acked.\r\n\r\nIn this example, the proposed approach will emit 6 acks per 35 incoming packets, whereas what we want to see is 1 ack per 25 incoming packets.",
          "createdAt": "2020-08-12T07:50:50Z",
          "updatedAt": "2020-08-12T07:50:50Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "MEMBER",
          "body": "So I worked through that and concluded that in cases of severe reordering you do get a burst of acknowledgments.  And if you have consistent reordering that happens a lot.\r\n\r\nIn your case, at least at the beginning, you will accumulate packets up to some number before you hit the reordering threshold and send an immediate ACK.  A reordering threshold less than 10 results in an ACK for every packet, but that's the intent, is it not?\r\n\r\nAs for the 6, 10, 10, 12, 14 being immediately acknowledged, this is based on this text in Ian's proposed resolution to this issue:\r\n\r\n> [...], implementations MUST still immediately acknowledge any received packets with packet numbers smaller than the largest 'Largest Acked' value previously sent in an ACK frame.\r\n\r\nI just accepted this premise as valid, but I see that it might not be.  In this example, it doesn't matter what is acknowledged, the next packet (and every other) will result in an immediate ACK.\r\n\r\nAnother scenario, perhaps a more realistic scenario one, is the one where a single packet (a small packet at the tail of a sequence of larger packets) is significantly reordered.  If you have 40 packets in flight and the last one jumps ahead of 23 of them, then this algorithm might be OK or it might not.  If it sees that packet 40 is preceded by 23 gaps, and it has acknowledged something past packet 15, then it will let the gap fill in if the loss threshold is 22 or 23.  If it acknowledged anything less than 15, it will immediately acknowledge 40 and then generate an immediate ACK for every packet that arrives as the gap is filled.  The huge variation between those cases is a little worrying.\r\n\r\nIf instead we count unacknowledged, ack-eliciting packets then we get something different.  You count each arriving ack-eliciting packet toward both thresholds if (? algorithm), but only toward the packet threshold if there is not.  We don't care about the largest acknowledged, just newly arriving packets.\r\n\r\nThe algorithm that I might use for that might look like:\r\n\r\n```python\r\n# def on_received(pn):\r\nexpected = ranges.largest.largest + 1\r\nranges.add(pn) # Track receipt.\r\n\r\n# Assuming that the packet was ack-eliciting...\r\nif space != ApplicationData:\r\n    immediate_ack = true\r\nelse:\r\n    out_of_order ||= pn != expected:\r\n    unacknowledged += 1\r\n    if out_of_order:\r\n        immediate_ack = unacknowledged > loss_threshold\r\n    else:\r\n        immediate_ack = unacknowledged > packet_threshold\r\n```\r\n\r\nThis doesn't consider the largest acknowledged at all.\r\n\r\nDoes that sound better?",
          "createdAt": "2020-08-12T09:45:42Z",
          "updatedAt": "2020-08-12T09:45:42Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "@martinthomson Thank you for the response.\r\n\r\nI think it might be better to take a step back and discuss what we want to achieve, before discussing how things can be implemented.\r\n\r\n> In your case, at least at the beginning, you will accumulate packets up to some number before you hit the reordering threshold and send an immediate ACK. A reordering threshold less than 10 results in an ACK for every packet, but that's the intent, is it not?\r\n\r\nWe do not expect to see that. In our case (sending HTTP responses from different nodes within a server cluster), we would know when we would start sending from multiple nodes, and when we would stop doing so. Therefore, we can increase reordering threshold when we are about to enter that mode, reduce the threshold when we exit.\r\n\r\nConsider the case of sending two incremental responses from two nodes. Assuming that the prioritization logic would designate different QUIC streams for every packetiztaition opportunity, we will see the pattern that I used as the example; half of the packets (e.g., odd-numbered) sent from one cluster node arrive earlier (or later) than those sent from the other.\r\n\r\n> Another scenario, perhaps a more realistic scenario one, is the one where a single packet (a small packet at the tail of a sequence of larger packets) is significantly reordered.\r\n\r\nWe expect to see this pattern, when the coordinator node within the cluster sends ACKs, while all the ack-eliciting packets are sent by a different node.\r\n\r\nAt the moment, the draft has `ignore_order` bit, and it covers these use-cases fairly well. For us, setting the ignore bit and relying on packet threshold (which would be set to 1/8th of CWND) would work fine.\r\n\r\nAs stated in [my earlier comment](https://github.com/janaiyengar/ack-frequency/issues/35#issuecomment-617459893), my strong desire is that the switch from a boolean to an integer, assuming that would happen, would not cause regression regarding these use-cases.",
          "createdAt": "2020-08-12T10:38:24Z",
          "updatedAt": "2020-08-12T10:38:40Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "MEMBER",
          "body": "Based on this feedback, I think that the simpler scheme this envisages is much better than what I earlier suggested.  So I am now of the opinion that this issue should be closed without changing the spec.",
          "createdAt": "2021-04-07T22:36:32Z",
          "updatedAt": "2021-04-07T22:36:32Z"
        },
        {
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "body": "Summarizing editors' discussion: We believe that there might be some non-zero performance benefits in doing packet_threshold, but there is clearly high cognitive complexity and therefore unknown issues. At this time, we believe that retaining ignore_order allows us to move forward, and if there is more information that shows the value of doing more, we will revisit this issue.\r\n\r\n(To be discussed at IETF.)",
          "createdAt": "2021-07-19T20:56:40Z",
          "updatedAt": "2021-07-19T20:56:40Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "Until there's evidence this is valuable for performance, closing this.",
          "createdAt": "2021-09-10T16:26:52Z",
          "updatedAt": "2021-09-10T16:26:52Z"
        }
      ]
    },
    {
      "number": 37,
      "id": "MDU6SXNzdWU2MTE0OTk3NzU=",
      "title": "Allow using kGranularity instead of max_ack_delay in PTO calculation",
      "url": "https://github.com/quicwg/ack-frequency/issues/37",
      "state": "CLOSED",
      "author": "ianswett",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "design"
      ],
      "body": "With this extension, an immediate ACK is expected if more than the \"Packet Tolerance\" ack-eliciting packets are outstanding.  Given that, it may be a worthwhile optimization to allow the max_ack_delay to not be included in the PTO computation in some cases.  If we're not going to allow that, I think we should explain why.\r\n\r\nhttps://github.com/janaiyengar/ack-frequency/blob/master/draft-iyengar-quic-delayed-ack.md#computation-of-probe-timeout-period\r\n\r\nThis split off #34, but I think the question of whether max_ack_delay always needs to be included in PTO should be separate from whether QUIC would benefit from an ACK-pull mechanism of some sort.  That being said, if a mechanism did exist, we add details about when ACK-pull allowed max_ack_delay to not be included.",
      "createdAt": "2020-05-03T20:26:32Z",
      "updatedAt": "2021-09-10T07:15:35Z",
      "closedAt": "2021-09-10T07:15:35Z",
      "comments": [
        {
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "body": "This is a clever optimization, I agree it's worth some text.",
          "createdAt": "2021-07-19T20:59:08Z",
          "updatedAt": "2021-07-19T20:59:08Z"
        }
      ]
    },
    {
      "number": 38,
      "id": "MDU6SXNzdWU2NDEwMjc5OTc=",
      "title": "What about ack decimation?",
      "url": "https://github.com/quicwg/ack-frequency/issues/38",
      "state": "CLOSED",
      "author": "marten-seemann",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "design"
      ],
      "body": "Chrome has [some logic](https://source.chromium.org/chromium/chromium/src/+/master:net/third_party/quiche/src/quic/core/quic_received_packet_manager.cc;l=284-287) to delay sending of an immediate acknowledgement for reordered packets. This reduces the number of ACKs sent, since, if I remember @ianswett's presentation in mapgr correctly, most of the packet reorderings are just one packet number apart from each other.\r\n\r\nDo we need something like this?",
      "createdAt": "2020-06-18T08:49:07Z",
      "updatedAt": "2021-09-10T16:25:52Z",
      "closedAt": "2021-09-10T16:25:52Z",
      "comments": [
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "This didn't end up being that useful in practice(application metrics were slightly worse), so it's in the process of being removed.\r\n\r\nI think it turns out sending an extra ACK for an occasional twiddle just isn't that costly.",
          "createdAt": "2020-07-27T19:33:23Z",
          "updatedAt": "2020-07-27T19:33:23Z"
        },
        {
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "body": "Summarizing editors' discussion: This is a variation on `ignore_order`, and the proposed resolution is similar to #35: go with simple `ignore_order` until we have new data/information.",
          "createdAt": "2021-07-19T21:07:17Z",
          "updatedAt": "2021-07-19T21:07:17Z"
        }
      ]
    },
    {
      "number": 40,
      "id": "MDU6SXNzdWU3MTUwOTAwMjk=",
      "title": "Specify whether storing min_ack_delay TP is mandatory",
      "url": "https://github.com/quicwg/ack-frequency/issues/40",
      "state": "CLOSED",
      "author": "dtikhonov",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "design"
      ],
      "body": "The transport I-D 31 [states](https://tools.ietf.org/html/draft-ietf-quic-transport-31#section-7.4.1):\r\n\r\n```\r\n   The definition of a new transport parameter (Section 7.4.2) MUST\r\n   specify whether storing the transport parameter for 0-RTT is\r\n   mandatory, optional, or prohibited.  A client need not store a\r\n   transport parameter it cannot process.\r\n```\r\n\r\nThis information is missing from [draft-iyengar-quic-delayed-ack-01](https://tools.ietf.org/html/draft-iyengar-quic-delayed-ack-01).",
      "createdAt": "2020-10-05T19:08:26Z",
      "updatedAt": "2021-09-10T16:24:45Z",
      "closedAt": "2021-09-10T16:24:45Z",
      "comments": [
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "FWIW, I tend to think that this issue is coupled with #22, and that endpoints do not need to, due to the reasons being explained on that issue.",
          "createdAt": "2020-11-03T02:16:17Z",
          "updatedAt": "2020-11-03T02:16:17Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "Fixed by #63",
          "createdAt": "2021-09-10T16:24:45Z",
          "updatedAt": "2021-09-10T16:24:45Z"
        }
      ]
    },
    {
      "number": 42,
      "id": "MDU6SXNzdWU3MzQ5MzIxNDY=",
      "title": "Directionality of the negotiation",
      "url": "https://github.com/quicwg/ack-frequency/issues/42",
      "state": "CLOSED",
      "author": "kazuho",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "To me it seems that the draft can be interpreted in the following two ways. It would be great if there was a clarification regarding which is correct:\r\n\r\n* `min_ack_delay` TP is a declaration that the endpoint will recognize ACK_FREQUENCY frames. The receiver of the TP can send ACK_FREQUENCY frames regardless of it sending `min_ack_delay` TP or not.\r\n* Use of delayed acks are negotiated by both endpoints sending `min_ack_delay` TP. ACK_FREQUENCY frames can be used only when the both endpoints send the TP.\r\n\r\nI assume that the intent to be the latter, but I'm not sure.",
      "createdAt": "2020-11-03T00:34:12Z",
      "updatedAt": "2021-04-19T18:37:46Z",
      "closedAt": "2021-04-19T18:37:46Z",
      "comments": [
        {
          "author": "mjoras",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Interesting, I actually interpreted it to be the former. I think it is reasonable for an implementation to accept ACK_FREQUENCY without having any intention of sending them itself. I.e. I don't see any reason it has to be mutually negotiated. ",
          "createdAt": "2020-11-03T04:09:52Z",
          "updatedAt": "2020-11-03T04:09:52Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "I agree that it's totally fine to consider the use being allowed independently for each direction. Though, for the ease of testing, I might prefer the use being negotiated mutually. It's a bit complex to have two flags; one that emits the min_ack_delay TP and another that controls the recognition of that TP sent by the peer.\r\n\r\nEndpoints that are not interested in sending ACK_FREQUENCY frames can just send the min_ack_delay TP ~with the value set to max_ack_delay~.",
          "createdAt": "2020-11-03T04:37:50Z",
          "updatedAt": "2020-11-03T04:51:06Z"
        },
        {
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "body": "@mjoras -- that's not quite right. If this were unilateral, that would mean that an endpoint that _receives_ the TP would not need to advertise the TP. That's a bit confusing, since the endpoint that sends the TP intends to use the ACK_FREQUENCY frame, which it wouldn't then be able to do.\r\n\r\nThe most straightforward interpretation is the second one that @kazuho proposes.",
          "createdAt": "2020-11-06T03:44:11Z",
          "updatedAt": "2020-11-06T03:44:11Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "> That's a bit confusing, since the endpoint that sends the TP intends to use the ACK_FREQUENCY frame, which it wouldn't then be able to do.\r\n\r\nI think it can be quite natural depending on how you see it. We can define the TP as a proclamation by an endpoint to respect ACK_FREQUENCY frames. I would also point out that most (maybe all) transport parameters are unilateral declarations of endpoint properties, rather than a negotiation.\r\n\r\nThat said, with either of the approaches, it is impossible for an endpoint to declare support for multiple versions. I'm not sure if that's required, but it might be necessary. If we want to support multiple versions, then, we can either:\r\n* Say that each endpoint unilaterally declares it's capabilities (or supported versions); then the peer chooses what to use and sends the chosen capability (or the version) using a frame, much like how ALPN is being selected.\r\n* Say that the support for delayed-ack is negotiated by both endpoints. Each endpoints send a list of supported versions, and we define a logic for choosing one from the lists provided by both endpoints.\r\n\r\nPersonally, I think I prefer the former, especially if we are to negotiate use of multiple extensions at once. But the necessity is still unclear.",
          "createdAt": "2020-11-07T08:28:59Z",
          "updatedAt": "2020-11-07T08:29:11Z"
        },
        {
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "body": "> I think it can be quite natural depending on how you see it. We can define the TP as a proclamation by an endpoint to respect\r\n> ACK_FREQUENCY frames. I would also point out that most (maybe all) transport parameters are unilateral declarations of\r\n> endpoint properties, rather than a negotiation.\r\n\r\nAh. I clearly misread what @mjoras was saying.  Yeah, this does align with the rest of the TPs, and it also aligns well with the intent of this TP -- each endpoint has to declare that it will respect and act on an ACK_FREQUENCY frame when one is received.\r\n\r\nI like the unilateral declaration of capabilites. I don't think we will need to support multiple versions in the longer term, but it's worth supporting if it isn't difficult to do. And in this case, I think it naturally aligns well with the intent of the frame.\r\n",
          "createdAt": "2020-11-09T00:24:54Z",
          "updatedAt": "2020-11-09T00:24:54Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "There's been no change on this in a while, so I'm planning to merge @nibanks PR soon unless someone speaks up.",
          "createdAt": "2021-04-15T16:24:50Z",
          "updatedAt": "2021-04-15T16:24:50Z"
        }
      ]
    },
    {
      "number": 43,
      "id": "MDU6SXNzdWU3ODMwOTkyMjM=",
      "title": "Does the maximum max_ack_delay value apply to \"Update Max Ack Delay\"?",
      "url": "https://github.com/quicwg/ack-frequency/issues/43",
      "state": "CLOSED",
      "author": "marten-seemann",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "QUIC Transport specifies a maximum value of 2^14 ms (roughly 16s) for the `max_ack_delay` transport parameter. Does this limit apply to values sent in the `Update Max Ack Delay` field of the ACK_FREQUENCY frame, or is any value up to 2^62 microseconds allowed here?\r\nEither way, the draft might benefit from clarifying the rules here.",
      "createdAt": "2021-01-11T06:18:48Z",
      "updatedAt": "2021-07-31T01:15:51Z",
      "closedAt": "2021-07-31T01:15:51Z",
      "comments": [
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "The editors do not have a strong opinion, and we currently say nothing about the limit being changed by this extension, so we're inclined to keep the limit as is and add some text clarifying that the extension doesn't change the limit.\r\n\r\nWe're open to arguments otherwise if people have them.",
          "createdAt": "2021-07-22T20:08:16Z",
          "updatedAt": "2021-07-22T20:08:33Z"
        }
      ]
    },
    {
      "number": 44,
      "id": "MDU6SXNzdWU3ODMxNDQ2MDc=",
      "title": "min_ack_delay allows encoding of values larger than the maximum max_ack_delay",
      "url": "https://github.com/quicwg/ack-frequency/issues/44",
      "state": "CLOSED",
      "author": "marten-seemann",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "If I understand correctly, the maximum value of the `min_ack_delay` transport parameter is supposed to ensure that the value is smaller or equal than the `max_ack_delay` transport parameter.\r\n\r\nAccording to [QUIC-TRANSPORT Section 18.1](https://quicwg.org/base-drafts/draft-ietf-quic-transport.html#name-reserved-transport-paramete) the maximum value of `max_ack_delay` is `(2^14 - 1) ms = 16,383,000 \u03bcs`. However, the maximum value of `min_ack_delay` is `(2^24 - 1) \u03bcs = 16,777,215 \u03bcs`.",
      "createdAt": "2021-01-11T07:43:30Z",
      "updatedAt": "2021-07-31T01:15:51Z",
      "closedAt": "2021-07-31T01:15:51Z",
      "comments": [
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "We're going to remove the 2^24 - 1 limit and just rely on the MUST that min_ack_delay can't be greater than max_ack_delay, which implies the 2^14-1 limit.",
          "createdAt": "2021-07-22T20:13:03Z",
          "updatedAt": "2021-07-22T20:13:03Z"
        }
      ]
    },
    {
      "number": 45,
      "id": "MDU6SXNzdWU4MjAyNjgyMjU=",
      "title": "Maximum Values for Frame Fields",
      "url": "https://github.com/quicwg/ack-frequency/issues/45",
      "state": "CLOSED",
      "author": "nibanks",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "design"
      ],
      "body": "Does it make sense to specify any maximum values for any of the ACK frequency frame fields, such as for Packet Tolerance? Does a value of 4 billion make sense? Can I use a `uint8_t` in my implementation to store this locally? Is there any expectation around the sizes of these fields? If there is no explicit max, what if I implicitly apply one? I'm working on implementing this and I'm trying to figure out how small (byte size) I can make the variables I use to store the values on the connection.",
      "createdAt": "2021-03-02T18:19:48Z",
      "updatedAt": "2021-07-31T01:13:42Z",
      "closedAt": "2021-07-31T01:13:42Z",
      "comments": [
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "Update Max Ack Delay will be limited by the Max Ack Delay limit once #57 lands.\r\n\r\nThat leaves Packet Tolerance, which I agree is reasonable to limit to a value smaller than 2^62-1 locally.\r\n\r\nWe could add a comment like \"Implementations that have a lower limit than 2^62-1 on the Packet Tolerance MUST set treat it as though the maximum supported Packet Tolerance value has been received.\"",
          "createdAt": "2021-07-22T20:31:57Z",
          "updatedAt": "2021-07-22T20:31:57Z"
        },
        {
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "body": "Slight tweak: \"If an endpoint receives a Packet Tolerance value that is larger than the maximum value it can represent, the endpoint MUST use the largest representable maximum value instead.\"",
          "createdAt": "2021-07-22T20:35:51Z",
          "updatedAt": "2021-07-22T20:36:05Z"
        }
      ]
    },
    {
      "number": 46,
      "id": "MDU6SXNzdWU4MjE1MDU0Mjc=",
      "title": "Use Same Units for min_ack_delay and max_ack_delay",
      "url": "https://github.com/quicwg/ack-frequency/issues/46",
      "state": "CLOSED",
      "author": "nibanks",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Do we really need to allow for sub-millisecond min_ack_delays? IMO, it would simplify my code if both min and max had the same units of milliseconds. Just set the value to zero if you really want to allow that small of values and then cap it internally if you receive the frame.\r\n\r\nQuotes from the relevant texts:\r\n\r\n>    max_ack_delay (0x0b):  The maximum acknowledgment delay is an integer\r\n>       value indicating the maximum amount of time in milliseconds by\r\n>       which the endpoint will delay sending acknowledgments.\r\n\r\nand\r\n\r\n>    min_ack_delay (0xff02de1a):  A variable-length integer representing\r\n>       the minimum amount of time in microseconds by which the endpoint\r\n>       can delay an acknowledgement.",
      "createdAt": "2021-03-03T21:35:36Z",
      "updatedAt": "2021-03-08T19:06:18Z",
      "closedAt": "2021-03-08T19:06:18Z",
      "comments": [
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "I tend to think microseconds are better for this draft, since one potential application is within datacenters, where sub-ms timers are not uncommon.\r\n\r\nAt some point, we actually discussed changing the core draft to be microseconds, but concluded that changing the core draft wasn't worthwhile given we already knew we'd have this draft coming with microsecond granularity.",
          "createdAt": "2021-03-04T01:25:58Z",
          "updatedAt": "2021-03-04T01:25:58Z"
        },
        {
          "author": "nibanks",
          "authorAssociation": "MEMBER",
          "body": "@ianswett at least for Windows, we can't achieve a timer granularity of less than a millisecond with any accuracy, and that only at the cost of changing the default (which can have significant power impacts) from 15.6 milliseconds; so any value less than 1 millisecond is generally unusable for Windows based solutions. I'm not saying we should do something just because that's what Windows can do, but it should be taken into account. How accurately can Linux achieve timers in a data center? Especially if it's on a VM? I'm not going to die on this hill (I already wrote the code) but it's not great code because of these differences.",
          "createdAt": "2021-03-04T01:36:17Z",
          "updatedAt": "2021-03-04T01:36:17Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "In Linux, high resolution timers are quite common, though certainly not universal, and even VMs running linux guests commonly have hrtimers.\r\n\r\nSpecifically, in Linux TCP pacing and SACK compression(https://lwn.net/Articles/755078/) use hrtimers.",
          "createdAt": "2021-03-04T14:04:56Z",
          "updatedAt": "2021-03-04T15:07:12Z"
        },
        {
          "author": "nibanks",
          "authorAssociation": "MEMBER",
          "body": "Ok. It would have been nice to have max_ack_delay be the same units then. Any idea why milliseconds was decided on for that instead of microseconds? I don't remember any particular discussion around this in the past.",
          "createdAt": "2021-03-08T18:35:27Z",
          "updatedAt": "2021-03-08T18:35:27Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "https://github.com/quicwg/base-drafts/issues/3363",
          "createdAt": "2021-03-08T19:00:45Z",
          "updatedAt": "2021-03-08T19:00:45Z"
        },
        {
          "author": "nibanks",
          "authorAssociation": "MEMBER",
          "body": "Ok. Thanks @ianswett. I'll close this for now then.",
          "createdAt": "2021-03-08T19:06:18Z",
          "updatedAt": "2021-03-08T19:06:18Z"
        }
      ]
    },
    {
      "number": 48,
      "id": "MDU6SXNzdWU4NTI0NTAwMzU=",
      "title": "CE marking should not always cause an immediate ACK",
      "url": "https://github.com/quicwg/ack-frequency/issues/48",
      "state": "CLOSED",
      "author": "ianswett",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "design"
      ],
      "body": "From Mirja: \"For ECN, you don't need to send an immediate ACK for each CE. Immediate ACKs are most important when the codepoint switches to CE, but then, if multiple CEs in a row are received, you can bundle the ACK information. See also https://tools.ietf.org/html/draft-ietf-tcpm-accurate-ecn#section-3.2.2.5.1\r\n(Note that we are still working on that section for AccECN but I think any changes are only relevant for specifics of TCP)\"",
      "createdAt": "2021-04-07T14:09:29Z",
      "updatedAt": "2021-10-12T20:39:58Z",
      "closedAt": "2021-10-12T20:39:58Z",
      "comments": [
        {
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "body": "From editors' discussion: This text is the same as that in RFC9000 (https://quicwg.org/base-drafts/rfc9000.html#name-sending-ack-frames), and we don't believe we need to depart from existing text for CE-marked packets, since those are true congestion events, and we don't need to optimize for collapsing acks during congestion.",
          "createdAt": "2021-07-22T20:53:59Z",
          "updatedAt": "2021-07-22T20:53:59Z"
        },
        {
          "author": "bbriscoe",
          "authorAssociation": "NONE",
          "body": "Insisting on feeding back an ACK whenever there's a CE will come back to haunt you. \r\n1. After the hundredth CE in a row, you'll probably start to realize that each CE is not a 'congestion event'. \r\n2. You need to make sure that this doesn't force the receiver to ACK every CE-marked ACK, which could lead to interminable ACK ping-pong.\r\n\r\nAdmittedly, the sender should be slowing down, so perhaps it's not so bad to ram the reverse path full of ACKs under 100% congestion in the forward path. But it's not necessary - you could potentially squash other traffic sharing the reverse path. Particularly not nice in the first RTT before the sender starts responding. \r\n\r\nInstead, a requirement like under the [AccECN link](https://datatracker.ietf.org/doc/html/draft-ietf-tcpm-accurate-ecn#section-3.2.2.5.1) that Mirja pointed to, where you ACK every 'n' CE marks in a row will be sufficient. And if the peers support ACK frequency control, you might want to say 'n' is the greater of a) whatever 'standard' value is set by the IETF and b) the current ACK frequency requested by the sender.\r\n\r\nFinally, note that the AccECN section linked above was massively changed between -14 (when Mirja pointed to it) and -15 (now). Nearly all of the changes would be relevant to QUIC too (except the stuff about DupACKs, I think). So it's worth reading it all again carefully.",
          "createdAt": "2021-09-11T11:56:08Z",
          "updatedAt": "2021-09-11T11:56:08Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks for the specific suggestion Bob, that's extremely helpful.\r\n\r\nI think there are four ways forward:\r\n1) Stick with the current text and deal with the performance hit when using non-classic ECN.\r\n2) Always do something along the lines AccECN is suggesting when ACK_FREQUENCY is negotiated, ie: Ack immediately when max(2, Ack-Eliciting Threshold) packets with CE marks are received.\r\n3) Change the ignore_order 'bool' to be an enum with 4 values that are a mix of Classic(RFC9000) and accurate ECN response to CE marks.\r\n4) Do something completely from RFC9000 or AccECN.  I'm not sure what would inform this, but maybe there are aspects of QUIC which means the ACK response should be different from TCP Accurate ECN.\r\n\r\nI favor 2 and wrote #68 to document that.  My personal opinion is that classic ECN is not able to perform as well as newer marking schemes and should be deprecated, so perpetuating it is actively harmful.",
          "createdAt": "2021-09-11T20:17:19Z",
          "updatedAt": "2021-09-12T13:17:32Z"
        },
        {
          "author": "bbriscoe",
          "authorAssociation": "NONE",
          "body": "The design is not (only) for 'non-classic ECN', it's for handling any severe reverse channel congestion.\r\n\r\nFor the avoidance of doubt, if @ianswett's #2 alternative is meant to be \"as Bob (AccECN) suggested\", a number of possibly important details are missing:\r\n\r\n- a) Immediately ACK the first transition from a non-CE packet to a CE data packet; and b) ACK every max(2, Ack-Eliciting Threshold) contiguous CE marked packets after that.\r\n- The choice of 'packet' (twice) or 'data packet' (once) in the above is deliberate\r\n\r\nI agree that ECN feedback in RFC3168 should be deprecated (which is why I didn't object when it was proposed that AccECN should move from experimental to stds track update to 3168).\r\n\r\n\r\n",
          "createdAt": "2021-09-12T15:46:24Z",
          "updatedAt": "2021-09-12T15:46:24Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "The PR includes the 'Immediately ACK the first transition from non-CE to CE.  PTAL and see if the text looks correct.",
          "createdAt": "2021-09-12T20:55:48Z",
          "updatedAt": "2021-09-12T20:55:48Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "After further thinking, I'm wondering if we should have multiple modes that are indicated by bits in the 'Ignore Order' bytes.\r\n\r\nSpecifically:\r\n- 0 is rfc9000 behavior.\r\n   -  Conveniently, this means clients sending Ignore Order values of 0 or 1 will see no change in behavior.\r\n- 1 is Ignore CE when choosing how frequently to acknowledge packets.\r\n  - This would likely be the best option for ECN algorithms where close to 50% of packets are marked.\r\n- 2 is accurate ECN, which is the current PR.",
          "createdAt": "2021-09-14T00:29:33Z",
          "updatedAt": "2021-09-14T00:29:33Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "Following up on my last comment, I created a separate issue (#87) and PR (#88) for the question about whether we want an Ignore ECN bool.",
          "createdAt": "2021-10-10T15:03:33Z",
          "updatedAt": "2021-10-10T15:03:33Z"
        }
      ]
    },
    {
      "number": 49,
      "id": "MDU6SXNzdWU4NTI4ODI3OTU=",
      "title": "Off-by-one in packet tolerance",
      "url": "https://github.com/quicwg/ack-frequency/issues/49",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "design"
      ],
      "body": "The definition that I use internally is \"the number of packets you can receive without sending an immediate acknowledgment\".  This is different than saying \"please acknowledge every N packets\".\r\n\r\nThe main benefit of this definition is that there are no invalid values for the number.  I recommend making this adjustment in the frame definition: it will be more efficient (by a tiny amount), but it also removes the need to validate the value.",
      "createdAt": "2021-04-07T22:39:24Z",
      "updatedAt": "2021-09-10T00:24:46Z",
      "closedAt": "2021-09-10T00:24:46Z",
      "comments": [
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "This seems like a good change, it's just a matter of writing the text.",
          "createdAt": "2021-07-22T20:35:53Z",
          "updatedAt": "2021-07-22T20:35:53Z"
        }
      ]
    },
    {
      "number": 51,
      "id": "MDU6SXNzdWU5MjM5Nzg5NDQ=",
      "title": "Asymmetric paths are also impacted by packet rate",
      "url": "https://github.com/quicwg/ack-frequency/issues/51",
      "state": "CLOSED",
      "author": "gorryfair",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "ianswett"
      ],
      "labels": [
        "editorial"
      ],
      "body": "It's also true that for many RF media, the performance of the forward path can be impacted by the **rate** of acknowledgment packets when the link bandwidth is shared.\r\n\r\n",
      "createdAt": "2021-06-17T14:16:06Z",
      "updatedAt": "2022-07-27T20:33:06Z",
      "closedAt": "2022-07-27T20:33:06Z",
      "comments": [
        {
          "author": "gorryfair",
          "authorAssociation": "CONTRIBUTOR",
          "body": " \u201cSeverely asymmetric link technologies, such as DOCSIS, LTE, and satellite links, connection throughput in the data direction becomes constrained when the reverse bandwidth is filled by acknowledgment packets. When traversing such links, reducing the number of acknowledgments allows connection throughput to scale much further.\u201d\r\n\r\n- I\u2019m going to push back again on this as largely wrong. Links such as DOCSIS, LTE,  satellite and WiFi are asymmetric. But it\u2019s not just that the design decisions made for these types of link resulted in asymmetric capacity (throughput limit), the designs also share the capacity, and it is important to mitigate the impact on that sharing of capacity, than purely thinking of it items of bytes/sec of capacity used.  A lower feedback rate can help avoid inducing flow starvation to other flows that share resources along the path they use.\r\n\r\n- On mobile devices sending data consumes RF and battery power and is more costly for a host of reasons  not just asymmetry when present.\r\n",
          "createdAt": "2021-09-17T11:22:00Z",
          "updatedAt": "2021-09-17T11:22:00Z"
        },
        {
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "body": "@gorryfair -- I don't follow why you say that the statement is wrong. It seems to me that you think that the statement is inadequate. Would you mind responding here with some text you would prefer instead, and I'm happy to wordsmith and turn it into a PR?",
          "createdAt": "2021-10-24T17:03:26Z",
          "updatedAt": "2021-10-24T17:03:26Z"
        },
        {
          "author": "gorryfair",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I suggest some text something like:\r\n\r\nFor some link technologies (e.g., DOCSIS, LTE, WiFi, and satellite links) transmission of acknowledgment packets contribute to link utilization and can incur  significant forwarding costs. In some cases, the connection throughput in the data direction can become constrained when the reverse bandwidth is filled by acknowledgment packets. In other cases, the rate of acknowledgment packets can impact link efficiency (e.g. transmission opportunities or battery life). A lower ACK frequency can be beneficial when using paths that include such links.\r\n",
          "createdAt": "2021-11-04T15:01:08Z",
          "updatedAt": "2021-11-04T15:01:08Z"
        },
        {
          "author": "gorryfair",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@janaiyengar -- Is the text proposal in the issue enough for you to make a PR?",
          "createdAt": "2021-11-10T12:47:37Z",
          "updatedAt": "2021-11-10T12:47:37Z"
        }
      ]
    },
    {
      "number": 53,
      "id": "MDU6SXNzdWU5Mzg3OTE1MTk=",
      "title": "Could we construct an example of use?",
      "url": "https://github.com/quicwg/ack-frequency/issues/53",
      "state": "CLOSED",
      "author": "gorryfair",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial",
        "has-pr"
      ],
      "body": "There's a concrete example of one way you can arrange ACKs that has benefit in:\r\nhttps://datatracker.ietf.org/doc/draft-fairhurst-quic-ack-scaling/\r\nThis likely helps in many common scenarios.\r\nWe could make a pull-request based on summarising some of this into an annexe?\r\n",
      "createdAt": "2021-07-07T11:29:09Z",
      "updatedAt": "2023-02-20T17:01:14Z",
      "closedAt": "2023-02-20T17:01:14Z",
      "comments": [
        {
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "body": "Gorry -- can you point to the concrete example in the draft? I couldn't find it.\r\n\r\nGenerally, I'd prefer not to spend a lot more text in the draft motivating its value; I think we've got enough in Section 2 already. ",
          "createdAt": "2021-07-22T21:01:04Z",
          "updatedAt": "2021-07-22T21:01:04Z"
        },
        {
          "author": "gorryfair",
          "authorAssociation": "CONTRIBUTOR",
          "body": "What I was hoping for was something that unpicks a little how an ACK Ratio of (say) 10 (8 if we prefer, ?) impacts the traffic. I don't see the draft body needing to specify numbers, but I know there is experience by some implementations with this approach, so a short (<1 page) explanation might be good guidance for anyone who has not worked out something better ... but I'd prefer it to be in an annexe, because such things can, and will, change as well as new CCs emerging that can have new requirements, etc.",
          "createdAt": "2021-07-27T15:53:47Z",
          "updatedAt": "2021-07-27T15:53:47Z"
        },
        {
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "body": "Discussion at IETF 114: Don't need to fix. (Do we need to write some better guard rails?)",
          "createdAt": "2022-07-28T15:13:41Z",
          "updatedAt": "2022-07-28T15:13:41Z"
        },
        {
          "author": "gorryfair",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I motivated at IETF-114 that we should be able to construct an example based on this.... and that a least that would give use some guard rails to guide use.",
          "createdAt": "2022-07-28T15:29:02Z",
          "updatedAt": "2022-07-28T15:29:02Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "We now merged PR #150 which adds the references as proposed in PR #128. We will close this issue for now. Please open a new issue if there is something left that needs to be further addressed!",
          "createdAt": "2023-02-20T17:01:14Z",
          "updatedAt": "2023-02-20T17:01:14Z"
        }
      ]
    },
    {
      "number": 62,
      "id": "MDU6SXNzdWU5NTM4MzEyNjg=",
      "title": "Response to reordering, what is reordering?",
      "url": "https://github.com/quicwg/ack-frequency/issues/62",
      "state": "CLOSED",
      "author": "gloinul",
      "authorAssociation": "NONE",
      "assignees": [
        "ianswett"
      ],
      "labels": [
        "editorial"
      ],
      "body": "When reviewing the draft I got caught on this part:\r\n\r\nAs specified in Section 13.2.1 of [QUIC-TRANSPORT], endpoints are expected to send an acknowledgement immediately on receiving a reordered ack-eliciting packet. This extension modifies this behavior.\r\n\r\nThere is an issue here in how this draft uses \"reordering\". Section 13.2.1 of RFC 9000 does say that ACKs should be sent immediately if:\r\n\r\n\"In order to assist loss detection at the sender, an endpoint SHOULD generate and send an ACK frame without delay when it receives an ack-eliciting packet either:\r\n\r\n- when the received packet has a packet number less than another ack-eliciting packet that has been received, or\r\n\r\n- when the packet has a packet number larger than the highest-numbered ack-eliciting packet that has been received and there are missing packets between that packet and this packet.\"\r\n\r\nAlthough the first bullet clearly is reordering, the second could be caused by three different mechanisms: Reordering of packets, loss of packets, or sender intentional gap (as discussed in #34)\r\nThus, I think this section needs to be clear if actually means both of the above bullets for when to send ACK or only one of them? \r\n",
      "createdAt": "2021-07-27T12:28:01Z",
      "updatedAt": "2021-10-24T09:17:33Z",
      "closedAt": "2021-10-24T09:17:33Z",
      "comments": [
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks Magnus, the intent was to follow the RFC9000 definition, so I'll write a PR to clarify that was the intent.",
          "createdAt": "2021-07-27T20:49:50Z",
          "updatedAt": "2021-07-27T20:49:50Z"
        }
      ]
    },
    {
      "number": 65,
      "id": "MDU6SXNzdWU5OTEwODc4NTc=",
      "title": "Should we add a DELAY_ACK frame?",
      "url": "https://github.com/quicwg/ack-frequency/issues/65",
      "state": "CLOSED",
      "author": "ianswett",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "design"
      ],
      "body": "As a natural opposite to #34 adding an IMMEDIATE_ACK frame, I want to know if the WG thinks there's sufficient interest in this.  I know there are use cases like WebRTC where fine control over the ACKs is desirable.\r\n\r\n@nibanks may be interested in this, since a similar topic came up on https://github.com/quicwg/datagram/issues/42",
      "createdAt": "2021-09-08T12:32:51Z",
      "updatedAt": "2021-09-16T00:18:54Z",
      "closedAt": "2021-09-16T00:18:54Z",
      "comments": [
        {
          "author": "nibanks",
          "authorAssociation": "MEMBER",
          "body": "I would be fine with using this mechanism to solve the issues described in quicwg/datagram#42.",
          "createdAt": "2021-09-10T12:01:55Z",
          "updatedAt": "2021-09-10T12:01:55Z"
        },
        {
          "author": "mjoras",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think this would be very useful to have. Specifically we have seen interest similar to what @nibanks has mentioned -- existing applications that have their own \"application layer\" (partial) reliability and congestion control but want to leverage QUIC as a connection-oriented way to send encrypted datagrams. Having more explicit control over not-ACKing would certainly help some of these usecases.\r\n\r\nWhile I would rather people design protocols around QUIC application data semantics in full (streams and DATAGRAMs and some as-yet-undesigned partial reliability feature) rather than just plumbing an existing protocol over QUIC DATAGRAMs, I think that having a facility to get more applications running over QUIC is very useful.",
          "createdAt": "2021-09-10T17:13:13Z",
          "updatedAt": "2021-09-10T17:13:13Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "NONE",
          "body": "Just say NO! Really, this kind of experiment goes in the way of progressing the delayed ACK proper. We have tons of experience with delayed acks, and we understand exactly what it does. Why would we create this additional mechanism, with unproven effects?",
          "createdAt": "2021-09-13T00:20:40Z",
          "updatedAt": "2021-09-13T00:20:40Z"
        },
        {
          "author": "gorryfair",
          "authorAssociation": "CONTRIBUTOR",
          "body": "So, I think this naturally leads to the question of how long an ACK delay is actually acceptable for coexistence with other Internet use. Delayed ACKs our tens of packets are likely OK.  I'll argue that \"infinite\" delay (No ACK) it is not a great place to dig into. I suggest we should instead be restricting this to a few RTTs... (10's? 100s of packets).   I'd argue that for some form of reactive congestion control, feedback at least every few RTTs is necessary - this could even be a form of slower-reacting circuit-breaker, with the upper layers formally providing the responsive control to incipient ingestion.\r\n",
          "createdAt": "2021-09-13T11:22:55Z",
          "updatedAt": "2021-09-13T11:22:55Z"
        },
        {
          "author": "nibanks",
          "authorAssociation": "MEMBER",
          "body": "I'm in agreement with @mjoras that a change like this would better be aligned with the application data semantics, unreliable datagrams in this case. As I indicated in https://github.com/quicwg/datagram/issues/42#issuecomment-912513452, there are several reasons an application protocol would want a reduction in (not complete elimination of) generated ACKs when using unreliable datagrams. There might be additional uses, generally, for delaying ACKs, but the reasoning around it is more complicated for reliable data. For the unreliable support, I can write that up in a new extension draft (if that is the general WG consensus).",
          "createdAt": "2021-09-13T12:16:00Z",
          "updatedAt": "2021-09-13T12:16:00Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "The idea of this extending the ACK timeout, but not removing it completely is interesting.\r\n\r\nAn alternative design would be a DELAY_ACK frame which ensured a packet doesn't elicit an immediate ACK, but would still arm the timer for the delayed ACK alarm.",
          "createdAt": "2021-09-13T13:31:24Z",
          "updatedAt": "2021-09-13T13:31:24Z"
        },
        {
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "body": "Given the swathe of needs and possible options, I currently think there's going to need to be some more exploration of this space with some more substantial write ups.",
          "createdAt": "2021-09-13T13:47:17Z",
          "updatedAt": "2021-09-13T13:47:17Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "> Just say NO! Really, this kind of experiment goes in the way of progressing the delayed ACK proper. We have tons of experience with delayed acks, and we understand exactly what it does. Why would we create this additional mechanism, with unproven effects?\r\n\r\nWe already have this ACK issue with PADDING only packets, which count towards bytes in flight, but are not ack-eliciting.  That design choice always terrified me.  I would have been much more comfortable with something like the DELAY_ACK design I proposed just above, which would ensure you eventually get an ACK for in-flight packets.",
          "createdAt": "2021-09-13T13:52:40Z",
          "updatedAt": "2021-09-13T13:52:58Z"
        },
        {
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "body": "As a mechanism, we should not use a frame to signal how a different frame should be interpreted. QUIC's design generally assumes that a sender does not control how frames are packetized, and this runs afoul of that unstated assumption.\r\n\r\nSpecifying the mechanism is easy, but I don't think this is quite as straightforward to reason about, at least in the context of the ack frequency draft. Broadly, this is not about controlling ack frequency, it's about disabling acks, or partially disabling acks, which makes it harder to reason about.\r\n\r\nLet's not do this here; as @LPardue notes, this has to become a larger conversation.",
          "createdAt": "2021-09-13T18:55:55Z",
          "updatedAt": "2021-09-13T18:55:55Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "Given the pushback against my initial attempt, I'm pivoting to the DELAY_ACK frame.\r\n\r\nI'd actually like the negotiation of this extension to indicate the delayed ack behavior applies to PADDING only and PADDING+ACK packets as well, since I think those can be a bit of a footgun, but I'd like to see what people think of the DELAY_ACK frame before writing that text.",
          "createdAt": "2021-09-14T00:39:06Z",
          "updatedAt": "2021-09-14T00:39:06Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "@janaiyengar \r\n> As a mechanism, we should not use a frame to signal how a different frame should be interpreted. QUIC's design generally assumes that a sender does not control how frames are packetized, and this runs afoul of that unstated assumption.\r\n\r\nI'm not sure if I agree. Yes, I agree with the statement that a frame should not affect how other frames are interpreted.\r\n\r\nBut we can think of DELAY_ACK frame as a frame that affects how a *packet* is processed. Assuming that we adopt IMMEDIATE_ACK, we'd have a precedent for having such a thing. Essentially, IMMEDIATE_ACK is a flag of a packet that happens to be sent as a frame. If we think that way, defining a DELAY_ACK frame (or a THIS_PACKET_IS_NOT_ACK_ELICITING frame) as makes perfect sense IMO.",
          "createdAt": "2021-09-14T02:51:16Z",
          "updatedAt": "2021-09-14T02:51:16Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "NONE",
          "body": "@ianswett I really think this belongs in a separate draft, and mostly a separate negotiation. It should be possible to negotiate delayed acks without also negotiating ack suppression.",
          "createdAt": "2021-09-14T02:59:22Z",
          "updatedAt": "2021-09-14T02:59:22Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks, I've been convinced this belongs in a separate draft, and that there may be more that goes into that draft to enable the various related use cases.\r\n\r\nI'll leave this open for now, but likely close it and the PR in the not so distant future.",
          "createdAt": "2021-09-14T17:32:48Z",
          "updatedAt": "2021-09-14T17:32:48Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "Closing with no action, I think this is the wrong draft.",
          "createdAt": "2021-09-16T00:18:54Z",
          "updatedAt": "2021-09-16T00:18:54Z"
        }
      ]
    },
    {
      "number": 66,
      "id": "MDU6SXNzdWU5OTEyODc3NDY=",
      "title": "Change diagrams to use the notation in QUIC transport",
      "url": "https://github.com/quicwg/ack-frequency/issues/66",
      "state": "CLOSED",
      "author": "ianswett",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "ianswett"
      ],
      "labels": [
        "editorial"
      ],
      "body": "They currently use ascii art.\r\n\r\nWill write this up once #64 is merged.",
      "createdAt": "2021-09-08T15:50:00Z",
      "updatedAt": "2021-09-17T21:08:54Z",
      "closedAt": "2021-09-17T21:08:54Z",
      "comments": [
        {
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "body": "sgtm, thanks!",
          "createdAt": "2021-09-08T16:10:33Z",
          "updatedAt": "2021-09-08T16:10:33Z"
        }
      ]
    },
    {
      "number": 70,
      "id": "I_kwDODddxTs47juPn",
      "title": "Can we explain the motivation for Immediate ACK?",
      "url": "https://github.com/quicwg/ack-frequency/issues/70",
      "state": "CLOSED",
      "author": "gorryfair",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "There's nothing odd about an immediate ACK! Perhaps the text should start by saying that the spec allows a receiver to do this anyway?\r\n\r\nHowever, the current text doesn't explain why the Immediate ACK might be useful.\r\n\r\nI could see three places that might benefit from an IMMEDIATE_ACK:\r\n\r\nTwo cases relevant to SCTP [RFC7053] are: When the rate of transmission was very low and packets might be lost and not detected (something not uncommon in some SCTP uses); as an alternative to detect connectivity failure and trigger path failover. I'm not sure how important these specific cases are for QUIC, because the discussion at the time in TSVWG appeared to centre around use for signalling traffic?\r\n\r\nThere could also be real opportunity to use this to get more precise timing/congestion information. A set of per-packet ACKs might be useful while a CC is probing to confirm available capacity, etc.\r\n\r\nHave I missed a killer application for the method - it would be helpful to me to understand /some example for how the WG think this could be used. \r\n\r\n(aside: I am actually uncertain whether this would really be a good change to TCP, especially with the heterogeniety of TCP middleboxes and senders,... that's another story, but I'd think it might be nice to not rely on draft-gomez-tcpm-ack-pull as a reference. I could suggest RFC7053, where people might recall there was quite some discussion in TSVWG about whether SCTP would benefit from being able to trigger an immediate response.)\r\n\r\n",
      "createdAt": "2021-09-17T10:55:09Z",
      "updatedAt": "2021-10-25T17:37:45Z",
      "closedAt": "2021-10-25T17:37:45Z",
      "comments": [
        {
          "author": "evolodina",
          "authorAssociation": "NONE",
          "body": "We use an immediate ACK to support CC by delayed ACKs. ",
          "createdAt": "2021-09-17T11:44:30Z",
          "updatedAt": "2021-09-17T11:44:30Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "https://github.com/quicwg/ack-frequency/pull/95 adds two use cases that uses IMMEDIATE_ACK.",
          "createdAt": "2021-10-21T13:10:15Z",
          "updatedAt": "2021-10-21T13:10:15Z"
        }
      ]
    },
    {
      "number": 71,
      "id": "I_kwDODddxTs47j0nV",
      "title": "Undesirable consequences seems over stated for small changes",
      "url": "https://github.com/quicwg/ack-frequency/issues/71",
      "state": "CLOSED",
      "author": "gorryfair",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "\u201cAs discussed in Section 9 however, there are undesirable consequences to congestion control and loss recovery if a receiver uniltaerally reduces the acknowledgment frequency.\u201c\r\n\r\n- This is a harsh statement. I don\u2019t think it is true for smaller changes. There is much experience of using TCP where stretch ACKs cover more than two packets. This is a matter of scale. For instance: I\u2019m confident that stretched TCP ACKs covering 4 segments (maybe more ... I\u2019d love to say up to IW) would not break TCP CC, so I don\u2019t see why the editors want to suggest it could break QUIC CC! This really does need a less obfuscated explanation. \r\n",
      "createdAt": "2021-09-17T11:25:38Z",
      "updatedAt": "2021-10-12T18:59:04Z",
      "closedAt": "2021-10-12T18:59:04Z",
      "comments": [
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "I'd be happy to reword this to \"there can be undesirable consequences ...\", but were you looking for a larger change?",
          "createdAt": "2021-09-18T08:23:23Z",
          "updatedAt": "2021-09-18T08:23:23Z"
        },
        {
          "author": "gorryfair",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thanks - yes, /can be/ would seem fair, since they are enumerated later.",
          "createdAt": "2021-09-20T08:15:04Z",
          "updatedAt": "2021-09-20T08:15:16Z"
        }
      ]
    },
    {
      "number": 72,
      "id": "I_kwDODddxTs47j0t4",
      "title": "Delaying detection of loss is a serious CC problem",
      "url": "https://github.com/quicwg/ack-frequency/issues/72",
      "state": "CLOSED",
      "author": "gorryfair",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "janaiyengar"
      ],
      "labels": [
        "design",
        "needs-pr"
      ],
      "body": "Section 9.1 - There are CC considerations with respect to how long it is reasonable for a flow to hold-off detecting congestion and responding. This needs to be discussed.\r\n\r\nWhen an endpoint detects persistent congestion, it MUST promptly reduce the rate of transmission when it receive or detects an indication of congestion (e.g., loss or ECN marking) [RFC2914], the Ignore Order value of true (0x01) in this ID allows a sender to extend that period, postponing detection of loss. That might be reasonable, but excessive delay can be dangerous - and therefore the impact really needs to be discussed: delaying a fraction of a RTT is in my mind safe, intentionally delaying by an RTT is arguable. A delay of many RTTs is endangers other flows, and we need to at least say that in some way ([RFC8084] took an alternate view of how long might be safe).\r\n",
      "createdAt": "2021-09-17T11:26:11Z",
      "updatedAt": "2021-10-25T17:40:55Z",
      "closedAt": "2021-10-25T17:40:55Z",
      "comments": [
        {
          "author": "gorryfair",
          "authorAssociation": "CONTRIBUTOR",
          "body": "See PR #75 ",
          "createdAt": "2021-09-20T15:00:23Z",
          "updatedAt": "2021-09-20T15:00:23Z"
        },
        {
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "body": "I think this warrants a note about how a sender SHOULD NOT use a delay that is larger than an RTT unless the sender has other information about either the network or current network conditions. Otherwise, the receiver does not need to enforce anything here.",
          "createdAt": "2021-10-12T21:09:21Z",
          "updatedAt": "2021-10-12T21:10:01Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "@janaiyengar \r\n> I think this warrants a note about how a sender SHOULD NOT use a delay that is larger than an RTT unless the sender has other information about either the network or current network conditions.\r\n\r\nDelay of loss detection has negative impact on loss recovery as well. Considering that the time threshold defined in RFC 9002 is 9/8 RTT, I might ague that, when Ignore Order is set to true, then the maximum delay being advertised SHOULD be no greater than 9/8 RTT.\r\n\r\nThese values provide responsiveness comparable to Rack when a packet is lost - the loss would be detected within 5/4 RTT.\r\n\r\n~~Separately, it might be worth pointing out that the time threshold has to be tuned when the sender sets Ignore Order bit~~ (stuck out, as this point is already covered by Section 8).",
          "createdAt": "2021-10-15T00:31:04Z",
          "updatedAt": "2021-10-15T00:35:01Z"
        }
      ]
    },
    {
      "number": 73,
      "id": "I_kwDODddxTs47j0z6",
      "title": "Section 9.3 - Isn\u2019t ACK Clocking different to the CC?",
      "url": "https://github.com/quicwg/ack-frequency/issues/73",
      "state": "CLOSED",
      "author": "gorryfair",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "To me, ACK Clocking is a separate point that applies to any type of CC when the cwnd limits the sender.\r\n\r\nI agree there could be a concern is around whether a less frequent ACK policy can induce a cwnd-limited sender to send bursts of packets that could induce loss or disrupt sharing of the path with other flows. The QUIC specification already permits an initial window of 10 packets, and motivates the need for pacing. I think it is important this text refers to the QUIC transport section on pacing to mitigate bursts.\r\n",
      "createdAt": "2021-09-17T11:26:43Z",
      "updatedAt": "2021-10-25T17:40:56Z",
      "closedAt": "2021-10-25T17:40:55Z",
      "comments": [
        {
          "author": "gorryfair",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Better worded perhaps in PR #75.\r\n",
          "createdAt": "2021-09-20T15:00:03Z",
          "updatedAt": "2021-10-12T21:19:47Z"
        }
      ]
    },
    {
      "number": 74,
      "id": "I_kwDODddxTs47j1eB",
      "title": "Impact of Delayed ACKs on CC growth",
      "url": "https://github.com/quicwg/ack-frequency/issues/74",
      "state": "CLOSED",
      "author": "gorryfair",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "In 9.3. Window-based Congestion Controllers\r\n\r\nI thought that unless there is loss reported, a QUIC ACK Frame releases sending window. In a similar manner as the accurate byte counting style in TCP, a QUIC sender solely operates on the basis of bytes acked, not the number of ACK frames received. \r\n\r\nSo while a delayed ACK could delay a round of growth when the ACK Ratio is larger, it is only delayed by the time to ACK the set of received packets. In looking at various QUIC CC over medium and longer path RTTs this effect was quite small, and the default ACK delay was not unreasonable; for shorter path RTTs this might be different\r\n",
      "createdAt": "2021-09-17T11:30:01Z",
      "updatedAt": "2021-10-25T17:40:56Z",
      "closedAt": "2021-10-25T17:40:56Z",
      "comments": [
        {
          "author": "gorryfair",
          "authorAssociation": "CONTRIBUTOR",
          "body": "See PR #75 ",
          "createdAt": "2021-09-20T14:59:32Z",
          "updatedAt": "2021-09-20T14:59:32Z"
        }
      ]
    },
    {
      "number": 76,
      "id": "I_kwDODddxTs48a2d7",
      "title": "Editorial: Ignore Order explanation",
      "url": "https://github.com/quicwg/ack-frequency/issues/76",
      "state": "CLOSED",
      "author": "rpaulo",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "Section 4 explains what all the fields are mean first and then explains the exception cases.  It seems like this was done the opposite way for Ignore order.\r\n\r\nI propose we change the current text:\r\n> An 8-bit field representing a boolean truth value. This field MUST have the value 0x00 (representing false) or 0x01 (representing true). This field can be set to true by an endpoint that does not wish to receive an immediate acknowledgement when the peer observes reordering (Section 7.1). Receipt of any other value MUST be treated as a connection error of type FRAME_ENCODING_ERROR.\r\n\r\nTo:\r\n> An 8-bit field representing a boolean truth value. This field can be set to true by an endpoint that does not wish to receive an immediate acknowledgement when the peer observes reordering (Section 7.1).  The value of this field MUST be 0x00 (representing false) or 0x01 (representing true). Receipt of any other value MUST be treated as a connection error of type FRAME_ENCODING_ERROR.\r\n",
      "createdAt": "2021-10-01T19:02:05Z",
      "updatedAt": "2021-10-09T22:53:25Z",
      "closedAt": "2021-10-09T22:53:25Z",
      "comments": [
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "SGTM, want to send me a PR or should I?",
          "createdAt": "2021-10-01T20:08:01Z",
          "updatedAt": "2021-10-01T20:08:01Z"
        }
      ]
    },
    {
      "number": 79,
      "id": "I_kwDODddxTs48bfGz",
      "title": "Migration and ACK frequency",
      "url": "https://github.com/quicwg/ack-frequency/issues/79",
      "state": "CLOSED",
      "author": "rpaulo",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "design"
      ],
      "body": "The draft doesn't mention anything about ACK frequency and connection migration.  What should we do, for example, when a client has migrated and now sends a PING to force the server to use a new path?  Should it send PING+IMMEDIATE_ACK?",
      "createdAt": "2021-10-01T23:30:22Z",
      "updatedAt": "2021-10-21T13:11:05Z",
      "closedAt": "2021-10-21T13:11:05Z",
      "comments": [
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "That seems sensible.  Mind writing a PR?",
          "createdAt": "2021-10-06T19:28:16Z",
          "updatedAt": "2021-10-06T19:28:16Z"
        }
      ]
    },
    {
      "number": 80,
      "id": "I_kwDODddxTs48iPnz",
      "title": "Guidance on min_ack_delay",
      "url": "https://github.com/quicwg/ack-frequency/issues/80",
      "state": "CLOSED",
      "author": "rpaulo",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "ianswett"
      ],
      "labels": [
        "editorial"
      ],
      "body": "Although I understand what min_ack_delay represents it's not clear to me what an implementation should do with that value. Is the purpose to make sure that stacks sufficiently wait enough time before triggering PTO?  There's no guidance on this in the draft.  Perhaps there should be.",
      "createdAt": "2021-10-04T20:36:15Z",
      "updatedAt": "2021-10-21T14:01:23Z",
      "closedAt": "2021-10-21T14:01:23Z",
      "comments": [
        {
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "body": "`min_ack_delay` represents the minimum time that the receiver can delay for. In the common case, this would be the receiver's clock or timer granularity. This is for the receiver to indicate that the sender cannot reduce `max_ack_delay` below this value. So a receiver implementation can simply use its granularity for this value, and a sender must ensure that its `max_ack_delay` is not below the received `min_ack_delay`.\r\n\r\nDoes this help, @rpaulo? We can add some text to clarify this.",
          "createdAt": "2021-10-12T22:49:48Z",
          "updatedAt": "2021-10-12T22:49:48Z"
        },
        {
          "author": "rpaulo",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thanks. Yes, I think this should be explained in the draft like you said. ",
          "createdAt": "2021-10-12T23:01:55Z",
          "updatedAt": "2021-10-12T23:01:55Z"
        }
      ]
    },
    {
      "number": 84,
      "id": "I_kwDODddxTs48mMN4",
      "title": "Requested Max Ack Delay in microseconds",
      "url": "https://github.com/quicwg/ack-frequency/issues/84",
      "state": "CLOSED",
      "author": "rpaulo",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I'm surprised that Requested Max Ack Delay is in microseconds.  I was really expecting it to the be same unit as what's in the Transport Parameter. Of course, this allows max_ack_delay to be really short (< 1ms).  Since we now have IMMEDIATE_ACK, is this really necessary?  It would simplify the specification (and perhaps it would prevent certain bugs) if the unit of requested max ack delay was the same as max ack delay.",
      "createdAt": "2021-10-05T18:20:59Z",
      "updatedAt": "2021-10-05T19:18:23Z",
      "closedAt": "2021-10-05T19:18:23Z",
      "comments": [
        {
          "author": "nibanks",
          "authorAssociation": "MEMBER",
          "body": "See https://github.com/quicwg/ack-frequency/issues/46?",
          "createdAt": "2021-10-05T18:23:29Z",
          "updatedAt": "2021-10-05T18:23:29Z"
        },
        {
          "author": "rpaulo",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I understand the reasoning and I was okay doing it for min_ack_delay, but is that necessary for max_ack_delay as well?",
          "createdAt": "2021-10-05T18:36:54Z",
          "updatedAt": "2021-10-05T18:36:54Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "I think it's preferable to keep both in us.  Datacenters have extremely low latency that are typically sub-us, so there's no reason to limit ourselves here.  Is there a problem this is causing for you?",
          "createdAt": "2021-10-05T18:48:45Z",
          "updatedAt": "2021-10-05T18:48:45Z"
        },
        {
          "author": "rpaulo",
          "authorAssociation": "CONTRIBUTOR",
          "body": "No problems, just POLA.",
          "createdAt": "2021-10-05T19:14:40Z",
          "updatedAt": "2021-10-05T19:14:40Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "Given I think this has already been discussed, I'm going to close this.",
          "createdAt": "2021-10-05T19:18:23Z",
          "updatedAt": "2021-10-05T19:18:23Z"
        }
      ]
    },
    {
      "number": 85,
      "id": "I_kwDODddxTs48w-dl",
      "title": "Ack-eliciting threshold needs more clarity",
      "url": "https://github.com/quicwg/ack-frequency/issues/85",
      "state": "CLOSED",
      "author": "goelvidhi",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "While reading the latest ack-frequency draft, I am confused with the wording that was added in https://github.com/quicwg/ack-frequency/pull/58\r\n`Ack-Eliciting Threshold: A variable-length integer representing the maximum number of ack-eliciting packets the recipient of this frame can receive before sending an immediate acknowledgment. A value of 0 will result in an immediate acknowledgement whenever an ack-eliciting packet received.`\r\n\r\nIf I have ack-eliciting threshold = 1, to me it means that I can receive 1 ack-eliciting packet before sending an ACK, i.e. I have to send ACK after receiving 1 packet. But looking at the example of 0, this interpretation looks wrong.\r\n\r\n@martinthomson suggested, maybe the \"before\" needs to be \"without\" and an additional sentence added: \"An immediate acknowledgement is sent when more than this number of packets have been received.\"\r\n\r\nI agree with his suggestion.",
      "createdAt": "2021-10-06T23:57:41Z",
      "updatedAt": "2021-10-12T10:57:34Z",
      "closedAt": "2021-10-12T10:57:34Z",
      "comments": [
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks for the issues, this is a bit unclear.  PTAL at #86 ",
          "createdAt": "2021-10-10T14:06:12Z",
          "updatedAt": "2021-10-10T14:06:12Z"
        }
      ]
    },
    {
      "number": 87,
      "id": "I_kwDODddxTs486oPg",
      "title": "Add an 'Ignore CE' bit in addition to Ignore Order",
      "url": "https://github.com/quicwg/ack-frequency/issues/87",
      "state": "CLOSED",
      "author": "ianswett",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "design"
      ],
      "body": "When thinking about #48, it occurred to me that there may be use cases for not changing the acknowledgement behavior in the face of ECN.\r\n\r\nThe most obvious example is an ECN scheme where the bit means faster/slower, and so at equilibrium, every other packet should be marked.  This type of marking would trigger the most pathological ACK behavior of either the current draft(ie: RFC9000) or #68.",
      "createdAt": "2021-10-10T14:39:49Z",
      "updatedAt": "2021-10-21T13:20:55Z",
      "closedAt": "2021-10-21T13:20:55Z",
      "comments": [
        {
          "author": "martinthomson",
          "authorAssociation": "MEMBER",
          "body": "This seems like a good way to manage acknowledgment behaviour when different ECN schemes are in use.  It's not necessarily a complete solution, but it should help avoid the worst sorts of reactions.",
          "createdAt": "2021-10-12T22:27:49Z",
          "updatedAt": "2021-10-12T22:27:49Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "NONE",
          "body": "How to send an ACK on CE marking can be a receiver side logic, one ACK when CE marking changes. I agree if every other packet is marked, then that triggers every other ACK, but I don't understand why this would happen in steady state.\r\n\r\nWould be good to know a use-case for this. Are there networks that are marking CE incorrectly - for that we should disable ECN as described in RFC 9000.\r\n\r\nThis has similar implications as `Ignore-order` where the delayed CE marks will result in delayed response to congestion at the sender and hence the network queuing will continue to increase possibly causing more CE marks on other responsive flows (that don't have ignore-ecn set to true) and will cause unfairness.",
          "createdAt": "2021-10-13T05:31:04Z",
          "updatedAt": "2021-10-13T05:31:04Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "I had this Netdev conference presentation and paper in mind by Hari Balakrishnan of MIT:\r\nhttps://legacy.netdevconf.info/0x12/session.html?congestion-control-for-cellular-wireless-networks\r\n\r\nIt's research, but it's a sensible algorithm in certain environments like cell networks.",
          "createdAt": "2021-10-13T09:56:32Z",
          "updatedAt": "2021-10-13T09:56:32Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "NONE",
          "body": "Thank you @ianswett for providing the link. I watched the video of the talk and it doesn't seem like he is using ECN along with Accelerate and Brake. One can simply disable ECN if they don't wish to use that method in the data packets.\r\n\r\nDisabling of ECN can also happen in the middle of the connection. I don't think we need to say, Sender wants to use ECN but he doesn't want to get immediate ACKs when CE marks are received at the receiver - that sounds contradictory to me.",
          "createdAt": "2021-10-15T04:56:49Z",
          "updatedAt": "2021-10-15T04:57:14Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "NONE",
          "body": "@ianswett your comment https://github.com/quicwg/ack-frequency/issues/48#issuecomment-917708790 seems like a good choice to me. ACK immediately whenever there is transition.",
          "createdAt": "2021-10-15T04:58:40Z",
          "updatedAt": "2021-10-15T04:58:50Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "Most endpoints ignore ECN today, so I don't see how this is more harmful than the status quo?\r\n\r\nSome endpoints negotiate ECN and then ignore it as well.\r\n\r\nWith Hari's scheme, the Ignore CE option is exactly what you'd want, because a transition from non-CE to CE happens so frequently.",
          "createdAt": "2021-10-15T09:51:17Z",
          "updatedAt": "2021-10-15T09:51:17Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "NONE",
          "body": "How the stacks ignore today would make the other side disable ECN even if it was negotiated successfully. Meaning, the sender will start sending Non-ECT in its packets and the routers will drop instead of marking CE.\r\n\r\nBut if the sender continues to send packets with ECT(0) or ECT(1) after sending ignore-ECN = true, that means this sender is greedy as it doesn't want its packets to be dropped at the bottleneck and also, it doesn't want to respond the congestion marks right away.\r\n\r\nFor senders using classic ECN, this is OK only when the ACKs eventually come within 1RTT ballpark as classic congestion controllers reduce cwnd once per RTT. But, for L4S scalable congestion control, this isn't good enough as the ACK with CE feedback should come immediately (with respect to time). Multiple packets with CE marks can be bundled into one ACK - which is the ACK on transition from CE to non-CE method.",
          "createdAt": "2021-10-19T00:40:32Z",
          "updatedAt": "2021-10-19T06:29:08Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "There are many scenarios to use ECN, and today the most valuable one is the datacenter, not the public internet.  In a datacenter, this may be an optimal ACK-ing scheme.\r\n\r\nIn terms of classic vs L4S, it seems like both have delays which would be fairly tolerable (ie: 1 RTT and 1/8 or 1/4 RTT depending upon one's loss threshold), but larger delays could reduce their responsiveness to congestion.\r\n\r\nThis is similar to Ignore Order, since both are signals which may indicate congestion, so the same guidance could apply to both to ensure sufficiently fast feedback in the case of possible loss or ECN marking.",
          "createdAt": "2021-10-19T19:11:52Z",
          "updatedAt": "2021-10-19T19:11:52Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "NONE",
          "body": "> This is similar to Ignore Order, since both are signals which may indicate congestion, so the same guidance could apply to both to ensure sufficiently fast feedback in the case of possible loss or ECN marking.\r\n\r\nYes, they are the same with regards to delayed response to congestion and we are discussing that at https://github.com/quicwg/ack-frequency/issues/93. One subtle difference between the two is that in case of ECN, the packets are never dropped which could cause slightly more unfairness to other flows. \r\n\r\nSimilar to #93, we can add a limit to Max Ack Delay when ignore-ecn is used.",
          "createdAt": "2021-10-20T05:06:02Z",
          "updatedAt": "2021-10-20T05:06:02Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "Even middleboxes which mark ECN also drop packets, they just mark earlier than they drop.  I'm not aware of devices which when ECN is negotiated, actually don't drop packets and instead rely entirely on ECN.  This seems like a recipe for unfairness, so I can't imagine someone doing this\r\n\r\nIf you have evidence this really exists in the wild, that'd be interesting, but I think it's a fundamentally unfair design choice.",
          "createdAt": "2021-10-20T12:53:53Z",
          "updatedAt": "2021-10-20T12:53:53Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "NONE",
          "body": "Classic ECN RFC 3168 says,\r\n`First, ECN-Capable routers will only mark packets (as opposed to\r\n   dropping them) when the packet marking rate is reasonably low. During\r\n   periods where the average queue size exceeds an upper threshold, and\r\n   therefore the potential packet marking rate would be high, our\r\n   recommendation is that routers drop packets rather then set the CE\r\n   codepoint in packet headers.`\r\n\r\nFor low to medium congestion, the middle box will mark CE without dropping and only after high congestion which could imply non-compliance from sender, it will revert to dropping packets. So, there is some degree of unfairness when congestion starts to build up. \r\n\r\nThe use of ECN in public Internet is to avoid queue buildup and we would be going against that if we use ECN (to avoid packet drops) but don't respond in timely manner. If the only use case of this is data centers (of which I have very limited knowledge), then should we mention that in the draft? Something like, `this option SHOULD NOT be used on public Internet.`?",
          "createdAt": "2021-10-21T07:59:08Z",
          "updatedAt": "2021-10-21T07:59:08Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "My view is that implementations largely do not conform to 3168, so even though the text says that, I'd only believe it if someone could show me evidence that is what happens in the wild.\r\n\r\nAlso, I think we should permanently deprecate 3168 and take back the bit, but that's a different conversation.",
          "createdAt": "2021-10-21T12:38:53Z",
          "updatedAt": "2021-10-21T12:38:53Z"
        }
      ]
    },
    {
      "number": 89,
      "id": "I_kwDODddxTs487JxU",
      "title": "Maximum value for ack-eliciting threshold",
      "url": "https://github.com/quicwg/ack-frequency/issues/89",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "MEMBER",
      "assignees": [
        "janaiyengar"
      ],
      "labels": [
        "design"
      ],
      "body": "In #86, I noted that the text around a maximum value is a little squishy.  It says: \r\n\r\n> If an endpoint receives an ACK-Eliciting Threshold value that is larger than the maximum value it can represent, the endpoint MUST use the largest representable value instead.\r\n\r\nThe problem here is not about representing values.  We have to assume that 62-bit values can be represented easily by anything that can do QUIC.  The real problem is that there is a value beyond which performance tanks badly.  Endpoints might want to set a limit for this to prevent that from happening.  Why not instead just say that endpoints can set a limit for this threshold?\r\n\r\nThat means that we might need to provide some advice around setting the limit.  For instance, maybe we might suggest that a value that exceeds the current congestion window (measured in MTUs) might be too high.\r\n\r\n",
      "createdAt": "2021-10-11T00:36:15Z",
      "updatedAt": "2021-10-25T11:12:49Z",
      "closedAt": "2021-10-25T11:12:49Z",
      "comments": [
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "The receiver doesn't know the peer's congestion window, so that might be tricky.\r\n\r\nIf there's a value beyond which performance tanks, isn't that an error on the part of the sender of the ACK_FREQUENCY frame?  I agree one could use this frame to degrade performance, but the sender could also just set a max CWND of 1 to degrade performance, which would be a lit simpler.",
          "createdAt": "2021-10-11T11:50:23Z",
          "updatedAt": "2021-10-11T11:50:23Z"
        },
        {
          "author": "rpaulo",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I agree that providing advice on setting a limit is tricky and there are other ways to destroy performance.  The worst case is actually when both the threshold and the max ack delay are unreasonably large.",
          "createdAt": "2021-10-11T18:24:31Z",
          "updatedAt": "2021-10-11T18:24:31Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "We could bound the delay to the SRTT as measured locally.  It's not guaranteed to be the same value the sender measures, but it could be close enough to mitigate large issues.  That being said, I am still unsure if this is a problem worth solving, given the sender should have a strong incentive to specify good values.",
          "createdAt": "2021-10-11T20:19:16Z",
          "updatedAt": "2021-10-11T20:19:16Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "MEMBER",
          "body": "I'm ambivalent regarding whether we provide advice on limits.  We might try to capture some of this general advice.  Or not.\r\n\r\nI'm mostly concerned that we remove this pointless clause.",
          "createdAt": "2021-10-12T00:15:57Z",
          "updatedAt": "2021-10-12T00:15:57Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "That's there for a specific reason.  If you store the threshold as a uint_8, and the peer sends you something larger we want clear and consistent guidance on what to do with it(ie: set the value to 255).\r\n\r\nIf that's unclear, editorial suggestions are welcome.",
          "createdAt": "2021-10-12T10:48:21Z",
          "updatedAt": "2021-10-12T10:48:21Z"
        },
        {
          "author": "rpaulo",
          "authorAssociation": "CONTRIBUTOR",
          "body": "FWIW, when I read this the first time, the thought that an implementation would limit the value to 8 or 16 bit came immediately to mind, like @ianswett describes.",
          "createdAt": "2021-10-12T18:38:12Z",
          "updatedAt": "2021-10-12T18:38:12Z"
        },
        {
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "body": "This text **is** about choice of internal representation at the receiver. I do not recall what caused this to get added, but as I think about this more now, I am sympathetic to a part of @martinthomson's point of view. However, this isn't about performance (as @ianswett notes) -- we don't want the receiver second guessing the sender's intent.\r\n\r\nSo the text currently says that a receiver can choose to limit the size of this threshold. However, we provide no guidance as to why a receiver might choose a lower value, leaving this question open to implementations. I think we have two choices:\r\n1. the text should be clear about the tradeoffs and how a receiver might make this choice, or\r\n2. simply not say anything here, with the expectation that receivers ought to respect the sender's request (use uint64).\r\n\r\nIn the spirit of the rest of this draft, I propose that:\r\n- we follow (2), and\r\n- if there is a compelling reason to allow a receiver to use something smaller, introduce text to say that the receiver \"SHOULD respect sender's request\" and explain the compelling exceptional case.\r\n\r\nDo we have a compelling exception?",
          "createdAt": "2021-10-12T23:02:38Z",
          "updatedAt": "2021-10-12T23:02:38Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "MEMBER",
          "body": "I think that (2) alone is fine.\r\n\r\nI don't have a compelling exception.  Note that we also have a time limit.  This value might be deliberately set high in order to engage the timer rather than the counter.  BOTH might be set ridiculously high, in which case the connection might then faceplant spectacularly, but we don't have to make the protocol completely foolproof.",
          "createdAt": "2021-10-13T00:44:25Z",
          "updatedAt": "2021-10-13T00:44:25Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "The original issue was #45.  Microsoft is using a uint8_t for this field, not a uint64, so they can't represent the full value.\r\n\r\nWe can remove the sentence and assume implementations will do the right thing, but we can't assume everyone will use a uint64.",
          "createdAt": "2021-10-21T13:39:00Z",
          "updatedAt": "2021-10-21T13:39:00Z"
        },
        {
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "body": "I think the main trouble here is with the normative MUST when an endpoint chooses to go off-spec. As @ianswett noted, we folks do want to use a < 64-bit value, so it might still be useful to note something here. So here's what I propose:\r\n\r\n\"An endpoint might use a local representation for this value that is smaller than 64 bits for optimization purposes. If it does so, and if it receives an ACK-Eliciting Threshold value that is larger than the maximum value it can represent locally, the endpoint can use the largest representable value instead.\"",
          "createdAt": "2021-10-21T13:52:36Z",
          "updatedAt": "2021-10-21T13:52:51Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "MEMBER",
          "body": "I would prefer that people go off-spec rather than make allowances like this in the spec.  Honestly though, msquic is probably safe with clamping to 255 maximum.  No one can say they aren't compliant if they acknowledge earlier.",
          "createdAt": "2021-10-21T15:36:29Z",
          "updatedAt": "2021-10-21T15:36:29Z"
        },
        {
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm fine with leaving the text out. I am sympathetic to @martinthomson's view, despite the fact that we've had this text in the spec. I'm ok with removing it.\r\n\r\n@ianswett @nibanks -- thoughts?",
          "createdAt": "2021-10-24T09:19:16Z",
          "updatedAt": "2021-10-24T09:19:16Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "I added this text to address @nibanks issue, so I'll let him decide.",
          "createdAt": "2021-10-24T11:30:35Z",
          "updatedAt": "2021-10-24T11:30:35Z"
        },
        {
          "author": "nibanks",
          "authorAssociation": "MEMBER",
          "body": "I don't care enough to die on this hill, but I do think it's better to have text indicating the peer might have limits and acknowledge earlier as a result, than to have to text at all. ",
          "createdAt": "2021-10-24T12:19:21Z",
          "updatedAt": "2021-10-24T12:19:21Z"
        },
        {
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "body": "Ok, I've reworded to simply say that a receiver can ack earlier. PTAL @martinthomson @nibanks @kazuho @ianswett",
          "createdAt": "2021-10-24T16:34:23Z",
          "updatedAt": "2021-10-24T16:34:23Z"
        }
      ]
    },
    {
      "number": 90,
      "id": "I_kwDODddxTs48-Zcz",
      "title": "Commit 8a87dbd3d38c40507a2ca346f242fbdee3866ec3 was lost in the merge",
      "url": "https://github.com/quicwg/ack-frequency/issues/90",
      "state": "CLOSED",
      "author": "rpaulo",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Commit 8a87dbd3d38c40507a2ca346f242fbdee3866ec3 seem to have been lost with the rename.",
      "createdAt": "2021-10-11T18:15:58Z",
      "updatedAt": "2021-10-25T16:49:41Z",
      "closedAt": "2021-10-25T16:49:40Z",
      "comments": [
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "https://github.com/quicwg/ack-frequency/pull/91",
          "createdAt": "2021-10-12T03:19:19Z",
          "updatedAt": "2021-10-12T03:19:19Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "It was intentionally removed, see https://github.com/quicwg/ack-frequency/pull/57/files",
          "createdAt": "2021-10-12T09:56:56Z",
          "updatedAt": "2021-10-12T09:56:56Z"
        },
        {
          "author": "rpaulo",
          "authorAssociation": "CONTRIBUTOR",
          "body": "What happened to this sentence?\r\n> Any value larger than 16,383,000 microseconds is\r\n>   invalid, as specified for the `max_ack_delay` transport parameter. ",
          "createdAt": "2021-10-12T18:35:22Z",
          "updatedAt": "2021-10-12T18:35:40Z"
        },
        {
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "body": "@rpaulo -- that number is unnecessary, since the real cap is the advertised `max_ack_delay`, which has its limit specified. As to why the endpoint is required to have `min_ack_delay <= max_ack_delay`, an endpoint cannot advertise a min that is larger than its max.",
          "createdAt": "2021-10-12T23:30:00Z",
          "updatedAt": "2021-10-12T23:30:00Z"
        },
        {
          "author": "rpaulo",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I must be missing something then. I\u2019m not debating min_ack_delay at all. The paragraph I quoted is discussing max_ack_delay. ",
          "createdAt": "2021-10-12T23:51:45Z",
          "updatedAt": "2021-10-12T23:51:45Z"
        },
        {
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "body": "The point I was making is that the real cap is the advertised `max_ack_delay`. Instead of having the cap of `max_ack_delay` in two different places (here and in RFC 9000), it's better to have it in one place.",
          "createdAt": "2021-10-21T13:19:57Z",
          "updatedAt": "2021-10-21T13:19:57Z"
        },
        {
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "body": "@rpaulo -- are you ok with closing this issue, or would you like some change?",
          "createdAt": "2021-10-24T16:25:54Z",
          "updatedAt": "2021-10-24T16:25:54Z"
        },
        {
          "author": "rpaulo",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@janaiyengar I still would like a change to be made.  Let's discuss on Slack since we're out of sync here.",
          "createdAt": "2021-10-24T16:29:22Z",
          "updatedAt": "2021-10-24T16:29:22Z"
        },
        {
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "body": "Sharing what @rpaulo and I agreed on: The text currently calls out the units difference and I don\u2019t think we need to restate the number here just because the units are different. Repeating the number in different places can lead to confusion later if the number changes in RFC 9000.\r\n\r\nClosing this issue.",
          "createdAt": "2021-10-25T16:49:40Z",
          "updatedAt": "2021-10-25T16:49:40Z"
        }
      ]
    },
    {
      "number": 93,
      "id": "I_kwDODddxTs49DkXP",
      "title": "Ignore-order can cause high queuing and even packet loss",
      "url": "https://github.com/quicwg/ack-frequency/issues/93",
      "state": "CLOSED",
      "author": "goelvidhi",
      "authorAssociation": "NONE",
      "assignees": [
        "janaiyengar"
      ],
      "labels": [
        "design",
        "needs-pr"
      ],
      "body": "I don't fully understand when would someone want to set ignore-order = true, i.e., what is a valid use case for this?\r\n\r\nLets say for whatever reason the sender sets this to True, this would if there is actual packet loss and receiver receives OOO packets, it won't send an immediate ACK. Meaning the sender won't enter loss recovery immediately and will continue sending packets at the same rate. This is not good, as it directly increases queuing on the network node and for a tail drop queue (most widespread deployment), it will also affect other flows. Meaning, other flows will experience packet loss due to non-responsiveness of this flow for certain period of time.\r\n\r\nI probably missed past conversations about ignore-order field, so my apologies if this has already been discussed. I read the draft and didn't see any explanation about where would this be useful and what are the fallbacks of setting this to true.",
      "createdAt": "2021-10-12T20:37:41Z",
      "updatedAt": "2021-10-25T17:40:56Z",
      "closedAt": "2021-10-25T17:40:56Z",
      "comments": [
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "One use case that I know and care is for sending QUIC traffic from a server cluster.\r\n\r\nSome packets would be sent directly from a server node that governs the connections, but others would be sent via different nodes within the same cluster. Once we deploy a sender like this, the receiver would observe what looks like reordering (because most packets will be essentially delivered through an additional hop, and that would cause delays). But we do not want the receiver to send ACK for each packet being received.\r\n\r\nRegarding the problem, I'm not sure I agree with the impact. Typically, congestion controllers react to congestion after 1 RTT. When packet-number-based detection is turned off, that changes to 9/8 RTT.\r\n\r\nThat does cause more pressure on the bottleneck queue, but it is no worse than that caused by a path with an 9/8 greater RTT.\r\n\r\nAssuming that congestion controllers are designed to be fair against flows having different RTTs, I tend to believe that this is a non-issue.",
          "createdAt": "2021-10-12T21:28:38Z",
          "updatedAt": "2021-10-12T21:28:38Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "I agree with @kazuho  though I think adding a SHOULD NOT use a delay longer than an RTT(https://github.com/quicwg/ack-frequency/issues/72#issuecomment-941561257) would be a good addition, since if the delay is extremely large(ie multiple RTTs), that could be bad.",
          "createdAt": "2021-10-12T21:31:33Z",
          "updatedAt": "2021-10-12T21:31:33Z"
        },
        {
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "body": "In general, the spirit of this draft is to provide control over acking behavior to the sender, since it is the consumer of this information and ought to be able to control how frequently it needs to see this information. If there are subtle consequences to these decisions, it is worth noting them in the draft.\r\n\r\nIt seems useful to add some text on the consequences of using Ignore Order, so that senders can make informed decisions. We can do that.",
          "createdAt": "2021-10-12T23:35:08Z",
          "updatedAt": "2021-10-12T23:35:08Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "NONE",
          "body": "> One use case that I know and care is for sending QUIC traffic from a server cluster.\r\n> \r\n> Some packets would be sent directly from a server node that governs the connections, but others would be sent via different nodes within the same cluster. Once we deploy a sender like this, the receiver would observe what looks like reordering (because most packets will be essentially delivered through an additional hop, and that would cause delays). But we do not want the receiver to send ACK for each packet being received.\r\n\r\n@kazuho is this something that Fastly does or is planning to do? How would you share the connection secrets between different server nodes?\r\n\r\n> Regarding the problem, I'm not sure I agree with the impact. Typically, congestion controllers react to congestion after 1 RTT. When packet-number-based detection is turned off, that changes to 9/8 RTT.\r\n> That does cause more pressure on the bottleneck queue, but it is no worse than that caused by a path with an 9/8 greater RTT.\r\n\r\nWhen we set ignore-reorder = true, and lets assume that max ACK delay > 1RTT, it can be 1RTT or 2 or 10RTT. this would result in loss recovery to be delayed by at least an additional RTT, i.e. it will take >16/8RTT (>2RTT) instead of 9/8RTT to declare packets lost. That is significant IMO.\r\n\r\n>Assuming that congestion controllers are designed to be fair against flows having different RTTs, I tend to believe that this is a non-issue.\r\n\r\nCUBIC throughput is inversely proportional to RTT in New Reno mode. Nonetheless, I am more concerned about high queuing in bottleneck due to late loss recovery.\r\n\r\nSpecifying the use-cases where ignore-order = true SHOULD be used will prevent new implementors from using it randomly. And as Jana said, some text around the consequences when it is used would allow informed decision making.\r\n\r\n\r\n\r\n\r\n",
          "createdAt": "2021-10-14T01:08:14Z",
          "updatedAt": "2021-10-14T01:09:13Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "@goelvidhi I do not speak for Fastly's plan, but the OSS branch of H2O has a working prototype that does this: https://github.com/h2o/h2o/pull/2415.\r\n\r\n> When we set ignore-reorder = true, and lets assume that max ACK delay > 1RTT, it can be 1RTT or 2 or 10RTT. this would result in loss recovery to be delayed by at least an additional RTT, i.e. it will take >16/8RTT (>2RTT) instead of 9/8RTT to declare packets lost. That is significant IMO.\r\n\r\nThe calculation is correct. At the same time, I do not think that senders will be willing to use Max Ack Delay as large as that, when setting the Ignore Order bit.\r\n\r\nThe problem here is the impact on loss recovery. If Max Ack Delay is set to a value as large as 1 RTT, then the sender needs to spend more than 2 RTTs for detecting a loss. That means that the size of the send and receive buffers have to be twice as large, and that it would take as twice as long to recover from a loss.\r\n\r\nBased on existing advice that we have in other RFCs, I think we should discourage Max Ack Delay that is greater than 9/8 RTT when Ignore Order bit is used (please see my comment on #72).",
          "createdAt": "2021-10-15T00:42:58Z",
          "updatedAt": "2021-10-15T00:42:58Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "I'd suggest 5/4, but otherwise agree with you @kazuho ",
          "createdAt": "2021-10-15T16:28:21Z",
          "updatedAt": "2021-10-15T16:28:21Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "NONE",
          "body": "Should the Max ACK Delay be restricted to 1/8 or 1/4 RTT as there is inherent 1RTT time spent while sending data and receiving ACKs? That would make a total of 1 + 1/8 or 1 +1/4 RTT total/",
          "createdAt": "2021-10-20T05:03:37Z",
          "updatedAt": "2021-10-20T05:03:37Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "I think this is best as a sender-side SHOULD, since it knows what time threshold it's using.  For example, we use 1/4 RTT, but have considered making it adaptive(ie: 1/16 RTT to 1 RTT) based on observed reordering.  Also, if your RTT is 100us, and your timers have coarser granularity, 1/8 RTT or 1/4 RTT just doesn't make sense.  I'm not sure what does, because I'm not an expert in datacenter networking, but that's why I think this is a SHOULD, not a MUST.\r\n\r\nOf course, it's also unenforceable, which is a good reason for a SHOULD.",
          "createdAt": "2021-10-20T12:57:40Z",
          "updatedAt": "2021-10-20T12:57:40Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "+1 to SHOULD.\r\n\r\nThe only argument I might disagree with @ianswett is that it is unenforceable (IMO a receiver can enforce by capping Ack Delay to a fraction of the RTT that the receiver has observed).\r\n\r\nBut I do not think there's any reason to require the receiver to enforce, considering the fact that a sender can send as many packets as it likes, regardless of ACKs the receiver sends (or lack of).",
          "createdAt": "2021-10-20T13:12:33Z",
          "updatedAt": "2021-10-20T13:12:33Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "NONE",
          "body": "I am fine with SHOULD and with a mention of how a sender would compute Max ACK Delay when he sets ignore-order = true.\r\nAn example is fine too.",
          "createdAt": "2021-10-21T07:46:08Z",
          "updatedAt": "2021-10-21T07:46:08Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "I believe this is the same issue as #72 ",
          "createdAt": "2021-10-21T13:22:07Z",
          "updatedAt": "2021-10-21T13:22:07Z"
        },
        {
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "body": "There are two things that are impacted by setting a high value for ack delay: congestion control and time-threshold loss detection. On congestion control, we need some protection for the network, so we should recommend something. On loss detection, a sender that chooses `Ignore Order` and sets an ack delay higher than the time-threshold loss detection time period risks triggering unnecessary retransmissions. So, I propose adding the following for a sender:\r\n- SHOULD set the ack frequency to be at least one ack per RTT (so that congestion control responses are reasonably quick)\r\n- a word of caution that setting the ack delay to be longer than time threshold can cause the sender to unnecessary retransmit",
          "createdAt": "2021-10-21T13:39:59Z",
          "updatedAt": "2021-10-21T13:39:59Z"
        }
      ]
    },
    {
      "number": 96,
      "id": "I_kwDODddxTs49dQcN",
      "title": "latency required to detect packet reordering threshold",
      "url": "https://github.com/quicwg/ack-frequency/issues/96",
      "state": "CLOSED",
      "author": "kazuho",
      "authorAssociation": "MEMBER",
      "assignees": [
        "ianswett"
      ],
      "labels": [
        "design",
        "has-pr"
      ],
      "body": "Per [Section 6.1.1 of RFC 9002](https://www.rfc-editor.org/rfc/rfc9002.html#section-6.1.1-1), the recommended value of packet reordering threshold is 3. That means that with vanilla QUIC v1, the sender would notice a single packet loss without any ack delay being introduced by the receiver. That's because when the receiver notices a gap, it sends an ACK immediately, then after receiving two more packets, it sends another ACK immediately.\r\n\r\nWith the ack-frequency extension, this behavior changes.\r\n\r\nWhen the receiver notices a gap, one ACK is sent immediately. But after that, the next ACK will not be sent until the expiry of one of the thresholds being declared by the ACK_FREQUENCY frame.\r\n\r\nTo give an example, let's say that Ack-Eliciting Threshold is set to 1/8 of CWND, and Request Max Ack Delay is set to 1/8 of RTT.\r\n\r\nThen, when there is one packet loss (or one range of packets being lost), the sender cannot notice that packet loss based on the packet reordering threshold until 9/8 RTT after the packet(s) was being sent.\r\n\r\nIs this going to be an issue for QUIC performance? I ask this because, compared to TCP, many have highlighted the improved efficiency of recovery in QUIC as one of the benefits.",
      "createdAt": "2021-10-20T07:37:32Z",
      "updatedAt": "2023-01-24T17:29:01Z",
      "closedAt": "2023-01-24T17:29:01Z",
      "comments": [
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "I recall discussing something of sort in #34 and #35, but I'm not sure if we considered these side effects enough. IIRC, we abandoned the discussion to replace Ignore Order bit with Reordering Threshold, partly because we could not find a design that is easy to implement.\r\n\r\nBut now, I think I might have a solution.\r\n\r\nWe could:\r\n* Replace the Ignore Order field with a Reordering Threshold field.\r\n* State that receiver SHOULD ack every 2 packets that it receives, whenever the number of packets contained in the highest ACK range is no greater than that threshold.\r\n\r\nA sender that uses a threshold of 3 can advertise Reordering Threshold of 3 for example, to expect an immediate ACK to be sent when the receiver receives 3 packets after a gap. Or, a sender can advertise 5 instead, so that the loss would be noticed at an early moment even when there is an ACK loss.\r\n\r\nWDYT?",
          "createdAt": "2021-10-20T08:00:41Z",
          "updatedAt": "2021-10-20T08:03:51Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "This is exactly what I was trying to mitigate with #35, but I think you explained the issue better than I did.\r\n\r\nWith the current algorithm, QUIC would end up falling back to the time threshold loss detection, opposed to packet threshold, so it wouldn't be that bad, but there could be a delay.\r\n\r\nI'd like to agree on the properties we want.  I think we want to ensure either time threshold or packet threshold are able to be triggered as quickly as possible.  Given that, I think we need to send one (at least relatively, see last paragraph) immediate ACK upon observing out of order packets.  That ensures that if only one packet arrives after the missing packet, it is detected in a timely manner by time threshold.  Second, I think we want to avoid sending any other ACKs except the one which will trigger packet threshold.  So the slightly complex bit is getting the algorithm for the second part correct.\r\n\r\nIf you agree with the above goals, I think we need something a bit more complex than what you proposed.  ie: What if the reordering threshold is 5 and you receive LostPN + 1, then LostPN+3, so there are already multiple ranges between the packet that could be declared lost and the reordering threshold.\r\n\r\nI'll try to describe and algorithm for that second ACK:\r\n- Track the largest_acknowledged_sent in an ACK\r\n- When there are missing packets in the range `[largest_acknowledged_sent - Reordering Threshold, largest_acknowledged - Reordering Threshold]`, send an immediate ACK.\r\n\r\nAdditionally, I think we should point out that small scale reordering(ie: 1 packet or twiddles) are the most common, so it makes sense to process an entire batch of available packets before determining whether to send an immediate acknowledgement.  \r\n",
          "createdAt": "2021-10-20T13:39:53Z",
          "updatedAt": "2021-11-10T13:46:26Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "> This is exactly what I was trying to mitigate with #35, but I think you explained the issue better than I did.\r\n\r\nI see, sorry for revisiting the issue. I hope we'd resolve the issue correctly this time.\r\n\r\n> I'd like to agree on the properties we want. \r\n\r\nMakes sense. The properties that I had in my mind were slightly different from what you have:\r\n* send ACKs no more than vanilla QUIC v1\r\n* send ACKs to make sure that losses are detected as early as vanilla QUIC v1\r\n* provide opportunity to deal with ACK-losses, so that even when there are ACK losses, losses can be detected as early as vanilla QUIC v1\r\n\r\nThe reason I would not mind sending two or three ACKs to indicate one gap is because packet losses are rare. Let\u2019s say that average packet loss ratio is 1%. Then, assuming Reordering Threshold of 3, the debate is between if the number of ACKs being sent in response to gaps would be ~1% of the packets that the sender sends, or ~2% of the packets that the sender sends (in case of the algorithm described in https://github.com/quicwg/ack-frequency/issues/96#issuecomment-947423006).\r\n\r\nI must admit that the number of ACKs used for indicating one gap increases relative to the Reordering Threshold, but I\u2019m not sure if we want to use values above 3.\r\n\r\nAll that said, I would be fine with the properties you describe, as I think the required algorithm is going to be simple enough, and because ACK loss is not a big problem assuming that packet losses are rare in general.\r\n\r\n**Please Ignore my comments below this line, I see the algorithm being corrected in the comment above :+1:**\r\n\r\nThough I think there's a tiny bug in the algorithm being proposed:\r\n\r\n> * When the new largest acknowledged is: `>= (smallest missing PN greater than largest_acknowledged_sent) - Reordering Threshold`, send an immediate ACK.\r\n\r\nI think this should be something like:\r\n* When the new largest acknowledged is : `>= (smallest missing PN greater than (largest_acknowledged_sent - Reordering Threshold)) - Reordering Threshold`, send an immediate ACK.\r\n\r\nOtherwise, if an ACK is sent due to other reasons immediately after a gap, then that gap would not be notified at the earliest moment. One example is PN=255 being lost, then PN=256 received and ACK being sent due to Ack-Eliciting Threshold. When the receiver receives PN=257 and PN=258, then it should send an immediate ACK, assuming Reordering Threshold of 3.",
          "createdAt": "2021-10-20T14:25:29Z",
          "updatedAt": "2021-10-20T22:02:29Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks, I just updated my suggested algorithm, and I think it now matches yours, but is stated differently?\r\n\r\nWe use adaptive reordering, so it's not uncommon for our threshold to be 10+, which is 5 extra ACKs.  Also, the every 2 option still requires the time threshold detection if you get one too few packet, whereas you could send an ACK at exactly the right threshold and the peer would immediately declare a loss.  Not a big deal, but it's slightly suboptimal.",
          "createdAt": "2021-10-20T14:32:03Z",
          "updatedAt": "2021-10-20T14:32:03Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "+1 to everything @ianswett says right above.",
          "createdAt": "2021-10-20T22:03:34Z",
          "updatedAt": "2021-10-20T22:03:34Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "NONE",
          "body": "As I said on the mike during the WG meeting, there are two ways of distinguishing expected renumbering from packet losses. One is to check sequence numbers, and assume packet loss if >N packets received after hole. Another is a to check a reordering delay, if >T passes and the hole is still there. What I found in practice is that reordering delay thresholds work better than reordering number thresholds. Would be nice if the PR allowed for specifying a reordering delay, independent of the already specified ACK delay.",
          "createdAt": "2021-11-10T12:35:14Z",
          "updatedAt": "2021-11-10T12:35:14Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "MEMBER",
          "body": "So let me understand the goal: you want to force an acknowledgment if a gap persists.\r\n\r\nA gap appears because a packet with a larger packet number is received.  Then:\r\n\r\nTime:\r\nAt that time, start a timer for some time less than the maximum acknowledgment delay and send an acknowledgment if the packet is still missing when the timer pops.  (I'm not sure how to do this without having a timer running for every missing packet.)\r\n\r\nNumber:\r\nThis only requires that N packets after the gap arrive.  I think that I understand Ian's algorithm for this.",
          "createdAt": "2021-11-10T12:51:49Z",
          "updatedAt": "2021-11-10T12:51:49Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "NONE",
          "body": "In practice, you check the time of arrival of the following packets, and if the gap-delay is exceeded you fire the ACK.",
          "createdAt": "2021-11-10T14:07:24Z",
          "updatedAt": "2021-11-10T14:07:24Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "@huitema I think the point here is that the receiver has to remember _when_ each packet was received, in addition to the packet numbers. That means that QUIC stacks have to change to the design of their ack queue, which makes this extension something much harder to implement than what it is now. At the moment, this extennion does not require changes to existing data structure.\r\n\r\nSeparately, I am not sure how valuable it is to specify a signalling mechanism for time-based gap detection.\r\n\r\nACK_FREQUENCY frame already has Request Max Ack Delay field for time-based signalling. Senders can set this value to a fraction of RTT (e.g., 9/8 RTT) to induce ACK earlier than when the senders' time-based loss detection should be kicked.\r\n\r\nSuch approach does have the downside of Inducing ACKs regardless of having gaps. But IMO, that is not a big issue, because:\r\n* Most congestion controllers require ACKs to be sent within a fraction of RTT.\r\n* Reducing the number of ACKs from one per two ack-eliciting packets to one per fraction of RTT is important (because the reduction of ACKs by their numbers is huge), but going below that is not important.\r\n\r\nConsidering these aspects, I am personally happy with _only_ having the packet-number based gap reporting mechanism as proposed by Ian in #100. ",
          "createdAt": "2021-11-11T01:08:42Z",
          "updatedAt": "2021-11-11T01:08:42Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "NONE",
          "body": "@kazuho I suppose that there is some equivalence between \"wait for N packets\" and \"wait for T milliseconds\". If I had to not use a time delay, I would set N = CWIN*T/RTT. Or vice versa. After all, the scope of the reordering is either a fraction of the CWIN or a fraction of the RTT, depending how you look at it. I get the feedback that reasoning on packet numbers is easier for several implementations, so OK. Let's just use packet numbers.",
          "createdAt": "2021-11-11T04:52:57Z",
          "updatedAt": "2021-11-11T04:52:57Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "MEMBER",
          "body": "I've looked at the pull request and I think that the technical mechanism is sound.  However, it took me a long time to get there using this discussion and the proposed text.  The explanation needs a lot of work.  I'll break this into several comments.\r\n\r\n### Model\r\n\r\nThe definition @ianswett uses [here](https://github.com/quicwg/ack-frequency/issues/96#issuecomment-947678438) is correct, but it is very much non-obvious from the explanation.  More text is needed in the pull request in order to explain why this is the case.\r\n\r\nThe goal here is to ensure that a new acknowledgment is sent that includes a (new) largest acknowledged that is more than the reordering threshold past a gap.  An acknowledgment like that will cause the packets in that gap to be declared lost.  That is why you look for a gap before `largest received packet number - reordering threshold` (note: `largest_received`[^1]).  However, you don't want to send an immediate ACK if the other side already has actionable information.  If the gap is before `largest acknowledged - reordering threshold`, there is no point in sending an ACK because the sender will have already declared those packets lost.\r\n\r\nAll of that needs to be clearly articulated.\r\n\r\n### Counting Packets or Packet Numbers\r\n\r\nI would also call attention to a critical difference between this and the ack-eliciting threshold.  The ack-eliciting threshold counts unacknowledged packets, without paying any attention to their packet number.  If there is a massive gap, that won't care.  The reordering threshold does care about packet numbers.\r\n\r\nThat leads to the point that the two values are not related in any way.  Either one can be larger with good reason, depending on how the sender is operating.\r\n\r\nNow we get to the harder bits of feedback...\r\n\r\n### Two Different Values in One\r\n\r\nThis change highlights how there are two piece of logic in play:\r\n\r\n1. The logic that determines when to send an immediate ACK in the presence of apparent reordering.  In [RFC 9000](https://quicwg.org/base-drafts/rfc9000.html#section-13.2.1-8.2), this occurs when any gap appears.  That equates to a recommended reordering threshold here of 1 (I think).\r\n\r\n2. The logic that determines when a packet is lost when processing ACK frames.  In [RFC 9002](https://quicwg.org/base-drafts/rfc9002.html#name-packet-threshold) kPacketThreshold = 3.\r\n\r\nThis document sets both to the same value and provides no way to separate the two.  I think that's OK, but it is worth noting.  As a matter of principle it seems tolerable for the former to be smaller than the latter, as we did in the original RFCs, but it is worth aligning the two on the basis that getting out of sync can lead to immediate acknowledgments that don't directly help with loss recovery.\r\n\r\nAgain, I think that it is worth discussing this change, so that it is clear that the change is deliberate and to help readers understand what is going on.\r\n\r\n### Values of 0 and 1\r\n\r\nI can't see any functional difference between a reordering threshold of 0 and 1.  Is that right?  Could we benefit from changing the encoding to eliminate this redundancy?  (I don't think we need to here - neither value is nonsensical - but I wanted to double-check.)\r\n\r\n### Examples\r\n\r\nFinally, I think that some examples would do a lot to improve comprehension.\r\n\r\n[^1]: Please don't call this `largest_acknowledged`, it's confusing: the logic here is going to decide whether this becomes the largest acknowledged packet; until then, it is the largest received packet (number).\r\n\r\n",
          "createdAt": "2022-08-09T06:35:12Z",
          "updatedAt": "2022-08-09T06:54:25Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@martinthomson I think your point about the two different values should be added. And the logic in PR #100 also needs to be clarified. But maybe we can just merge PR #100 for now and then start another PR?",
          "createdAt": "2023-01-19T16:56:24Z",
          "updatedAt": "2023-01-23T11:26:11Z"
        }
      ]
    },
    {
      "number": 103,
      "id": "I_kwDODddxTs4-R1Tw",
      "title": "Wording only: \"Generally...MUST\"",
      "url": "https://github.com/quicwg/ack-frequency/issues/103",
      "state": "CLOSED",
      "author": "gorryfair",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "ianswett"
      ],
      "labels": [
        "editorial"
      ],
      "body": "\"Generally, when using max_ack_delay for PTO computations, endpoints MUST use the maximum of the current value and all those in flight.\"\r\n\r\n- I think the words generally and MUST do not sit well together, and it would be better to say what is the requirement.\r\n",
      "createdAt": "2021-11-04T15:03:54Z",
      "updatedAt": "2022-06-26T10:53:42Z",
      "closedAt": "2022-06-26T10:53:42Z",
      "comments": []
    },
    {
      "number": 104,
      "id": "I_kwDODddxTs4-R15U",
      "title": "9.5.  Path MTU Discovery ",
      "url": "https://github.com/quicwg/ack-frequency/issues/104",
      "state": "CLOSED",
      "author": "gorryfair",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "janaiyengar"
      ],
      "labels": [
        "editorial",
        "has-pr"
      ],
      "body": "A sender might use timers to detect loss of PMTUD probe packets.  A sender SHOULD bundle an IMMEDIATE_ACK frame with any PTMUD probes to avoid triggering such timers.\r\n\r\n- This seems also valuable for DPLPMTUD.\r\n",
      "createdAt": "2021-11-04T15:06:04Z",
      "updatedAt": "2023-01-24T17:52:26Z",
      "closedAt": "2023-01-24T17:52:26Z",
      "comments": [
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "QUIC loss detection doesn't use timers to detect loss, it uses acknowledgement of subsequently sent packets.\r\n\r\nIn RFC9000, we indicate that a timer is not necessary for DPLPMTUD.  https://datatracker.ietf.org/doc/html/rfc9000#section-14.3.2\r\n\r\nOne could include an IMMEDIATE_ACK with a probe to speed up Path MTU, though I'm not sure if that's a useful optimization or not?  It doesn't seem harmful, but I'm just not sure if we should comment on it.\r\n\r\nWhat do you think?",
          "createdAt": "2022-06-26T18:00:45Z",
          "updatedAt": "2022-06-26T18:00:45Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@gorryfair it seems your commit didn't make it to a PR. Can you check that?\r\n\r\nAlso does your commit address this issue fully (by adding a reference to RFC9000).\r\n\r\nTo be honest, after your discussion it sounds to me that this sentence should rather be a MAY than a SHOULD (as it is currently written in the draft). However, no strong opinion from my side to change that.",
          "createdAt": "2023-01-19T15:33:12Z",
          "updatedAt": "2023-01-19T15:33:12Z"
        }
      ]
    },
    {
      "number": 105,
      "id": "I_kwDODddxTs4-R2Rz",
      "title": "NiT or more?",
      "url": "https://github.com/quicwg/ack-frequency/issues/105",
      "state": "CLOSED",
      "author": "gorryfair",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "9.4.  Connection Migration\r\n.... \" it sends or it can simply send an IMMEDIATE_ACK frame\"\r\n- What is the intended difference between the words \"it sends\" or \"it can simply send\"?\r\n",
      "createdAt": "2021-11-04T15:07:27Z",
      "updatedAt": "2021-11-04T17:47:53Z",
      "closedAt": "2021-11-04T17:47:53Z",
      "comments": []
    },
    {
      "number": 106,
      "id": "I_kwDODddxTs4-R4aA",
      "title": "Can we be clearer about the nature of any CC tradeoffs",
      "url": "https://github.com/quicwg/ack-frequency/issues/106",
      "state": "CLOSED",
      "author": "gorryfair",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "ianswett"
      ],
      "labels": [
        "editorial",
        "has-pr"
      ],
      "body": "Current text says:\r\n\"   Similarly, if these controllers rely on the\r\n   timing of peer acknowledgments (an \"ACK clock\"), delaying\r\n   acknowledgments will cause undesirable bursts of data into the\r\n   network.\"\r\n\r\n- PR#75 was closed, but I think this is still open? - The current text seems cryptic to me. Do the bursts really impact the congestion control design?  - I can see ACK frequency changes could cause undesirable bursts of data, and those bursts could, in turn, induce congestion - can we explain that. Especially since RFC9000 also seems to say these bursts could be mitigated by pacing, and also they could be controlled in some other way to be less than a maximum burst size (e.g. Max burst). I'd still argue that QUIC has a behaviour which expects bursts of upto 10 packets, and that this argues that pacing at least right now to mitigate bursts larger than the size of IW. Such burst mitigations are not without their own tradeoffs.\r\n-  The ACK_Frequency frame can postpone reporting loss, are there other impacts?",
      "createdAt": "2021-11-04T15:15:12Z",
      "updatedAt": "2023-02-27T17:08:12Z",
      "closedAt": "2023-02-27T17:08:12Z",
      "comments": [
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "Delaying ACKs could cause bursts, but it's certainly not guaranteed due to pacing, etc.  I'll update the text to correct and clarify this.",
          "createdAt": "2022-05-04T19:41:58Z",
          "updatedAt": "2022-05-04T19:41:58Z"
        }
      ]
    },
    {
      "number": 107,
      "id": "I_kwDODddxTs4-R6WP",
      "title": "Bounds on safe use of \"Ignore CE\" for ECT(1)? ",
      "url": "https://github.com/quicwg/ack-frequency/issues/107",
      "state": "CLOSED",
      "author": "gorryfair",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "ianswett"
      ],
      "labels": [
        "design"
      ],
      "body": "- To me, Ignore CE for arbitrary numbers of packets, does seem like it can be quite dangerous to the proper operation of ECN in the way understood for ECT(1), unless this is somehow constrained on the number of packets that are received. ECN is intended to be an early reaction to congestion and this delays a CC reaction, and if it is for a lot of packets I think that's likely an issue, although a few packets would likely be fine !!!! I think this needs CC safety guidance in the text, even if the guidance differs for ECT(0).\r\n",
      "createdAt": "2021-11-04T15:22:10Z",
      "updatedAt": "2022-07-11T23:40:03Z",
      "closedAt": "2022-07-11T23:40:03Z",
      "comments": [
        {
          "author": "goelvidhi",
          "authorAssociation": "NONE",
          "body": "I agree with this but probably the sender wouldn't use both Ignore-CE and L4S at the same time. Hopefully, folks will understand that from reading the draft. :-)",
          "createdAt": "2021-11-10T12:36:55Z",
          "updatedAt": "2021-11-10T12:36:55Z"
        },
        {
          "author": "gorryfair",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Hmmmm ... If this *really*  only applies to sender setting ECT(0) let's say that - I can see it works in relation to ABE or RFC3168 reactions, and not L4S. Explaining this, the impact would then be clear when (?) ECT(0) usage is finally deprecated. Likely a PR can achieve this.  ",
          "createdAt": "2021-11-10T12:45:31Z",
          "updatedAt": "2021-11-10T12:45:31Z"
        },
        {
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "body": "We can say that \"The Ignore-CE bit SHOULD NOT be set if ECT(1) is negotiated.\"",
          "createdAt": "2022-05-04T19:47:15Z",
          "updatedAt": "2022-05-04T19:47:15Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "Added to the existing PR about Ignore CE: https://github.com/quicwg/ack-frequency/pull/116",
          "createdAt": "2022-06-26T11:37:57Z",
          "updatedAt": "2022-06-26T11:37:57Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Actually to me it's really not clear why the Ignore CE is useful at all as you always want at least the first CE (in a row or in a RTT) as fast as possible. E.g. for Accurate ECN this is explicitly specified in Section  3.2.2.5.1 (https://datatracker.ietf.org/doc/html/draft-ietf-tcpm-accurate-ecn#section-3.2.2.5.1). I think that's where this discussion belong and not in this draft, given I don't see a reason for a sender side signal as I don't think this is actually congestion control dependent - all congestion control algorithm should react to CE marking and do so as quickly as possible.",
          "createdAt": "2022-07-07T17:05:33Z",
          "updatedAt": "2022-07-07T17:05:33Z"
        },
        {
          "author": "goelvidhi",
          "authorAssociation": "NONE",
          "body": "This was discussed in detail at https://github.com/quicwg/ack-frequency/issues/87\r\n\r\nI do agree with @mirjak that I am not convinced with the use of this field and why should a sender be allowed to set this.",
          "createdAt": "2022-07-09T08:13:06Z",
          "updatedAt": "2022-07-09T08:13:06Z"
        }
      ]
    },
    {
      "number": 109,
      "id": "I_kwDODddxTs4-kK_L",
      "title": "Expediting Congestion Signals",
      "url": "https://github.com/quicwg/ack-frequency/issues/109",
      "state": "CLOSED",
      "author": "gloinul",
      "authorAssociation": "NONE",
      "assignees": [
        "ianswett"
      ],
      "labels": [
        "design"
      ],
      "body": "First, in section 4 I think the wrong section is referenced:\r\n\r\n   Ignore CE:  A 1-bit field representing a boolean truth value.  This\r\n      field is set to true by an endpoint that does not wish to receive\r\n      an immediate acknowledgement when the peer receives CE-marked\r\n      packets (Section 7.1). 0 represents 'false' and 1 represents\r\n      'true'.\r\n\r\nThat should be Section 7.2 should it not? Please use symbolic links to avoid this issue.\r\n\r\nComparing 7.1 and 7.2 I think there is inconsistency in structure. I think that 7.2 needs the corresponding link back to the ACK_FREQUENCY frame feature for controlling this behavior.",
      "createdAt": "2021-11-10T10:47:07Z",
      "updatedAt": "2022-07-11T23:40:03Z",
      "closedAt": "2022-07-11T23:40:03Z",
      "comments": [
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "This is a symbolic link in the current editor's copy.\r\n\r\nI added a normative statement about Ignore CE in 7.2 in #116, which I believe is correct.  I used a SHOULD, but it could be a MUST.  It appears there were no existing normative statements about Ignore CE.\r\n\r\n",
          "createdAt": "2022-06-14T10:49:19Z",
          "updatedAt": "2022-06-14T10:49:19Z"
        }
      ]
    },
    {
      "number": 110,
      "id": "I_kwDODddxTs4-kPcs",
      "title": "Computation of Probe Timeout Period",
      "url": "https://github.com/quicwg/ack-frequency/issues/110",
      "state": "CLOSED",
      "author": "gloinul",
      "authorAssociation": "NONE",
      "assignees": [
        "ianswett"
      ],
      "labels": [
        "design"
      ],
      "body": "`   When the number of in-flight ack-eliciting packets is larger than the\r\n   ACK-Eliciting Threshold, an endpoint can expect that the peer will\r\n   not need to wait for its max_ack_delay period before sending an\r\n   acknowledgement.  In such cases, the endpoint MAY therefore exclude\r\n   the peer's 'max_ack_delay' from its PTO calculation.  Note that this\r\n   optimization requires some care in implementation, since it can cause\r\n   premature PTOs under packet loss when ignore_order is enabled.`\r\n\r\nIsn't this oversimplifying things so that the aspect of time until an ACK is expected to be sent is removed? To me it is not that max_ack_delay is removed completely from \r\nhttps://www.rfc-editor.org/rfc/rfc9002.html#name-computing-pto\r\n\r\nPTO = smoothed_rtt + max(4*rttvar, kGranularity) + max_ack_delay\r\n\r\nInstead it is replaced with expected time until the sender have sent ACK-Eliciting Threshold number of packets when that is less than max_ack_delay that is configured. \r\n\r\nSecondly, are you expecting the sender to make an estimate of how many packets more are received before an ACK is sent, i.e. care about what phase it is currently when calculating the PTO in regards to which packet is expected to trigger the next ACK? However, that is clearly prone to be wrong if there is a loss occurring currently who's loss indicating ack has not yet been received by the sender.  \r\n\r\nSo it appears to me that this allowance is by default creating a situation which will cause premature PTOs, and it would be better to put some restrictions on it.",
      "createdAt": "2021-11-10T11:06:28Z",
      "updatedAt": "2022-07-11T23:33:03Z",
      "closedAt": "2022-07-11T23:33:03Z",
      "comments": [
        {
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "body": "On the second point, the sender always knows how many packets are outstanding. So, it always knows whether the PTO computation -- which is always on the latest sent packet -- should include max_ack_delay or not.\r\n\r\nThat said, you are right the ignore_order causes trouble here, so how about \"MAY therefore exclude the peer's 'max_ack_delay' from its PTO calculation unless ignore_order is enabled. When ignore_order is enabled, premature PTOs are significantly more likely under packet loss.\"",
          "createdAt": "2022-05-04T20:03:31Z",
          "updatedAt": "2022-05-04T20:03:31Z"
        }
      ]
    },
    {
      "number": 111,
      "id": "I_kwDODddxTs4-ks5c",
      "title": "Guidance on choice of acknowledgment frequency for app-limited sender",
      "url": "https://github.com/quicwg/ack-frequency/issues/111",
      "state": "CLOSED",
      "author": "goelvidhi",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "has-pr"
      ],
      "body": "Thank you for adding the guidance on a sender's choice of acknowledgment frequency.  In the below text, I think we need to be careful about one more scenario - app limited sending behavior. If the sender is sending in a stop and go manner, and it creates ACK_FREQUENCY such that it receives one ACK per cwnd (ack-eliciting threshold) or an estimated RTT (Request Max Ack Delay), then it could take a total of 2 RTT for the ACK to come back.\r\n\r\n`A sender can accomplish this by\r\n sending an IMMEDIATE_ACK frame once per round-trip time (RTT), or it can set the\r\n Ack-Eliciting Threshold and Request Max Ack Delay values to be no more than a\r\n congestion window and an estimated RTT, respectively.`\r\n\r\nFor example, if RTT = R\r\n1. sender sends after long idle period at time t (there are no outstanding bytes in flight)\r\n2. receiver receive packet at t + R/2 (one way propagation time)\r\n3. receiver waits for 1R and then sends ACK\r\n4. sender will receive ACK at (t+R/2) + 1R ( Max ack delay) + R/2\r\n\r\nPerhaps, we could handle the app-limited scenario in guidance by saying, \r\n1. An app-limited sender SHOULD send an IMMEDIATE_ACK frame at the start of a new send cycle OR\r\n2. (More generic solution) The receiver SHOULD send an ACK after,\r\nMIN( time equivalent to Request Max Ack Delay has elapsed from the last ACK, Request Max Ack Delay from when it received data)\r\n\r\nI like option 2 as this covers the different sending behaviors.\r\n\r\n",
      "createdAt": "2021-11-10T13:09:40Z",
      "updatedAt": "2023-01-24T18:04:05Z",
      "closedAt": "2023-01-24T18:04:05Z",
      "comments": [
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, in the case you describe, it could take 2 RTTs to get feedback for sending a single packet.  Are there problems you expect this to cause?  The same is true of RFC9000 if peer's max_ack_delay is >= RTT.\r\n\r\nI can imagine recommending sending an IMMEDIATE_ACK at the end of a send cycle to mitigate this, but I'm not sure what the goal of sending one at the beginning is?",
          "createdAt": "2022-07-27T19:47:35Z",
          "updatedAt": "2022-07-27T19:47:35Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I created PR #135\r\n\r\nDoes this guidance make sense?",
          "createdAt": "2023-01-23T11:57:01Z",
          "updatedAt": "2023-01-23T11:57:01Z"
        }
      ]
    },
    {
      "number": 118,
      "id": "I_kwDODddxTs5Nlti7",
      "title": "Is \"Ignore CE\" useful?",
      "url": "https://github.com/quicwg/ack-frequency/issues/118",
      "state": "CLOSED",
      "author": "mirjak",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "design"
      ],
      "body": "Following up on discussion in issue #87 and #107. It is not clear if this signal is needed at all. CE should always be provided as soon as possible. Only follow-up CE in the same RTT might be deployed. However, this seem to be part of the ECN specification (e.g. as discussed for AccECN) and not necessarily in scope for this document, as it is not clear why a sender signal for this is needed.",
      "createdAt": "2022-07-12T08:35:12Z",
      "updatedAt": "2022-07-29T14:49:24Z",
      "closedAt": "2022-07-29T14:49:23Z",
      "comments": [
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks for filing this, I'll plan to include this in slides for Philadelphia.",
          "createdAt": "2022-07-15T18:19:58Z",
          "updatedAt": "2022-07-15T18:19:58Z"
        },
        {
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "body": "Discussion at IETF 114: Remove Ignore_CE; we can add a transport parameter (possible) if someone really wants this feature.",
          "createdAt": "2022-07-28T15:08:32Z",
          "updatedAt": "2022-07-28T15:08:32Z"
        }
      ]
    },
    {
      "number": 119,
      "id": "I_kwDODddxTs5OcA2L",
      "title": "IMMEDIATE_ACK should use a 1-byte frame type",
      "url": "https://github.com/quicwg/ack-frequency/issues/119",
      "state": "CLOSED",
      "author": "marten-seemann",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "design"
      ],
      "body": "IMMEDIATE_ACKs are expected to be sent regularly, at least once per RTT in some scenarios (see section 9.1). As much as I appreciated the frame type being 0xac, it might be worth shaving off that additional byte.",
      "createdAt": "2022-07-24T17:39:00Z",
      "updatedAt": "2023-02-23T23:41:41Z",
      "closedAt": "2023-02-23T23:41:41Z",
      "comments": [
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm personally supportive of this change, I'll discuss it at the QUIC WG meeting.",
          "createdAt": "2022-07-27T19:31:45Z",
          "updatedAt": "2022-07-27T19:31:45Z"
        },
        {
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "body": "Discussion at IETF 114: maybe change some text around sending IMMEDIATE_ACK as often as once per RTT, but leave as is for now and revisit in a while to see if we have more information.",
          "createdAt": "2022-07-28T15:03:53Z",
          "updatedAt": "2022-07-28T15:04:06Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The text already has \r\n\r\n> To enable a sender to respond to potential network congestion, a sender SHOULD cause a receiver to send an acknowledgement at least once per RTT if there are unacknowledged ack-eliciting packets in flight. A sender can accomplish this by sending an IMMEDIATE_ACK frame once per round-trip time (RTT), or ...\r\n\r\nDo we need to say more?",
          "createdAt": "2023-01-23T11:58:18Z",
          "updatedAt": "2023-01-23T11:58:18Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "I believe the design issue of whether this should be 1 or 2 bytes has been resolved.\r\n\r\nGiven that, I'm inclined to close this unless people want more text.",
          "createdAt": "2023-02-23T23:41:41Z",
          "updatedAt": "2023-02-23T23:41:41Z"
        }
      ]
    },
    {
      "number": 122,
      "id": "I_kwDODddxTs5Pazxd",
      "title": "What's the retransmission behavior for the ACK_FREQUENCY and IMMEDIATE_ACK frames?",
      "url": "https://github.com/quicwg/ack-frequency/issues/122",
      "state": "CLOSED",
      "author": "jbeshay",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "has-pr"
      ],
      "body": "The draft does not specify retransmission behavior for the two new frame types.\r\n\r\nBased upon the frame descriptions, I think it would be reasonable that the ACK_FREQUENCY frame should be retransmitted but not the the IMMEDIATE_ACK. For the latter, the timeout or the ACK that triggers the retransmission would render it useless.\r\n\r\nIf this behavior is correct, can we specify it in the draft?",
      "createdAt": "2022-08-08T21:38:49Z",
      "updatedAt": "2023-02-13T16:16:42Z",
      "closedAt": "2023-02-13T16:16:41Z",
      "comments": [
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "I think it might make sense to say something along the lines of \"the information that might be carried in frames is sent again in new frames as needed.\" ([RFC 9000 section 13.3](https://quicwg.org/base-drafts/rfc9000.html#section-13.3-1)), as well as possibly adding a link to that section.\r\n\r\nI'm not sure if we need to say anything more, because ~~as stated there, RFC 9000 does not specify how control signals have to be retransmitted~~ the (re)transmission strategy depends on each QUIC stack. To give an example, if a QUIC stack is designed to send an ACK_FREQUENCY frame every couple of RTTs, there is not need to track the ACK for ACK_FRQUENCY frame, because it would transmit a new signal regardless of if the previous one is lost.",
          "createdAt": "2022-08-09T00:30:16Z",
          "updatedAt": "2022-08-09T00:37:50Z"
        },
        {
          "author": "jbeshay",
          "authorAssociation": "NONE",
          "body": "That makes sense for the ACK_FREQUENCY frame. For the IMMEDIATE_ACK frame, I am not sure there is any use for retransmitting it.",
          "createdAt": "2022-08-11T17:15:08Z",
          "updatedAt": "2022-08-11T17:15:20Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "For ACK_FREQUENCY we already have this text:\r\n\r\n>ACK_FREQUENCY frames are ack-eliciting. However, their loss does not require\r\nretransmission if an ACK_FREQUENCY frame with a larger Sequence Number value\r\nhas been sent.\r\n\r\nHowever, I created a PR (#136) with the following clarification of this text:\r\n\r\n> ACK_FREQUENCY frames are ack-eliciting. However, an ACK_FREQUENCY frame SHOULD\r\nNOT just be retransmitted. Instead, a new ACK_FREQUENCY frame with a larger Sequence\r\nNumber value and potential updated information SHOULD be sent if loss was detected and\r\nif a new ACK_FREQUENCY was not already sent in the mean time until the loss was detected.\r\n\r\nAnd this new text for IMMEDIATE_ACK:\r\n\r\n> IMMEDIATE_ACK frames SHOULD NOT be retransmitted. If loss is detected, based\r\non the receipt of an ACK frames, there is no need to request another ack. If\r\na packet containing IMMEDIATE_ACK and data is detected as lost due to an\r\ntime-out, the sender MAY send the retransmitted data again together with an\r\nIMMEDIATE_ACK frame.\r\n\r\nDoes that make sense?",
          "createdAt": "2023-01-23T13:31:46Z",
          "updatedAt": "2023-01-23T13:31:46Z"
        },
        {
          "author": "jbeshay",
          "authorAssociation": "NONE",
          "body": "Yeah, I think that clarifies it. Thank you.",
          "createdAt": "2023-01-23T18:28:27Z",
          "updatedAt": "2023-01-23T18:28:27Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "#136 not merged yet as discussion is still about using SHOULD or not.",
          "createdAt": "2023-01-24T18:15:05Z",
          "updatedAt": "2023-01-24T18:15:05Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "I believe Kazuho is correct, and we tried not to use normative language around retransmission in RFC9000, so it seems like we should stick with that convention.",
          "createdAt": "2023-02-06T14:32:20Z",
          "updatedAt": "2023-02-06T14:32:20Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "We now removed normative language and tried to keep it short. If more explanation is needed, maybe we can open a separate issue. Please review the (merged) PR #136.",
          "createdAt": "2023-02-13T16:12:37Z",
          "updatedAt": "2023-02-13T16:12:37Z"
        }
      ]
    },
    {
      "number": 123,
      "id": "I_kwDODddxTs5VvAT_",
      "title": "Meaning of min_ack_delay not fully specified",
      "url": "https://github.com/quicwg/ack-frequency/issues/123",
      "state": "CLOSED",
      "author": "bbriscoe",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": ">       the minimum amount of time in microseconds by which the endpoint\r\n>       can delay an acknowledgement.\r\n\r\nI think this means, \"if no further data packets arrive\".\r\n",
      "createdAt": "2022-11-07T13:39:37Z",
      "updatedAt": "2022-11-07T13:44:31Z",
      "closedAt": "2022-11-07T13:44:30Z",
      "comments": [
        {
          "author": "bbriscoe",
          "authorAssociation": "NONE",
          "body": "Sry, delete that. What I said was rubbish.",
          "createdAt": "2022-11-07T13:44:30Z",
          "updatedAt": "2022-11-07T13:44:30Z"
        }
      ]
    },
    {
      "number": 124,
      "id": "I_kwDODddxTs5VvIsr",
      "title": "Potential conflict between min_ack_delay and Ack-Eliciting Threshold",
      "url": "https://github.com/quicwg/ack-frequency/issues/124",
      "state": "CLOSED",
      "author": "bbriscoe",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "has-pr"
      ],
      "body": "I don't believe the draft says which takes precedence if the Ack-Eliciting Threshold results in the data receiver having to send an ACK sooner than the min_ack_delay.\r\n\r\nI believe the draft ought to say that min_ack_delay takes precedence over Ack-Eliciting Threshold if the two conflict. My reasoning is that a processor needs time before it thinks about a threshold, similar to the reasoning behind \u00a77.3 on Batch Processing of Packets, which says:\r\n>   MAY process all packets in a batch before determining\r\n>   whether a threshold has been met\r\n\r\nBut I wouldn't fight hard, if someone has better reasoning against this order of precedence.",
      "createdAt": "2022-11-07T14:03:39Z",
      "updatedAt": "2023-01-24T20:57:31Z",
      "closedAt": "2023-01-24T20:57:31Z",
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The min_ack_delay is an indication from the sender of this information that it practical is not able to send acks faster, e.g. because of the timer granularity. I tried to clarify this in PR #129 \r\n\r\n@bbriscoe does this resolve this issue?",
          "createdAt": "2023-01-19T15:15:50Z",
          "updatedAt": "2023-01-19T15:15:50Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Closing as #129 was merged. Please reopen or open new issue if still not clear!",
          "createdAt": "2023-01-24T20:57:31Z",
          "updatedAt": "2023-01-24T20:57:31Z"
        }
      ]
    },
    {
      "number": 125,
      "id": "I_kwDODddxTs5VvT-Z",
      "title": "Receiver behaviour if attacked using ack-frequency",
      "url": "https://github.com/quicwg/ack-frequency/issues/125",
      "state": "CLOSED",
      "author": "bbriscoe",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "has-pr"
      ],
      "body": "I believe a data sender can attack a data receiver's resources by using ack-frequency to make the receiver ACK more frequently than it can cope with. For instance, a data sender could set Ack-Eliciting Threshold low, then send small packets at high rate. Multiple data senders (eg. a bot net) could adopt this strategy to force a server to spend a large proportion of its resources receiving small packets and sending out QUIC ACKs.\r\n\r\nSo I think the draft ought to say that a QUIC data receiver treats the Ack-Eliciting Threshold as a polite request, and it can ACK less frequently if its resources are limited. \r\n\r\nCurrently \u00a77 of the draft says:\r\n>    the endpoint MUST send an acknowledgement when one of the following\r\n>    conditions are met:\r\n>    *  Since the last acknowledgement was sent, the number of received\r\n>       ack-eliciting packets is greater than or equal to the recorded\r\n>       Ack-Eliciting Threshold.\r\n\r\nThis is where I suggest it ought to say SHOULD, and explain why it is not a MUST.\r\n\r\nUnfortunately, this means a genuine data sender cannot deterministically rely on the receiver complying with an ack-frequency request, e.g. a sender cannot use ack-frequency to reduce the time it has to wait before it deems there must have been a loss. But, I guess a sender that is not being unreasonable will usually be able to rely on the receiver doing as requested.\r\n\r\nThere's probably a similar line of argument to this whole issue for min_ack_delay.\r\n",
      "createdAt": "2022-11-07T14:32:52Z",
      "updatedAt": "2023-02-20T19:34:01Z",
      "closedAt": "2023-02-20T19:34:01Z",
      "comments": [
        {
          "author": "gorryfair",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The client does not know very much about the sensibility of a particular request. e.g.  a request trying to force a high ACK rate - or  a request reducing the ACK frequency to a very long period - using up cwnd to reach flow-control limits and stall. I think this totally relies on the server requesting sensible values. But that's fine - we could say what is sensible if we wish.",
          "createdAt": "2022-11-10T12:55:37Z",
          "updatedAt": "2022-11-10T12:55:37Z"
        }
      ]
    },
    {
      "number": 126,
      "id": "I_kwDODddxTs5VvVNt",
      "title": "\"MUST NOT remember\" at all?",
      "url": "https://github.com/quicwg/ack-frequency/issues/126",
      "state": "CLOSED",
      "author": "bbriscoe",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "editorial",
        "has-pr"
      ],
      "body": ">    Endpoints MUST NOT remember the value of the min_ack_delay transport\r\n>    parameter they received.\r\n\r\nNot remembering it at all would be rather pointless :)\r\nI think the authors intended to add, \" for use in a subsequent connection.\"\r\n\r\n\r\n",
      "createdAt": "2022-11-07T14:36:28Z",
      "updatedAt": "2023-01-24T18:09:33Z",
      "closedAt": "2023-01-24T18:09:33Z",
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yes, this sentence also confused me a lot!",
          "createdAt": "2023-01-18T17:17:20Z",
          "updatedAt": "2023-01-18T17:17:20Z"
        }
      ]
    },
    {
      "number": 131,
      "id": "I_kwDODddxTs5cXLLv",
      "title": "MUSTs in \"Multiple ACK_FREQUENCY Frames\" Section",
      "url": "https://github.com/quicwg/ack-frequency/issues/131",
      "state": "CLOSED",
      "author": "mirjak",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "mirjak"
      ],
      "labels": [
        "design"
      ],
      "body": "> An endpoint MUST allow reordered ACK_FREQUENCY frames to be received and processed, see [Section 13.3](https://rfc-editor.org/rfc/rfc9000#section-13.3) of [[QUIC-TRANSPORT](https://www.ietf.org/archive/id/draft-ietf-quic-ack-frequency-02.html#QUIC-TRANSPORT)].\r\n\r\n> On the first received ACK_FREQUENCY frame in a connection, an endpoint MUST immediately record all values from the frame. The sequence number of the frame is recorded as the largest seen sequence number. The new Ack-Eliciting Threshold and Request Max Ack Delay values MUST be immediately used for delaying acknowledgements; see [Section 7](https://www.ietf.org/archive/id/draft-ietf-quic-ack-frequency-02.html#sending).\r\n\r\nAll of these MUSTs don't really make sense to me:\r\n\r\n- \"MUST allow to be received and processed\" -> I don't think there is anything in RFC9000 that says that reordered packets should be discarded or not processed. -> Can we just remove this sentence?\r\n\r\n- \"MUST immediately record all values\" -> I don't think use of normative language makes sense here as that can't be enforces. I'd to rather describe this as the factual meaning here -> \"value in the ACK_FREQUENCY frame update the old values\"\r\n\r\n- \"On the first received ACK_FREQUENCY frame in a connection\" -> Why on the first? If at all, isn't that true for all frames?\r\n\r\n- \"MUST be immediately used\" -> Not sure what immediately really means here. When else should you use them. however, I don't think you can require a MUST here because at the end it's the sender of the ACK that decides when to send an ACK and there might be other reason why that endpoint can't hold to the requested threshold. At the end it's only a request. That also related to a point @bbriscoe made in #125 -> Can we just delete this sentence? ",
      "createdAt": "2023-01-19T17:06:39Z",
      "updatedAt": "2023-02-21T12:30:42Z",
      "closedAt": "2023-02-21T12:30:42Z",
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Sorry one more:\r\n\r\n> An endpoint MUST use a sequence number of 0 for the first ACK_FREQUENCY frame it constructs and sends, and a strictly increasing value thereafter.\r\n\r\nWhy does the sequence number has to start with 0? Should be enough to say that is MUST be strictly increasing.",
          "createdAt": "2023-01-19T17:08:30Z",
          "updatedAt": "2023-01-19T17:08:30Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "And respectively in section 7 \"Sending Acknowledgments\"\r\n\r\n> the endpoint MUST send an acknowledgement when one of the following conditions are met\r\n\r\nI don't think this really can be a MUST. However, maybe it's better to not use normative language here at all and e.g. say \"are requested to send an acknowledgment when...\"\r\n",
          "createdAt": "2023-01-19T17:13:11Z",
          "updatedAt": "2023-01-19T17:13:11Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "I believe we can remove most, if not all of these MUSTs, but some of the text here is useful.",
          "createdAt": "2023-02-06T15:33:58Z",
          "updatedAt": "2023-02-06T15:33:58Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Addressed by #149",
          "createdAt": "2023-02-21T12:30:42Z",
          "updatedAt": "2023-02-21T12:30:42Z"
        }
      ]
    },
    {
      "number": 132,
      "id": "I_kwDODddxTs5cXP0d",
      "title": "What does \"bundle acknowledgments\" mean?",
      "url": "https://github.com/quicwg/ack-frequency/issues/132",
      "state": "CLOSED",
      "author": "mirjak",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "ianswett"
      ],
      "labels": [
        "editorial"
      ],
      "body": "Section 7 \"Sending Acknowledgments\" says:\r\n\r\n> An endpoint is expected to bundle acknowledgements when possible.\r\n\r\nI'm not sure what this means... like sending the same ACK twice in the same QUIC packet? Or generally sending two different ACK frames in the same QUIC packet? Does that really make sense in any case? Can't you always just send the more recent ACK or create one combined ACK frame with all information?",
      "createdAt": "2023-01-19T17:16:53Z",
      "updatedAt": "2023-02-06T22:37:45Z",
      "closedAt": "2023-02-06T22:37:45Z",
      "comments": []
    },
    {
      "number": 133,
      "id": "I_kwDODddxTs5cdgQ5",
      "title": "What does it mean that IMMEDIATE_ACK \"can be used with a PING frame\"?",
      "url": "https://github.com/quicwg/ack-frequency/issues/133",
      "state": "CLOSED",
      "author": "neild",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "editorial",
        "has-pr"
      ],
      "body": "Are IMMEDIATE_ACK frames ack-eliciting? This doesn't seem to be explicitly stated anywhere.\r\n\r\nI would expect IMMEDIATE_ACK to be ack-eliciting, but I see a statement that an IMMEDIATE_ACK frame \"can be used with a PING frame [...] if a sender wants an immediate RTT measurement or if a sender wants to establish receiver liveness as quickly as possible.\" Why would a PING frame be necessary if IMMEDIATE_ACK itself is ack-eliciting?",
      "createdAt": "2023-01-20T17:49:51Z",
      "updatedAt": "2023-01-24T17:52:56Z",
      "closedAt": "2023-01-24T17:52:56Z",
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I did add to PR #136 a sentence that IMMEDIATE_ACK frames are by definition ack-eliciting. However, I think your question makes actually an interesting point about what the difference between PING and IMMEDIATE_ACK is.\r\n\r\nRFC9000 says about PING frames:\r\n\r\n> The receiver of a PING frame simply needs to acknowledge the packet containing this frame.\r\n\r\nSo I guess this means that PING frames are ack-eliciting but you may not get an ack immediately based on the implemented ACK strategy at the receiver. I guess that's not a problem because when the one end sends and the other receives the PING (even if no ACK frame is sent) the idle timer gets reset.\r\n\r\nI tried to clarify this in PR #137. Does that help?\r\n\r\n",
          "createdAt": "2023-01-23T14:20:37Z",
          "updatedAt": "2023-01-23T14:20:37Z"
        },
        {
          "author": "neild",
          "authorAssociation": "NONE",
          "body": "PR #137 doesn't really clarify the situation for me.\r\n\r\nIf IMMEDIATE_ACK is ack-eliciting, why would one send it in the same packet as a PING frame?\r\n\r\nTo put it another way: What is the difference between a packet containing an IMMEDIATE_ACK frame and nothing else, and a packet containing an IMMEDIATE_ACK and PING frame and nothing else? Both are ack-eliciting, and both should trigger an immediate ACK.\r\n\r\nTo my understanding, PING frames exist solely as a way to make a packet ack-eliciting. If a packet contains other ack-eliciting frames, adding a PING frame has no effect.",
          "createdAt": "2023-01-23T17:37:11Z",
          "updatedAt": "2023-01-23T17:37:11Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The difference (which I tried to clarify) is that a PING frame might not trigger an _immediate_ ACK. It will trigger an ACK eventually but depending on the ACK strategy used, it might wait for the delayed ACK timer to expire before it sends the ACK.",
          "createdAt": "2023-01-23T17:42:35Z",
          "updatedAt": "2023-01-23T17:49:19Z"
        },
        {
          "author": "neild",
          "authorAssociation": "NONE",
          "body": "I'm sorry, I think you misunderstood my question.\r\n\r\nThree possible packets:\r\n\r\n1. PING frame alone.\r\n2. PING and IMMEDIATE_ACK frames.\r\n3. IMMEDIATE_ACK frame alone.\r\n\r\nI understand the difference between (1) and (2). A packet containing a PING frame is ack-eliciting, but the ack may be delayed up to max_ack_delay. A packet containing an IMMEDIATE_ACK frame will be acknowledged immediately.\r\n\r\nI do not understand the difference between (2) and (3). Both are ack-eliciting packets that result in an immediate ACK rather than one potentially delayed by max_ack_delay. If there is no difference between them, then why would one send (2) rather than the shorter and equivalent (3)? If there is a difference, what is it?",
          "createdAt": "2023-01-23T18:53:25Z",
          "updatedAt": "2023-01-23T18:53:25Z"
        },
        {
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "body": "maybe calling the frame PING_IMMEDIATE would more closely indicate the intent of the frame. This is because we seem to mixing actions and subject. If a PING elicites an ACK at sometime (variable due to delay), a PING_IMMEDIATE is more likely to elicit an ACK sooner.\r\n\r\n",
          "createdAt": "2023-01-23T19:38:10Z",
          "updatedAt": "2023-01-23T19:40:44Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thanks for clarification. Got it now. I guess I was implicitly assuming that you can never send an ACK_IMMEDIATE frame alone (option 3) but I also guess the draft doesn't say that anywhere explicitly. On the other hand, why not.\r\n\r\nSo one way or the other, we have to clarify this! I will discuss tomorrow with the other authors and we will propose a solution!\r\n\r\nThanks!",
          "createdAt": "2023-01-23T20:51:48Z",
          "updatedAt": "2023-01-23T20:51:48Z"
        },
        {
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "body": "I don't see any reason to prevent sending the frame alone. \r\n\r\nWe might consider making this frame like ACK, where a packet that contains only this frame is not ack-eliciting. Then it would be logical that you'd need to send it with PING or some other ack-elicitng frame. But to be honest, that sounds overly complicated and I don't think it's needs. \r\n\r\nEither way, some room for clarification in the text.",
          "createdAt": "2023-01-23T21:11:37Z",
          "updatedAt": "2023-01-23T21:11:37Z"
        },
        {
          "author": "neild",
          "authorAssociation": "NONE",
          "body": "PING_IMMEDIATE or IMMEDIATE_PING seems clearer to me, since this is a variant of the PING frame rather than a variant of the ACK frame.",
          "createdAt": "2023-01-23T21:38:26Z",
          "updatedAt": "2023-01-23T21:38:26Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "I would prefer sticking to the name IMMEDIATE_ACK.\r\n\r\nThe reasoning is that ACK is more than just a pong. ACK carries the list of all the packets that have been received, rather than signalling that just a ping has arrived.\r\n\r\nIt might be true that IMMEDIATE_ACK can be used as a ping, but that is not the intent of adding the frame, IIUC.",
          "createdAt": "2023-01-23T23:20:37Z",
          "updatedAt": "2023-01-23T23:20:37Z"
        },
        {
          "author": "neild",
          "authorAssociation": "NONE",
          "body": "IMMEDIATE_ACK is not an ack, however. It is a request for an ack, which is the same as PING.\r\n\r\nNote that a PING frame is not a request for a pong. QUIC does not have \"pong\"s. A PING frame is an ack-eliciting frame, and like any other ack-eliciting frame requires the recipient to reply with an ACK frame within max_ack_delay. It has no semantics beyond being ack-eliciting.",
          "createdAt": "2023-01-24T00:02:23Z",
          "updatedAt": "2023-01-24T00:02:23Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "Yeah, the role of the frame is \"elicit immediate ack.\" Admittedly, by calling the frame IMMEDIATE_ACK, we are omitting \"elicit\". If we want to be perfect, we can call the frame ELICIT_IMMEIDATE_ACK.\r\n\r\nOTOH, calling the frame \"IMMEDIATE_PING\" implies that PING frames in QUIC elicits an ack and nothing more than that. While that is true with QUIC, my concern is if that implication is intuitive.\r\n\r\nIIRC the reason we added PING frames in QUIC v1 (instead of just suggesting stacks use an old DATA frame or whatever) is that having a frame with a name representing a mechanism (i.e., ping-pong) is more intuitive. If we are to follow that precedent, calling the new frame IMMEDIATE_PING is IMO not a very good idea, because it requires the understanding of the underlying mechanism to see how the frame is to be used (elicit immediate ack).",
          "createdAt": "2023-01-24T05:48:05Z",
          "updatedAt": "2023-01-24T05:48:05Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think the right name would be something like IMMEDIATE_ACK_REQUEST or if we want to go shorter may IMMEDIATE_ACK_REQ.",
          "createdAt": "2023-01-24T10:48:51Z",
          "updatedAt": "2023-01-24T10:48:51Z"
        },
        {
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "body": "That signals the intent more clearly and avoids the frame being confused with an actual ACK",
          "createdAt": "2023-01-24T13:43:21Z",
          "updatedAt": "2023-01-24T13:43:21Z"
        }
      ]
    },
    {
      "number": 138,
      "id": "I_kwDODddxTs5clJUS",
      "title": "Do we need to discuss the data centre case where RTT<min_ack-delay?",
      "url": "https://github.com/quicwg/ack-frequency/issues/138",
      "state": "CLOSED",
      "author": "mirjak",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Currently there is the following text in PR #115:\r\n\r\n> Note that it's possible the RTT is smaller than the receiver's timer granularity,\r\n as communicated via the 'min_ack_delay' transport parameter, preventing the\r\n receiver from sending an acknowledgment every RTT in time.  In these cases,\r\n 'Reordering Threshold' can be harmful, because it delays fast loss detection.\r\n\r\nIt is not clear how much this case (which usually only occurs in data centres and not over the Internet) should be discussed and what the right guidance would be.",
      "createdAt": "2023-01-23T14:55:49Z",
      "updatedAt": "2023-03-10T15:08:39Z",
      "closedAt": "2023-03-10T15:08:39Z",
      "comments": [
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "I'd argue we don't need to discuss it further, and instead just call it out as an issue as PR #115 does.",
          "createdAt": "2023-02-23T23:16:01Z",
          "updatedAt": "2023-02-23T23:16:01Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Addressed by #115 ",
          "createdAt": "2023-03-10T15:08:38Z",
          "updatedAt": "2023-03-10T15:08:38Z"
        }
      ]
    },
    {
      "number": 140,
      "id": "I_kwDODddxTs5cuSNB",
      "title": "Clarify Reordering Threshold",
      "url": "https://github.com/quicwg/ack-frequency/issues/140",
      "state": "CLOSED",
      "author": "mirjak",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "mirjak"
      ],
      "labels": [
        "has-pr"
      ],
      "body": "We merged PR #100 but without much text about how exactly the reordering threshold needs to be applied. Based on the amount of discussion in that PR, this will need further clarification.",
      "createdAt": "2023-01-24T20:41:15Z",
      "updatedAt": "2023-03-01T23:44:47Z",
      "closedAt": "2023-03-01T23:44:47Z",
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Actually I realised that the use of the Reordering threshold is not fully clear to me. The intention is to not delay an ACK unnecessarily when loss happen. However, the data sender will not declare a packet as lost before the reordering threshold is reached, which means it doesn't help to send a packet earlier that this.\r\n\r\nThen, the whole idea of the ack frequency draft is to reduce the ACK rate. So in case of loss I guess there are two options. In both cases you send an ACK when the re-ordering threshold is reached but the question is what to do afterwards. Do you want to keep sending ACKs for all packet you receive (immediately) while loss event is on-going (until the gap is filed) to ensure that the loss info is delivered or you go back to your old ack schedule.\r\n\r\nRFC9000 says:\r\n> when the packet has a packet number larger than the highest-numbered ack-eliciting packet that has been received and there are missing packets between that packet and this packet.\r\n\r\nThis means you only send one additional ACK as then the highest-numbered ack-eliciting packet is after the gap as soon as you have sent the ACK. Given gaps can also be created by the data sender which means there are not lost packets and therefore will never be filled, I don't think any other behaviour makes sense for QUIC.\r\n\r\nI created PR #143 to clarify this. There might be still some word-smithing needed but it would be good if people could confirm this understanding.",
          "createdAt": "2023-01-25T18:50:36Z",
          "updatedAt": "2023-02-23T08:24:17Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "The intent is to send an ACK immediately when any missing packets reach the threshold (and presumably can be declared lost).  As such, you'd send at most one additional ACK for each missing packet.",
          "createdAt": "2023-02-23T21:34:05Z",
          "updatedAt": "2023-02-23T21:34:05Z"
        }
      ]
    },
    {
      "number": 142,
      "id": "I_kwDODddxTs5cyo6G",
      "title": "Is the default Reordering Threshold 1 or 3?",
      "url": "https://github.com/quicwg/ack-frequency/issues/142",
      "state": "CLOSED",
      "author": "mirjak",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Sec #ack-frequency-frame says:\r\n\r\n>  If no ACK_FREQUENCY frames have been received, this value defaults to 3, which is the recommended packet threhold for loss detection in ({{Section 18.2 of QUIC-RECOVERY}}).\r\n\r\nand Sec #out-of-order says:\r\n\r\n> If an endpoint has not yet received an ACK_FREQUENCY frame, the endpoint immediately acknowledges any subsequent packets that are received out of order, as specified in {{Section 13.2 of QUIC-TRANSPORT}}.",
      "createdAt": "2023-01-25T14:46:48Z",
      "updatedAt": "2023-02-06T15:17:31Z",
      "closedAt": "2023-02-06T15:17:31Z",
      "comments": [
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "It seems optimal to default it to 3, because that's the default packet threshold, but the principle of least surprise argues for 1 (ie: no behavior change until an ACK_FREQUENCY frame is received), so I lean toward 1.",
          "createdAt": "2023-01-26T21:43:29Z",
          "updatedAt": "2023-01-26T21:43:29Z"
        }
      ]
    },
    {
      "number": 144,
      "id": "I_kwDODddxTs5c5WKD",
      "title": "MUST or SHOULD send immediate ACK?",
      "url": "https://github.com/quicwg/ack-frequency/issues/144",
      "state": "CLOSED",
      "author": "mirjak",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "design"
      ],
      "body": "The document uses MUST in multiple places, however, as discussed in the new proposed text for the security considerations (see PR #139) the requester cannot enforce any ACK strategy and there might be reason like practical limitation or an overload situation  where the ACK sender simply decides to send less ACKs. So the question is really can to requirements be MUSTs or is SHOULD more realistic and correct?",
      "createdAt": "2023-01-26T17:53:06Z",
      "updatedAt": "2023-02-20T19:27:12Z",
      "closedAt": "2023-02-20T19:27:12Z",
      "comments": []
    },
    {
      "number": 147,
      "id": "I_kwDODddxTs5dv6Gs",
      "title": "Normative recommendations for thresholds?",
      "url": "https://github.com/quicwg/ack-frequency/issues/147",
      "state": "CLOSED",
      "author": "mirjak",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "design"
      ],
      "body": "In the congestion control PR I suggested the following sentence:\r\n\r\n> A sender SHOULD  NOT set the Ack-Eliciting Threshold and Request Max Ack Delay values to be more than a congestion window and an estimated RTT, respectively.\r\n\r\nThe congestion control section is probably not the right place for this normative requirement but I think it's a correct requirement (with the intention that it is a SHOULD and not MUST and you maybe decide differently e.g. in a DC environment).",
      "createdAt": "2023-02-06T16:01:46Z",
      "updatedAt": "2023-03-06T14:49:25Z",
      "closedAt": "2023-03-06T14:49:24Z",
      "comments": [
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm unsure if I want to say this or not, but thanks for filing an issue.\r\n\r\nIf we do say this, we should have a note that the Request Max Ack Delay value may be limited by the min_ack_delay transport param.",
          "createdAt": "2023-02-06T16:06:51Z",
          "updatedAt": "2023-02-06T16:06:51Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "Which PR does this have?  #115?",
          "createdAt": "2023-02-22T19:09:33Z",
          "updatedAt": "2023-02-22T19:09:33Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "yes currently it's part of #115 ",
          "createdAt": "2023-02-22T19:24:44Z",
          "updatedAt": "2023-02-22T19:24:44Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "I removed the normative requirement from PR #115 as part of accepting your suggestion.\r\n\r\nI'm inclined to not add a new normative requirement elsewhere, since it's not clear to me exactly what that should be.",
          "createdAt": "2023-02-23T23:17:23Z",
          "updatedAt": "2023-02-23T23:17:23Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "I'll note that we still have:\r\n\"To limit these consequences of reduced acknowledgement frequency, a sender\r\nSHOULD cause a receiver to send an acknowledgement at least once per RTT if\r\nthere are unacknowledged ack-eliciting packets in flight.\"\r\n\r\nI personally feel this is sufficient.",
          "createdAt": "2023-03-04T02:22:19Z",
          "updatedAt": "2023-03-04T02:22:19Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yes, that the same requirement. Especially as the next sentence also says:\r\n\r\n\"A sender can accomplish this by sending an IMMEDIATE_ACK frame once per round-trip time (RTT), or it can set the Ack-Eliciting Threshold and Request Max Ack Delay values to be no more than a congestion window and an estimated RTT, respectively.\"\r\n\r\nSo I guess this is cover in the right place already now and we can close the issue. Thanks!",
          "createdAt": "2023-03-06T14:49:24Z",
          "updatedAt": "2023-03-06T14:49:24Z"
        }
      ]
    },
    {
      "number": 153,
      "id": "I_kwDODddxTs5e6V5C",
      "title": "Inconsistent definition of Ack-Eliciting Threshold",
      "url": "https://github.com/quicwg/ack-frequency/issues/153",
      "state": "CLOSED",
      "author": "janaiyengar",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "design"
      ],
      "body": "We have inconsistent definitions for Ack-Eliciting Threshold, which probably has people implementing this differently. \r\n\r\nIn Section 4:\r\n```In other words, an acknowledgement is sent when more than this number of ack-eliciting packets have been received.```\r\n\r\nIn Section 7:\r\n```Since the last acknowledgement was sent, the number of received ack-eliciting packets is greater than or equal to the recorded Ack-Eliciting Threshold.```\r\n\r\nThe intended definition is the one in Section 4, so #151 fixes and makes this consistent.\r\n\r\nClosed by #151.",
      "createdAt": "2023-02-20T19:26:14Z",
      "updatedAt": "2023-02-20T19:27:56Z",
      "closedAt": "2023-02-20T19:27:55Z",
      "comments": [
        {
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "body": "Closed by #151 ",
          "createdAt": "2023-02-20T19:27:55Z",
          "updatedAt": "2023-02-20T19:27:55Z"
        }
      ]
    },
    {
      "number": 154,
      "id": "I_kwDODddxTs5e6ZDZ",
      "title": "MUST on limiting bursts",
      "url": "https://github.com/quicwg/ack-frequency/issues/154",
      "state": "CLOSED",
      "author": "mirjak",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "has-pr"
      ],
      "body": "This draft says: \r\n\r\n> A sender MUST limit such bursts. In keeping with Section 7.7 of {{QUIC-RECOVERY}}, a sender can either employ pacing or cause a receiver to send an acknowledgement for at least each initial congestion window of received data.\r\n\r\nRFC9002 only has a SHOULD on pacing. Is it appropriate to change this require in this draft? If not, no normative language should be used here at all.",
      "createdAt": "2023-02-20T19:43:32Z",
      "updatedAt": "2023-02-27T16:35:01Z",
      "closedAt": "2023-02-27T16:35:00Z",
      "comments": []
    },
    {
      "number": 162,
      "id": "I_kwDODddxTs5gjqZ4",
      "title": "Update min_ack_delay value with last draft change on ACK_FREQUENCY",
      "url": "https://github.com/quicwg/ack-frequency/issues/162",
      "state": "CLOSED",
      "author": "alagoutte",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "design"
      ],
      "body": "With the last draft(-03),\r\n\r\nthere is a change on ACK_FREQUENCY frame format (Remove Ignore CE #121 and Reordering Threshold #100) may be need change min_ack_delay value for detect what frame format do you need to use for decode ?",
      "createdAt": "2023-03-11T10:33:54Z",
      "updatedAt": "2023-03-27T03:00:36Z",
      "closedAt": "2023-03-27T03:00:36Z",
      "comments": [
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "I think we should change the min_ack_delay Transport Param codepoint, which is currently 0xff03de1a, maybe to 0xff04de1a.\r\n",
          "createdAt": "2023-03-26T04:47:46Z",
          "updatedAt": "2023-03-26T04:47:46Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "yes, I also thought about this and then forgot to bring it up. Maybe we should even submit a new version with a different number right tomorrow.",
          "createdAt": "2023-03-26T04:49:56Z",
          "updatedAt": "2023-03-26T04:49:56Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "Submitting and then revving the version SGTM.  I can't see a reason not to bump the codepoint, so please merge my PR if you agree @mirjak ",
          "createdAt": "2023-03-26T05:02:41Z",
          "updatedAt": "2023-03-26T05:02:41Z"
        }
      ]
    },
    {
      "number": 163,
      "id": "I_kwDODddxTs5gntPO",
      "title": "NiT: It would be nice to clarify /it/",
      "url": "https://github.com/quicwg/ack-frequency/issues/163",
      "state": "CLOSED",
      "author": "gorryfair",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": " ACK_FREQUENCY frames are ack-eliciting.  When an ACK_FREQUENCY frame\r\n   is lost, it is encouraged to send another ACK_FREQUENCY frame, unless\r\n   an ACK_FREQUENCY frame with a larger Sequence Number value has\r\n   already been sent. \r\n- Is /it/ the sender?",
      "createdAt": "2023-03-13T08:58:02Z",
      "updatedAt": "2023-03-27T02:55:28Z",
      "closedAt": "2023-03-27T02:55:28Z",
      "comments": []
    },
    {
      "number": 164,
      "id": "I_kwDODddxTs5gnvcu",
      "title": "Editorial: Should definitions be followed by colons?",
      "url": "https://github.com/quicwg/ack-frequency/issues/164",
      "state": "CLOSED",
      "author": "gorryfair",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial",
        "has-pr"
      ],
      "body": "Editorial: These terms are defined without colons, but earlier colons follow definition terms, would it be helpful to be consistent?\r\n\r\nLargest Unacked, Largest Acked, Unreported Missing",
      "createdAt": "2023-03-13T09:02:43Z",
      "updatedAt": "2023-03-27T03:05:23Z",
      "closedAt": "2023-03-27T03:05:23Z",
      "comments": []
    },
    {
      "number": 165,
      "id": "I_kwDODddxTs5gnwEC",
      "title": "Editorial: What is an /underlying platform/?",
      "url": "https://github.com/quicwg/ack-frequency/issues/165",
      "state": "CLOSED",
      "author": "gorryfair",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "The text says:\r\n\"For performance reasons, an endpoint can receive incoming packets\r\nfrom the underlying platform in a batch of multiple packets.\"\r\n- is this the network layer... or something else?",
      "createdAt": "2023-03-13T09:03:57Z",
      "updatedAt": "2023-03-27T02:54:58Z",
      "closedAt": "2023-03-27T02:54:58Z",
      "comments": [
        {
          "author": "nibanks",
          "authorAssociation": "MEMBER",
          "body": "It could be the OS or the hardware.",
          "createdAt": "2023-03-13T12:03:39Z",
          "updatedAt": "2023-03-13T12:03:39Z"
        },
        {
          "author": "gorryfair",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think the sentence needs some work - I can believe the network; interface; operating system; etc. Are examples of reasons why there is bunching of packets so that a batch of packets arrive at the receiver. The current text doesn't really say quite what I'd expect.",
          "createdAt": "2023-03-13T12:24:42Z",
          "updatedAt": "2023-03-13T12:24:42Z"
        }
      ]
    },
    {
      "number": 166,
      "id": "I_kwDODddxTs5gnyXx",
      "title": "What does \"MUST  however wait until\" require?",
      "url": "https://github.com/quicwg/ack-frequency/issues/166",
      "state": "CLOSED",
      "author": "gorryfair",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "design",
        "has-pr"
      ],
      "body": "The text says:\r\n/The endpoint MUST\r\n   however wait until the ACK_FREQUENCY frame that carries this new\r\n   value is acknowledged by the peer./\r\nI found this a little hard on the reader, could this be easier to read as:\r\n/The endpoint MUST\r\n   however wait for an acknowledgment by the peer of the ACK_FREQUENCY frame that carries this new\r\n   value./\r\n- and then I ask what does MUST mean here as a requirement to wait? I suspect it would be covered by saying /The endpoint needs to wait.../, because I suspect the required action is specified in the next para.",
      "createdAt": "2023-03-13T09:08:50Z",
      "updatedAt": "2023-03-27T03:03:07Z",
      "closedAt": "2023-03-27T03:03:07Z",
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yes, actually there is a mother MUST in the next sentence:\r\n\r\n> Until the frame is acknowledged, the endpoint MUST use the greater of the current max_ack_delay and the value that is in flight when computing the PTO period.\r\n\r\nSo I think it would probably be better to remove the normative language in this sentence.\r\n\r\nAs we are taking about changing normative language, I will label this as design now, but I think it otherwise mostly editorial.",
          "createdAt": "2023-03-13T17:30:53Z",
          "updatedAt": "2023-03-13T17:30:53Z"
        }
      ]
    },
    {
      "number": 167,
      "id": "I_kwDODddxTs5gn1jH",
      "title": "NiT: Should refer to the *size* of the initial congestion window.",
      "url": "https://github.com/quicwg/ack-frequency/issues/167",
      "state": "CLOSED",
      "author": "gorryfair",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial",
        "has-pr"
      ],
      "body": "The text says:\r\nIn keeping with Section 7.7 of [QUIC-RECOVERY], a sender\r\n   can either employ pacing or limit bursts to the initial congestion\r\n   window.\r\n- This could be read to sound like it only happens during the initial congestion window, whereas I hope the intention is to refer to the size used for the initial congestion window.\r\nWould it be clearer to say:\r\n   In keeping with Section 7.7 of [QUIC-RECOVERY], a sender\r\n   can either employ pacing or limit bursts to the size of the initial congestion\r\n   window (Section 7.2 of [QUIC-RECOVERY]).",
      "createdAt": "2023-03-13T09:16:19Z",
      "updatedAt": "2023-03-27T03:06:14Z",
      "closedAt": "2023-03-27T03:06:14Z",
      "comments": [
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "In RFC 9002, we say \"Senders SHOULD limit bursts to the initial congestion window\", so the existing text is in line with that and I'd prefer to close this issue with no change.",
          "createdAt": "2023-03-27T03:06:14Z",
          "updatedAt": "2023-03-27T03:06:14Z"
        }
      ]
    },
    {
      "number": 168,
      "id": "I_kwDODddxTs5gn6d9",
      "title": "Is 1 ACK/RTT really robust enough? ",
      "url": "https://github.com/quicwg/ack-frequency/issues/168",
      "state": "CLOSED",
      "author": "gorryfair",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "design",
        "needs-discussion"
      ],
      "body": "Section 8.1 makes recommendations that can be used to determine how many ACKs/RTT is acceptable. Sending 1 ACK/RTT (as discussed) seems sufficient for a perfect return path, but I think this is much less robust than we should be when specifying for an Internet Transport, because using one ACK/RTT can be too fragile for a return that could be congested or more variable than typical.\r\n\r\nThere are cases where this policy has poor outcomes:\r\n1. When the return part of a path experiences loss, a choice of 1 ACK/RTT will directly impact the forward path performance. Sending several ACKs/RTT significantly reduces the probability that the sender window stalls.\r\n2. When a return path experiences appreciable variability (jitter), this will impact RTT estimation. Sending several ACKs/RTT significantly improves the sender RTT estimate with loss/variying RTT.\r\n3. When the capacity on the return is limited and shared, sending several ACKs/RTT helps stability - and mitigates the impact of co-lateral damage from other return traffic.\r\n\r\nA robustness factor of 3 has been used in many IETF protocol design to increase tolerance to loss/jitter. I think recommendation should be a minimum is sending at least 2 ACK/RTT (I'd actually suggest 3-4 per RTT, which we used in our tests.)\r\n",
      "createdAt": "2023-03-13T09:30:09Z",
      "updatedAt": "2023-07-25T22:21:31Z",
      "closedAt": "2023-07-25T22:21:31Z",
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "While I generally agree I think this discussion is out of scope for this document. Below 1 ACK/RTT simply just doesn't work as this is the assumed control loop. However, what is the right number is a different question and may depend also on the deployment scenario.",
          "createdAt": "2023-03-13T17:37:32Z",
          "updatedAt": "2023-03-13T17:37:32Z"
        },
        {
          "author": "gorryfair",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I don't agree. We specified 1 or 2 per packet in the QUIC Spec. We are relaxing that away from what other protocols have traditionally done, and quite simply it's a bad design where sending of data will stall and recover using PTO when there is occasional packet loss in the return direction.",
          "createdAt": "2023-03-13T17:42:44Z",
          "updatedAt": "2023-03-13T17:42:44Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "The intent of this is to be a minimum, not a suggestion of what's optimal.\r\n\r\nI can imagine increasing it to 2, with the rationale that a single ACK may be lost?\r\n\r\nBut in reality, I expect implementations to make choices which are optimal for their requirements and circumstances, so I'm not sure this SHOULD holds much weight in practice.",
          "createdAt": "2023-03-13T17:54:24Z",
          "updatedAt": "2023-03-13T17:54:24Z"
        },
        {
          "author": "gorryfair",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Well, two is a lot more robust than one.\r\nThe point of a SHOULD  is to recommend a safe value that is robust (I think that includes fairly small levels of return path loss), but we ought to advise something that operates correctly. Of course implementers will do what they when someone understands how to tweak it, ...  cwnd>2*flight; bundles an additional ping every RTT;  or whatever...; that is what SHOULD allows.",
          "createdAt": "2023-03-13T18:15:32Z",
          "updatedAt": "2023-03-13T18:15:32Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "We'll discuss this at the QUIC meeting, but I see a few ways to proceed, and there may be other options:\r\n\r\n1) Do nothing\r\n2) Change it to 2\r\n3) Remove the normative statement altogether.\r\n4) Add a RECOMMENDED value or a non-normative statement about 4 being a good value empirically.\r\n\r\nClearly any CWND based congestion controller is going to suffer with less than one ACK per RTT, and they likely need more than 1, particularly if they want to increase CWND.\r\n\r\nI'll also note that we haven't specified which RTT we have in mind.  Min RTT and Smoothed RTT can be very different.  We could say 'round trip', which is more aligned with Smoothed RTT, but not quite the same.",
          "createdAt": "2023-03-26T07:18:30Z",
          "updatedAt": "2023-03-26T07:18:30Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "My preference goes to option 4. I'd also be fine with 3.\r\n\r\n@ianswett \r\n> Clearly any CWND based congestion controller is going to suffer with less than one ACK per RTT, and they likely need more than 1, particularly if they want to increase CWND.\r\n\r\nI tend to think that there is at least one issue other than increasing CWND, when we using ack-frequency with Reno or Cubic.\r\n\r\nConsider the case of path with Wmax being 20 packets. Sender is using Reno.\r\n\r\nWhen the sender observes congestion via ACK or ACK-ECN frame, the congestion controller reduces CWND to 0.5x of the original size, _hoping that the continuous flow of ACKs will allow the sender to resume sending packets after a fraction of RTT_.\r\n\r\nBut if ACKs are sent only once per RTT, the sender cannot resume sending data for 1 RTT-worth of time unless another loss is observed<sup>1</sup>.\r\n\r\nIn this example, Wmax is 20 packets, meaning that the sender reaches Wmax once every 10 RTT-worth of time. \r\n\r\nTherefore, in case of this example, the ratio of potential loss of opportunity to send data is 0.5 / 10 = 5%.\r\n\r\nAs emphasized in the example above, the expectation behind traditional CWND-based congestion controllers (and possibly AQM also) is that the senders will receive continuous flow of ACKs when they reduce CWND, so that they can resume sending data within a fraction of RTT, before the bottleneck queue becomes empty (for too long).\r\n\r\nThat expectation does not hold when acks are sent infrequently.\r\n\r\nI tend to believe that 4 ACKs per RTT (i.e., one ACK per 0.25 RTT) is going to be enough to hide this problem becoming a practical issue (because there are jitters, etc.), but I'd be wary of going 2 per RTT or 1 per RTT, unless we have enough data showing that they do not cause throughput degradation among wide variety of networks and congestion controllers.\r\n\r\n*1: This would be unlikely especially when AQM is deployed at the bottleneck.",
          "createdAt": "2023-03-27T01:31:11Z",
          "updatedAt": "2023-03-27T04:53:31Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "I agree that a lower ACK rate has more impact on window based congestion controllers.  When running experiments years ago, the QoE metrics were about neutral for Cubic at 4 or 8 ACKs per RTT, but the QoE for BBR was actually slightly better.\r\n\r\nOn an editorial note, the paragraph we're focusing on is in 8.3:\r\n\"To limit these consequences of reduced acknowledgement frequency, a sender SHOULD cause a receiver to send an acknowledgement at least once per RTT if there are unacknowledged ack-eliciting packets in flight. A sender can accomplish this by sending an IMMEDIATE_ACK frame once per round-trip time (RTT), or it can set the Ack-Eliciting Threshold and Request Max Ack Delay values to be no more than a congestion window and an estimated RTT, respectively.\"\r\n\r\nBut there's very similar text in 8.1:\r\n\"A sender needs to be responsive to notifications of congestion, such as a packet loss or an ECN CE marking. To enable a sender to respond to potential network congestion in a timely fashion, usually at least one acknowledgement per round trip is needed if there are unacknowledged ack-eliciting packets in flight. A sender can accomplish this by setting the Ack-Eliciting Threshold to a value no larger than the current congestion window or the Request Max Ack Delay value to no more than the estimated round trip. Note that the congestion window particularly but also the RTT are dynamic and therefore might require frequent updates if the selected value are close to these limits. Alternatively, a sender can accomplish this by sending an IMMEDIATE_ACK frame once per round trip, though if the packet containing an IMMEDIATE_ACK is lost, detection of that loss will be delayed by the reordering threshold or requested max ack delay.\"\r\n\r\nI wrote #178 to try to consolidate the text and the normative SHOULD into the Congestion Control section.",
          "createdAt": "2023-03-27T23:23:25Z",
          "updatedAt": "2023-03-27T23:23:25Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Is this issue still current? @gorryfair @ianswett @kazuho \r\n\r\nWe removed the normative language and the text doesn't make a recommendation anymore, it only says that at least 1 ACK per RTT is needed.",
          "createdAt": "2023-07-07T15:07:07Z",
          "updatedAt": "2023-07-07T15:07:07Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I now see that we still have the normative SHOULD, so I think we need to pick this discussion up again.\r\n\r\nMy proposal would be to remove the SHOULD and not use normative language (option 3). I created PR #210 as proposal.\r\n\r\nI'd be fine to add one more sentence that more ACKs might be valuable to encounter loss but not sure if that is really needed in this document.",
          "createdAt": "2023-07-10T15:58:31Z",
          "updatedAt": "2023-07-10T15:58:31Z"
        }
      ]
    },
    {
      "number": 179,
      "id": "I_kwDODddxTs5iJ10u",
      "title": "error code for invalid Request Max Ack Delay values",
      "url": "https://github.com/quicwg/ack-frequency/issues/179",
      "state": "CLOSED",
      "author": "kazuho",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "design",
        "has-pr"
      ],
      "body": "At the moment, the draft says for the Request Max Ack Delay Transport Pramater, that \"receipt of an invalid value MUST be treated as a connection error of type PROTOCOL_VIOLATION.\"\r\n\r\nDuring IETF 116, we discussed https://github.com/quicwg/multipath/issues/157 and agreed that we'd better have a new error code for that case.\r\n\r\nDoes that mean that we probably want a dedicaded error code for this case as well?",
      "createdAt": "2023-03-30T01:03:01Z",
      "updatedAt": "2023-07-10T15:23:24Z",
      "closedAt": "2023-07-10T15:23:24Z",
      "comments": [
        {
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "body": "Error codes are cheap, lets do that",
          "createdAt": "2023-03-30T01:26:34Z",
          "updatedAt": "2023-03-30T01:26:34Z"
        },
        {
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yay for more error codes.",
          "createdAt": "2023-03-30T01:28:10Z",
          "updatedAt": "2023-03-30T01:28:10Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Actually it seems that TRANSPORT_PARAMETER_ERROR is the right error code here.\r\n\r\nFrom RFC9000:\r\n```\r\nTRANSPORT_PARAMETER_ERROR (0x08):\r\nAn endpoint received transport parameters that were badly formatted, included an invalid value, omitted a mandatory transport parameter, included a forbidden transport parameter, or were otherwise in error.\r\n```\r\n\r\nI created PR #207 to just change the error code.",
          "createdAt": "2023-07-07T15:01:21Z",
          "updatedAt": "2023-07-07T15:01:21Z"
        }
      ]
    },
    {
      "number": 181,
      "id": "I_kwDODddxTs5iJ8Ta",
      "title": "Final code point size",
      "url": "https://github.com/quicwg/ack-frequency/issues/181",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "design"
      ],
      "body": "I would like to propose that we choose a value for the final frame codepoint on the ACK_FREQUENCY frame that is from the 0x40-0x3fff range, so that the encoding takes two bytes.  This is not going to be sent often.\r\n\r\nFor IMMEDIATE_ACK, a one byte coding might be useful to ensure that requesting acknowledgment is cheap.",
      "createdAt": "2023-03-30T01:41:57Z",
      "updatedAt": "2023-10-23T16:00:25Z",
      "closedAt": "2023-10-23T16:00:25Z",
      "comments": [
        {
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Related: https://github.com/quicwg/ack-frequency/issues/119",
          "createdAt": "2023-03-30T01:49:36Z",
          "updatedAt": "2023-03-30T01:49:36Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "We closed #199 as we didn't receive any further feedback from the group to change the code point. We can discuss again but it doesn't seem people have strong opinion and at some point we need to decide.",
          "createdAt": "2023-06-07T13:31:56Z",
          "updatedAt": "2023-06-07T13:31:56Z"
        },
        {
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "body": "Discussed in IETF 117, feeling in the room is to use a 1-byte code point for IMMEDIATE_ACK and a 2-byte code point for ACK_FREQUENCY.",
          "createdAt": "2023-07-25T17:53:00Z",
          "updatedAt": "2023-07-25T17:53:00Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "ACK_FREQUENCY already has a 2-byte codepoint, but IMMEDIATE_ACK needs one and both should be registered with IANA.",
          "createdAt": "2023-09-02T21:33:07Z",
          "updatedAt": "2023-09-02T21:33:07Z"
        }
      ]
    },
    {
      "number": 183,
      "id": "I_kwDODddxTs5kw8ot",
      "title": "Examples have diverged from the definitions in out-of-order packets section",
      "url": "https://github.com/quicwg/ack-frequency/issues/183",
      "state": "CLOSED",
      "author": "aochagavia",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "I'm implementing the ACK frequency draft and it looks like the examples have diverged from the definitions in the section titled \"Response to Out-of-Order Packets\".\r\n\r\nWhen looking at the text, the definition of \"Unreported Missing\" says they are \"Packets with packet numbers _between_ the Largest Unacked and Largest Acked that have not yet been received\" (emphasis mine). When looking at the examples, however, it looks like the definition is slightly modified to include _all_ missing packets lower than Largest Unacked (i.e. even when they are lower than Largest Acked).\r\n\r\nBelow I have worked out the provided examples, to show how the mismatch looks in practice. Notice how, in both examples, an ACK is sent in the last line even though there are no unreported missing packets between Largest Unacked and Largest Acked.\r\n\r\nWhich one is correct? The text or the examples?\r\n\r\n### Example 1\r\n\r\n```\r\nreordering_threshold = 3\r\n\r\nlargest_unacked = 0, largest_acked = 0, unreported_missing = [], gap = 0\r\nReceive 1\r\nlargest_unacked = 1, largest_acked = 0, unreported_missing = [], gap = 0\r\nReceive 3\r\nlargest_unacked = 3, largest_acked = 0, unreported_missing = [2], gap = 1\r\nReceive 4\r\nlargest_unacked = 4, largest_acked = 0, unreported_missing = [2], gap = 2\r\nReceive 5\r\nlargest_unacked = 5, largest_acked = 0, unreported_missing = [2], gap = 3\r\n===> Send ACK, because gap >= reordering_threshold\r\nlargest_unacked = 5, largest_acked = 5, unreported_missing = [], gap = 0\r\nReceive 8\r\nlargest_unacked = 8, largest_acked = 5, unreported_missing = [6, 7], gap = 2\r\nReceive 9\r\nlargest_unacked = 9, largest_acked = 5, unreported_missing = [6, 7], gap = 3\r\n===> Send ACK, because gap >= reordering_threshold\r\nlargest_unacked = 9, largest_acked = 9, unreported_missing = [], gap = 0\r\nReceive 10\r\nlargest_unacked = 10, largest_acked = 9, unreported_missing = [], gap = 0\r\n===> The draft says: \"Send ACK because of 7\", which means it considers 7 to be unreported missing!\r\n```\r\n\r\n### Example 2\r\n\r\n```\r\nreordering_threshold = 5\r\n\r\nlargest_unacked = 0, largest_acked = 0, unreported_missing = [], gap = 0\r\nReceive 1\r\nlargest_unacked = 1, largest_acked = 0, unreported_missing = [], gap = 0\r\nReceive 3\r\nlargest_unacked = 3, largest_acked = 0, unreported_missing = [2], gap = 1\r\nReceive 5\r\nlargest_unacked = 5, largest_acked = 0, unreported_missing = [2, 4], gap = 3\r\nReceive 6\r\nlargest_unacked = 6, largest_acked = 0, unreported_missing = [2, 4], gap = 4\r\nReceive 7\r\nlargest_unacked = 7, largest_acked = 0, unreported_missing = [2, 4], gap = 5\r\n===> Send ACK, because gap >= reordering_threshold\r\nlargest_unacked = 7, largest_acked = 7, unreported_missing = [], gap = 0\r\nReceive 8\r\nlargest_unacked = 8, largest_acked = 7, unreported_missing = [], gap = 0\r\nReceive 9\r\nlargest_unacked = 9, largest_acked = 7, unreported_missing = [], gap = 0\r\n===> The draft says: \"Send ACK because of 4\", which means it considers 4 to be unreported missing!\r\n```",
      "createdAt": "2023-05-01T08:25:13Z",
      "updatedAt": "2023-09-18T16:11:09Z",
      "closedAt": "2023-09-18T16:11:08Z",
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thanks for flagging this. It has been challenging to get the text write that's why we included examples. We will revisit the text again and try to get it straight!",
          "createdAt": "2023-06-07T13:29:47Z",
          "updatedAt": "2023-06-07T13:29:47Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "NONE",
          "body": "I think this is somewhat related to #213. ",
          "createdAt": "2023-07-11T05:19:53Z",
          "updatedAt": "2023-07-11T05:19:53Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks for filing this!\r\n\r\nI believe #222, which fixed #213, caused the text to line up with the examples.  @aochagavia  Can you verify that and if so close this issue?",
          "createdAt": "2023-09-09T17:08:23Z",
          "updatedAt": "2023-09-09T17:08:23Z"
        },
        {
          "author": "aochagavia",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thanks for fixing it :)\r\n\r\nI don't have the bandwith right now to check, so if you think the issue is fixed feel free to close the issue. I'll also give a heads up to the folks developing Quinn, so if there is any ambiguity left they'll probably find it.",
          "createdAt": "2023-09-18T15:02:07Z",
          "updatedAt": "2023-09-18T15:02:07Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks!",
          "createdAt": "2023-09-18T16:11:08Z",
          "updatedAt": "2023-09-18T16:11:08Z"
        }
      ]
    },
    {
      "number": 185,
      "id": "I_kwDODddxTs5lw7A_",
      "title": "NiTs in current text",
      "url": "https://github.com/quicwg/ack-frequency/issues/185",
      "state": "CLOSED",
      "author": "gorryfair",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial",
        "has-pr"
      ],
      "body": "I've just done another detailed review of the ACK frequency frame ID,  and have made a PR  #184 with suggested improvements to resolve these NiTs listed below:\r\n\r\n- Avoid general use of impact  when we mean reduce:\r\ncan impact link efficiency\r\n/can reduce link efficiency/\r\n- spelling\r\ndo not elicit an immediate ACKs /s//\r\n- not \u201cas\u201d, i.e. deos not mean in parallel, but \"due \"to this:\r\nas the receiver will/ because\r\n- wording\r\nprocessed thus far/currently processed value\r\n- wording\r\nchances that time-sensitive feedback is delayed as well./likelihood that time-sensitive feedback is also delayed\r\n- Not the existence of the method, but sending a frame:\r\nThe IMMEDIATE_ACK/Sending an IMMEDIATE_ACK\r\nhelps mitigate this/can helps mitigate this\r\n- Insert comma?\r\nare ack-eliciting but\r\n- as is a clarification, suggest brackets?\r\nas any ACK would do\r\n- wording\r\nIn order to/To\r\n- Explain dynamic\r\nNote that the\r\ncongestion window particularly but also the RTT are dynamic and\r\ntherefore might require frequent updates if the selected value are\r\nclose to these limits.\r\n",
      "createdAt": "2023-05-12T09:54:17Z",
      "updatedAt": "2023-07-10T15:15:02Z",
      "closedAt": "2023-07-10T15:15:02Z",
      "comments": []
    },
    {
      "number": 186,
      "id": "I_kwDODddxTs5lydWS",
      "title": "The example did not compile as a table/ascii-art in last ID.",
      "url": "https://github.com/quicwg/ack-frequency/issues/186",
      "state": "CLOSED",
      "author": "gorryfair",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Receive 1 Receive 3 -> 2 Missing Receive 4 -> 2 Missing\r\nReceive 5 -> Send ACK because of 2 Receive 8 -> 6,7 Missing Receive\r\n9 -> Send ACK because of 6, 7 Missing Receive 10 -> Send ACK because of 7\r\n\r\n",
      "createdAt": "2023-05-12T14:22:04Z",
      "updatedAt": "2023-06-07T13:19:01Z",
      "closedAt": "2023-06-07T13:19:01Z",
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This has been fixed in PR #177 but that was after submission... Thanks anyway!",
          "createdAt": "2023-06-07T13:19:01Z",
          "updatedAt": "2023-06-07T13:19:01Z"
        }
      ]
    },
    {
      "number": 187,
      "id": "I_kwDODddxTs5lydpw",
      "title": "Section title for 6.2",
      "url": "https://github.com/quicwg/ack-frequency/issues/187",
      "state": "CLOSED",
      "author": "gorryfair",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial",
        "has-pr"
      ],
      "body": "I'd be much happier if the section title uses the accronym ECN, so that people find this text!\r\n\r\n",
      "createdAt": "2023-05-12T14:22:53Z",
      "updatedAt": "2023-07-10T15:22:46Z",
      "closedAt": "2023-07-10T15:22:46Z",
      "comments": []
    },
    {
      "number": 188,
      "id": "I_kwDODddxTs5lyeV9",
      "title": "6.2 Is the ECN behaviour robust to the various marking patterns?",
      "url": "https://github.com/quicwg/ack-frequency/issues/188",
      "state": "CLOSED",
      "author": "gorryfair",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "no action needed"
      ],
      "body": "ISSUE:\r\nThe algorithm in section 6.2 seems crude.\r\n\r\nI think this method doesn't behave as needed for some ECN marking patterns.\r\n\r\n- Consider two extreme cases:\r\n(1) If the pattern of marking was alternate CE marks the ACK rate seems excessive; - a pointer to section 6.3 (batch processing) may be sufficient to indicate how this ought to be handled?\r\n\r\n(2) if the pattern of marking is continuous REs this seems to under-report, particularly awkward in the case of no reaction to excessive congestion. Is there another way to ensure the rate of ECN feedback is sufficient, such as \u201cor at least an ACK for some specified number of CE-marked packets\u201d? (The accurate ECN draft might suggest what number this ought to be, but in the absence of a number we could perhaps recommend the reordering thershold?)\r\n",
      "createdAt": "2023-05-12T14:24:50Z",
      "updatedAt": "2023-07-26T00:26:48Z",
      "closedAt": "2023-07-26T00:26:48Z",
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This was already discussed in a previous issue (#48) and the current recommendation is inline with AccECN:\r\n\r\nSection 3.2.8:\r\n```\r\nChange-Triggered ACKs:  If an arriving packet increments a different\r\n      byte counter to that incremented by the previous packet, the Data\r\n      Receiver MUST immediately send an ACK\r\n```\r\n\r\nYes, if you have alternate CE marking, you'll ACK every packet but that very unlikely. \r\n\r\nIf you have a long train of CE marks, you should send ACKs normally based on the ACK frequency that is negotiated.",
          "createdAt": "2023-07-07T14:49:16Z",
          "updatedAt": "2023-07-07T14:49:16Z"
        },
        {
          "author": "gorryfair",
          "authorAssociation": "CONTRIBUTOR",
          "body": "If you are confident, please close.",
          "createdAt": "2023-07-11T14:08:53Z",
          "updatedAt": "2023-07-11T14:08:53Z"
        }
      ]
    },
    {
      "number": 189,
      "id": "I_kwDODddxTs5lygaP",
      "title": "Section 8.4: Should not have a SHOULD here.",
      "url": "https://github.com/quicwg/ack-frequency/issues/189",
      "state": "CLOSED",
      "author": "gorryfair",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "needs-discussion",
        "has-pr"
      ],
      "body": " Section 8.4. appears to be written with a certain assumption about the path being similar, which may be a common case, but could be better written to avoid this. Current:\r\n\"An endpoint's congestion controller and RTT estimator are reset upon confirmation of migration (Section 9.4 of [QUIC-TRANSPORT]), which can impact the number of acknowledgements received after migration. An endpoint that has sent an ACK_FREQUENCY frame earlier in the connection SHOULD update and send a new ACK_FREQUENCY frame immediately upon confirmation of connection migration.\r\n\r\n- I think\r\n\r\n",
      "createdAt": "2023-05-12T14:30:28Z",
      "updatedAt": "2023-07-10T15:19:19Z",
      "closedAt": "2023-07-10T15:19:19Z",
      "comments": [
        {
          "author": "gorryfair",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Seems resolved in PR #191 ",
          "createdAt": "2023-07-01T11:22:01Z",
          "updatedAt": "2023-07-01T11:22:01Z"
        }
      ]
    },
    {
      "number": 190,
      "id": "I_kwDODddxTs5lyhhR",
      "title": "Section 8.3: DPLPMTUD can use Ping?",
      "url": "https://github.com/quicwg/ack-frequency/issues/190",
      "state": "CLOSED",
      "author": "gorryfair",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "needs-discussion",
        "has-pr"
      ],
      "body": "Current: \"A sender might use timers to detect loss of PMTU probe packets (Section 14 of [QUIC-TRANSPORT]). A sender SHOULD bundle an IMMEDIATE_ACK frame with any PTMU probes to avoid triggering such timers.\r\n\r\n- Would bundling a PING frame achieve the same result?\r\n- suggest add \u201cor PING frame\u201d, see #192 \r\n",
      "createdAt": "2023-05-12T14:33:34Z",
      "updatedAt": "2023-07-10T15:30:21Z",
      "closedAt": "2023-07-10T15:30:21Z",
      "comments": []
    },
    {
      "number": 194,
      "id": "I_kwDODddxTs5lynoX",
      "title": "Section 8.1: Avoid conflating mechanisms that do multiple things",
      "url": "https://github.com/quicwg/ack-frequency/issues/194",
      "state": "CLOSED",
      "author": "gorryfair",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "needs-discussion",
        "has-pr"
      ],
      "body": "Current: \"A sender can\r\naccomplish this by setting the Ack-Eliciting Threshold to a value no\r\nlarger than the current congestion window or the Request Max Ack\r\nDelay value to no more than the estimated round trip.\"\r\n- I think the \"or\" is just wrong. This is conflating sender flow acknowledgement and the operation CC. i.e., it is not an \u201cOR\u201d  because the sender can be application-limited and does still needs to respond to CC promptly.\r\n- The alternative that follows also needs to cover the application-limited case.\r\n- I think the text is also misleading. It might do as described if it is continuously sending. However, the current design does not always do what is said, it really does depend on what packets are next sent. I\u2019ve seen cases where the sender pauses for various reasons, and in this case, there are no later packets and the state machine would stall, pending some tail-loss detection timeout or RTO.\r\n- See PR #193\r\n ",
      "createdAt": "2023-05-12T14:50:05Z",
      "updatedAt": "2023-07-10T15:20:55Z",
      "closedAt": "2023-07-10T15:20:54Z",
      "comments": []
    },
    {
      "number": 195,
      "id": "I_kwDODddxTs5lypoH",
      "title": "8.1 Congestion Control: Reordering Threshold of 1!",
      "url": "https://github.com/quicwg/ack-frequency/issues/195",
      "state": "CLOSED",
      "author": "gorryfair",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial",
        "needs-discussion",
        "has-pr"
      ],
      "body": "Please also note that a reordering threshold of 1 goes against current reordering robustness guidelines for Internet protocols.\r\n\r\nCurrent: \"In these cases, Reordering Threshold values other than 1 can be harmful, because it delays fast loss detection.\"\r\n- I disagree with the choice of word \u2018harmful\u201d - is the harm to this or sharing flows with which this flow competes -please explain, I think this is problematic but I don't see harm?\r\n- I strongly disagree with the unguarded recommendation to set reordering threshold to 1, this might fine in controlled environments, I assert this is not consensus for use on general Internet paths. \r\n",
      "createdAt": "2023-05-12T14:54:55Z",
      "updatedAt": "2023-07-10T15:23:07Z",
      "closedAt": "2023-07-10T15:23:07Z",
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The \"recommendation\" to set to 1 is in RFC9000. I think for fast loss detection is can be harmful; however we can surely reconsidering the wording. Any proposal?",
          "createdAt": "2023-06-07T13:07:58Z",
          "updatedAt": "2023-06-07T13:07:58Z"
        },
        {
          "author": "gorryfair",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This para is about the performance limitation when the RTT is smaller than the receiver's timer granularity, preventing the receiver from sending an acknowledgment every RTT. Which section of RFC9000 do you refer to?\r\n",
          "createdAt": "2023-06-08T06:39:45Z",
          "updatedAt": "2023-06-08T06:39:45Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "When the RTT is smaller than the receiver's timer granularity, I don't think talk about general Internet usage anymore.",
          "createdAt": "2023-07-07T14:33:42Z",
          "updatedAt": "2023-07-07T14:33:42Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I proposed a small rewording in PR #206. Does that help @gorryfair ?",
          "createdAt": "2023-07-07T14:36:18Z",
          "updatedAt": "2023-07-07T14:36:18Z"
        }
      ]
    },
    {
      "number": 197,
      "id": "I_kwDODddxTs5lyrTc",
      "title": "Could we please make an application-limited subsection?",
      "url": "https://github.com/quicwg/ack-frequency/issues/197",
      "state": "CLOSED",
      "author": "gorryfair",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial",
        "has-pr"
      ],
      "body": "There are enough special cases when the flow is application-limited, that the last two paras of section 8 should be called-out as a separate subsection.\r\n\r\nI suggest that the definition of application-limited for QUIC explicitly includes a sentence on \u201cflow-credit\u201d, since this can have a very significant impact on the flow of packets, and hence when an actual implementation pauses. To be clear, I mean just insert the subsection heading within existing text, See PR #196 ",
      "createdAt": "2023-05-12T14:58:54Z",
      "updatedAt": "2023-07-10T15:21:44Z",
      "closedAt": "2023-07-10T15:21:44Z",
      "comments": []
    },
    {
      "number": 198,
      "id": "I_kwDODddxTs5lysYm",
      "title": "Is \"sending frequently\" specified enough?",
      "url": "https://github.com/quicwg/ack-frequency/issues/198",
      "state": "CLOSED",
      "author": "gorryfair",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "no action needed"
      ],
      "body": "Current: \"sending frequent ACK_FREQUENCY frames to ensure optimal performance.\"\r\n- One could try if blindly following this to send too frequently, would it be nice to add a half sentence that indicates not too often also?\r\n\r\n",
      "createdAt": "2023-05-12T15:01:32Z",
      "updatedAt": "2023-06-08T06:53:05Z",
      "closedAt": "2023-06-08T06:53:05Z",
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This section is about impact on congestion control. I don't think you can send to frequently and thereby break the congestion control. Reducing ack rate to handle constrained links is already mentioned in the intro.",
          "createdAt": "2023-06-07T13:04:29Z",
          "updatedAt": "2023-06-07T13:04:29Z"
        },
        {
          "author": "gorryfair",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This phrase on 'optimal performance' appears to be no longer in the spec.",
          "createdAt": "2023-06-08T06:53:05Z",
          "updatedAt": "2023-06-08T06:53:05Z"
        }
      ]
    },
    {
      "number": 199,
      "id": "I_kwDODddxTs5lytZe",
      "title": "Doesn't receiver acknowledge received packets?",
      "url": "https://github.com/quicwg/ack-frequency/issues/199",
      "state": "CLOSED",
      "author": "gorryfair",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial",
        "has-pr"
      ],
      "body": "Current: \"Until the frame is acknowledged,\" might this be packet?\r\ni.e. \"Until the packet carrying this frame is acknowledged,\"",
      "createdAt": "2023-05-12T15:03:55Z",
      "updatedAt": "2023-07-10T15:22:18Z",
      "closedAt": "2023-07-10T15:22:18Z",
      "comments": []
    },
    {
      "number": 200,
      "id": "I_kwDODddxTs5noTvV",
      "title": "Draft-04 text about reordering threshold is ambiguous",
      "url": "https://github.com/quicwg/ack-frequency/issues/200",
      "state": "CLOSED",
      "author": "huitema",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "editorial",
        "has-pr"
      ],
      "body": "I am implementing draft 04, and I am not sure I understand the \"reordering threshold\" behavior. The draft says\r\n~~~\r\nA variable-length integer that indicates the\r\nmaximum packet reordering before eliciting an immediate ACK.\r\n~~~\r\nI see what that means if the number is 1: any out of order packet triggers an ACK. But if the number is for example 5, this is ambiguous. Is the expectation that:\r\n\r\nA) the receiver counts the number of packets received out of order, and if 5 such packets have been received, then trigger an ACK, or,\r\nB) the receiver check how far behind the packet is. If it receives packet 6 and then packet 4, the gap is less than 5 so no ACK, but if receiving 6 then 1, then the gap is 5 or more, so immediate ACK?\r\n\r\nDiscussion shows that the intent was to modify the text in RFC 9000:\r\n\r\n_In order to assist loss detection at the sender, an endpoint SHOULD generate and send an ACK frame without delay when it receives an ack-eliciting packet either:_\r\n\r\n* _when the received packet has a packet number less than another ack-eliciting packet that has been received, or_\r\n* _when the packet has a packet number larger than the highest-numbered ack-eliciting packet that has been received and there are missing packets between that packet and this packet._\r\n\r\nIf that it indeed the intent, perhaps that should be written down explicitly?\r\n",
      "createdAt": "2023-06-02T18:21:11Z",
      "updatedAt": "2023-07-11T05:16:40Z",
      "closedAt": "2023-07-11T05:16:40Z",
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thanks for raising this issue. This has been a source of confusion before. The intention is B). We thought this became actually more clear with the examples we provided. I guess it still not clear yet...?\r\n\r\nI don't think I understand your proposal thought. Can you make a concrete text proposal what you think we should write?",
          "createdAt": "2023-06-02T18:39:37Z",
          "updatedAt": "2023-06-02T18:39:37Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "NONE",
          "body": "I think this boils down to writing style. The issue is indeed already addressed in section 6.1, but the text in 6.1 presents a concrete algorithm instead of specifying the actual goal. I really dislikes that kind of \"clarification\", because developers may have code constraints that prevent directly copying the suggested code. In that case, they have to deduce the goal from the code, and that's error prone.\r\n\r\nSee PR #201 ",
          "createdAt": "2023-06-02T20:04:43Z",
          "updatedAt": "2023-06-02T20:04:43Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "NONE",
          "body": "Closing this issue as superceded by #208. Opened issue #213 for tracking the remaining corner case.",
          "createdAt": "2023-07-10T19:56:19Z",
          "updatedAt": "2023-07-10T19:56:19Z"
        }
      ]
    },
    {
      "number": 205,
      "id": "I_kwDODddxTs5qWcEX",
      "title": "connection migration / multipath considerations",
      "url": "https://github.com/quicwg/ack-frequency/issues/205",
      "state": "CLOSED",
      "author": "marten-seemann",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "design",
        "no action needed"
      ],
      "body": "I'm wondering if we can make some easy changes to make this extension work better with connection migration, and with multipath, once that RFC ships.\r\n\r\nI believe that the following two changes would be sufficient:\r\n1. Define that ACK_FREQUENCY frames apply per path (i.e. the ACK_FREQUENCY frame with the highest sequence number _on that path_ applies).\r\n2. Make ACK_FREQUENCY a probing frame. This would allow endpoints to bundle an ACK_FREQUENCY frame with the PATH_CHALLENGE / PATH_RESPONSE frame, and have these settings immediately apply to the new path.\r\n\r\n(2) is an optimization that would make switching to a new path more efficient (see #191).\r\n(1) would allow the use of this extension with QUIC multipath, such that each path has different ack frequency settings (it however does not cover the case where ACKs are sent on different paths).",
      "createdAt": "2023-07-01T21:33:17Z",
      "updatedAt": "2023-07-26T00:26:40Z",
      "closedAt": "2023-07-26T00:26:40Z",
      "comments": [
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "To support multipath I think we have to change the definition of the frame to include DCID (or Path ID if https://github.com/quicwg/multipath/issues/214 gets adopted), assuming that we follow the convention of allowing path control signals to be sent on any path (see ACK_MP, PATH_STATUS, etc.).\r\n\r\nAnd I'm not sure if we want to see ack-frequency blocked by QUIC MP finalizing how paths are to be identified.\r\n\r\nMaybe it would be easier to finish ack-frequency, then add a section to Multipath how ack-frequency is modified for Multipath, as that Multipath draft becomes mature?",
          "createdAt": "2023-07-03T01:44:11Z",
          "updatedAt": "2023-07-03T01:44:11Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "We have a corresponding issue in the multipath repo and the reply there was that a new multipath-aware ack-frequency frame should rather be a separate extension. ",
          "createdAt": "2023-07-03T15:53:17Z",
          "updatedAt": "2023-07-03T15:53:17Z"
        }
      ]
    },
    {
      "number": 209,
      "id": "I_kwDODddxTs5rHIlz",
      "title": "Add recommendation to send IMMEDIATE_ACK after app-limited period?",
      "url": "https://github.com/quicwg/ack-frequency/issues/209",
      "state": "CLOSED",
      "author": "mirjak",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "design"
      ],
      "body": "This might be inline with RFC7661.",
      "createdAt": "2023-07-10T15:35:41Z",
      "updatedAt": "2023-09-02T22:24:57Z",
      "closedAt": "2023-09-02T22:24:57Z",
      "comments": [
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm not sure I understand the rationale for this, but I'd be interested to read the specific text you have in mind?",
          "createdAt": "2023-07-10T20:08:59Z",
          "updatedAt": "2023-07-10T20:08:59Z"
        },
        {
          "author": "gorryfair",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Please may I start again:  The issue is only when the pattern of traffic is application limited - i.e.,  in bursts. \r\n\r\nI think it is correct to need at least an ACK each RTT (I'd say several for robustness, but that's not this issue).\r\n\r\nThere is a combination where an ACK can take 2 RTT (even with no loss), when: (1) the ACK response is delayed by one RTT of delay; (2) the sender was idle, and then sends some data (less that the number of packets required to trigger an ACK); in which case the sender postpones the feedback for an additional RTT (2 RTT total before there is any feedback). This is what I think is wrong. \r\n\r\nOne way this could be remedied is with an immediate ACK request after sending the first (or few packets). this generates one additional ACK ~ RTT after the first app-limited data.\r\n\r\n(Note: TCP would have sent an ACK if more than 2 segments of data were received, or the ACK timer fired, which would have updated RTT estimates, etc, so QUIC is now slightly different).\r\n",
          "createdAt": "2023-07-24T20:25:21Z",
          "updatedAt": "2023-07-24T20:25:21Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks Gorry, that makes a lot of sense.  So it's less about getting an ACK for the first packet and more that one wants one relatively soon after resuming sending from idle.  I'd be inclined to discuss this and not make a normative recommendation, but we can discuss tomorrow.",
          "createdAt": "2023-07-25T04:00:51Z",
          "updatedAt": "2023-07-25T04:00:51Z"
        },
        {
          "author": "gorryfair",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Martin T in the meeting also noted that the receiver could have been designed to send an ACK in this case - this seems to all arise because the WG changed the process for handling ACKs and I concur there are many ways to return an ACK when you start sending again. (P.S. The worst case I can think of is when the previous measured RTT was large, and the current RTT is small when all this happens).",
          "createdAt": "2023-07-25T18:12:10Z",
          "updatedAt": "2023-07-25T18:12:10Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "It's also possible to include an ACK_FREQUENCY frame in the first flight after idle that requests sufficiently frequent ACKs.\r\n\r\nIt seems the consensus was converging upon some RECOMMENDED behavior on eliciting and ACK.\r\n\r\nI'm unclear about whether the recommendation to send ACKs quickly if it's been more than a round trip since receiving an ACK were intended to be normative or not, but I'll start with a normative PR including both changes.",
          "createdAt": "2023-07-25T23:00:11Z",
          "updatedAt": "2023-07-25T23:00:11Z"
        }
      ]
    },
    {
      "number": 213,
      "id": "I_kwDODddxTs5rI1C8",
      "title": "Corner case leads to long delay for repeating lost packets.",
      "url": "https://github.com/quicwg/ack-frequency/issues/213",
      "state": "CLOSED",
      "author": "huitema",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "design"
      ],
      "body": "After PR #208, the response to out of order packets is specified as: \r\n_An endpoint that receives an ACK_FREQUENCY frame with a non-zero Reordering\r\nThreshold value SHOULD send an immediate ACK when the gap\r\nbetween the smallest Unreported Missing packet and the Largest Unacked is greater\r\nthan or equal to the Reordering Threshold value. Sending this additional ACK will\r\nreset the `max_ack_delay` timer and `Ack-Eliciting Threshold` counter (as any ACK\r\nwould do)._ \r\n\r\nThis works well in most cases, but there is a corner case in which it does not. For example:\r\n\r\n-     threshold is 2.\r\n-     the endpoint receives packet 1, no ACK yet because delays. Highest unacked is 1.\r\n-     the endpoint receives packet 3, the endpoint send ACK 1, 3, because of ack delay.\r\n-     the endpoint receives packets 4, 5, 6, 7, 8, 9, 10.\r\n\r\nWith the current spec, the endpoint will not need to send an ACK before either the packet count is exceeded or the ack delay has passed. Yet, if the endpoint sent ACK 1,3-10, then the peer would immediately repeat packet 2 because of the number rule, instead of waiting for an ACK delay. I think the issue comes from the definition of the \"missing packets\" as _Packets with packet numbers between the Largest Unacked and Largest Acked that have not yet been received._ In our example, that definition excludes packet number 2, because the Largest Acked is number 3.\r\n\r\nI think that the range for \"missing packets\" should started lower than Largest Acked. It should be something like\r\n~~~\r\nLargestAcked - ReorderingThreshold + 1\r\n~~~\r\nWith that definition, in our example, the endpoint would send an ACK after packet 6, causing the immediate loss detection of packet 2.\r\n",
      "createdAt": "2023-07-10T19:54:02Z",
      "updatedAt": "2023-09-05T08:45:07Z",
      "closedAt": "2023-09-05T08:45:07Z",
      "comments": [
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "I think the intent of the text is to cover this, so it's a matter of clarifying that.",
          "createdAt": "2023-07-24T02:22:11Z",
          "updatedAt": "2023-07-24T02:22:11Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@huitema does PR #219 help?",
          "createdAt": "2023-08-15T16:32:40Z",
          "updatedAt": "2023-08-15T16:32:40Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "I have a better understanding of this issue Christian, thanks for bringing it up.\r\n\r\nThe intent of the algorithm is to immediately send an ACK anytime a packet can be declared newly lost, and you're correct that when an ACK is sent 'too early' due to the delayed ack timer or due to the Ack-Eliciting Threshold, this is missed.",
          "createdAt": "2023-09-04T19:11:41Z",
          "updatedAt": "2023-09-04T19:11:41Z"
        }
      ]
    },
    {
      "number": 214,
      "id": "I_kwDODddxTs5sc6Sg",
      "title": "PTO with IMMEDIATE_ACK if you increase reordering threshold",
      "url": "https://github.com/quicwg/ack-frequency/issues/214",
      "state": "CLOSED",
      "author": "ianswett",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial",
        "has-pr"
      ],
      "body": "Production experience shows that if you substantially increase the reordering threshold, it's important to include an IMMEDIATE_ACK frame to ensure timely loss detection.\r\n\r\nAlternatively, one could skip a large number of packet numbers to cause an immediate ACK, but it makes sense that one or the other is very valuable.",
      "createdAt": "2023-07-25T04:12:14Z",
      "updatedAt": "2023-09-09T16:58:02Z",
      "closedAt": "2023-09-09T16:58:02Z",
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "not sure I understand your point. When you want to sent an IMMEDIATE_ACK? Isn't it the expected behaviour that you get less ACKs if you increase the reordering threshold? However, isn't usually the max ack delay the more important value? or do you have a very specific scenario in mind?",
          "createdAt": "2023-09-01T10:58:55Z",
          "updatedAt": "2023-09-01T10:58:55Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "The use case is when you PTO, to ensure you don't have to wait for the ack delay.\r\n\r\nThis is very similar to #218, except in that case there are packets in flight.",
          "createdAt": "2023-09-04T16:08:23Z",
          "updatedAt": "2023-09-04T16:08:23Z"
        }
      ]
    },
    {
      "number": 215,
      "id": "I_kwDODddxTs5sc63z",
      "title": "Caution against using Min RTT when requesting Max Ack Delay",
      "url": "https://github.com/quicwg/ack-frequency/issues/215",
      "state": "CLOSED",
      "author": "ianswett",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial",
        "has-pr"
      ],
      "body": "Particularly on links with aggregation, the Min RTT can be much less than the Smoothed RTT even without any bufferbloat.  As a result, if one sets the Request Max Ack Delay based on Min RTT, it can cause the number of acknowledgements to be much larger than intended, wasting resources.\r\n\r\nIt's unclear if this requires normative text or not?",
      "createdAt": "2023-07-25T04:15:35Z",
      "updatedAt": "2023-09-09T16:54:51Z",
      "closedAt": "2023-09-09T16:54:51Z",
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I don't think it needs normative language. But maybe a warning. However, is the recommendation to use Smoothed RTT?",
          "createdAt": "2023-09-01T10:55:13Z",
          "updatedAt": "2023-09-01T10:55:13Z"
        }
      ]
    },
    {
      "number": 224,
      "id": "I_kwDODddxTs51X4hR",
      "title": "Receiving != data sender",
      "url": "https://github.com/quicwg/ack-frequency/issues/224",
      "state": "CLOSED",
      "author": "LPardue",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "editorial",
        "has-pr"
      ],
      "body": "From the intro \r\n\r\n> Similarly, receiving and processing UDP packets can also be CPU intensive, and reducing acknowledgement frequency reduces this cost at a data sender.\r\n\r\nI think this should be data receiver?",
      "createdAt": "2023-10-30T20:50:56Z",
      "updatedAt": "2024-03-04T16:39:11Z",
      "closedAt": "2024-03-04T16:39:11Z",
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "No I believe data sender is correct but I guess the scenarios is not really clear here as this is probably only true if data is only flowing in one direction. In this case the data sender keeps sending the same amount of data independent of the ACK frequency, thus the data receiver has always the same load in receiving UDP packets. However, if the data receiver sends less ACK frames the data sender will receive less UDP packets.",
          "createdAt": "2024-01-12T11:07:35Z",
          "updatedAt": "2024-01-12T11:07:35Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I created PR #265. Does it help?",
          "createdAt": "2024-01-12T14:14:25Z",
          "updatedAt": "2024-01-12T14:14:25Z"
        }
      ]
    },
    {
      "number": 225,
      "id": "I_kwDODddxTs51X5p0",
      "title": "Reordering threshold and ECN",
      "url": "https://github.com/quicwg/ack-frequency/issues/225",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "no action needed",
        "question"
      ],
      "body": "> An endpoint SHOULD send an immediate acknowledgement when a packet marked with the ECN Congestion Experienced (CE) [[RFC3168](https://www.ietf.org/archive/id/draft-ietf-quic-ack-frequency-07.html#RFC3168)] codepoint in the IP header is received and the previously received packet was not marked CE.\r\n\r\nWhy is ECN different than loss?  I would have expected ECN markings to be treated exactly like loss from the perspective of things like reordering tolerance, but this implies otherwise.",
      "createdAt": "2023-10-30T20:53:12Z",
      "updatedAt": "2024-02-06T05:53:28Z",
      "closedAt": "2024-02-06T05:53:08Z",
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "For a CE mark you know for sure that there was congestion. If a packet is missing it might be reordered and you anyway have to wait for another couple of packets or time before you can declare a packet lost.",
          "createdAt": "2024-01-12T11:08:51Z",
          "updatedAt": "2024-01-12T11:09:21Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@martinthomson is there anything that we need to do here? Or can we close this issue?",
          "createdAt": "2024-02-05T12:13:38Z",
          "updatedAt": "2024-02-05T12:13:38Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "MEMBER",
          "body": "Some explanatory text would help, but if you don't feel like that is the case, that's OK.",
          "createdAt": "2024-02-06T05:53:27Z",
          "updatedAt": "2024-02-06T05:53:27Z"
        }
      ]
    },
    {
      "number": 226,
      "id": "I_kwDODddxTs51X7xe",
      "title": "Unit error",
      "url": "https://github.com/quicwg/ack-frequency/issues/226",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "has-pr"
      ],
      "body": "> The sender can also improve feedback and robustness to variation in the path RTT by setting the Ack-Eliciting Threshold to a value no larger than the current congestion window.\r\n\r\nThe Ack-Eliciting Threshold is measured in packets.  The congestion window is measured in bytes.  If this guidance were followed without proper conversion (something that probably needs to be explained), things might go poorly.",
      "createdAt": "2023-10-30T20:57:27Z",
      "updatedAt": "2024-03-01T11:05:43Z",
      "closedAt": "2024-03-01T11:05:43Z",
      "comments": []
    },
    {
      "number": 227,
      "id": "I_kwDODddxTs51X8QA",
      "title": "Don't recommend sending one IMMEDIATE_ACK per RTT",
      "url": "https://github.com/quicwg/ack-frequency/issues/227",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "has-pr"
      ],
      "body": "> Alternatively, a sender can accomplish this by sending an IMMEDIATE_ACK frame once each round trip time, although if the packet containing an IMMEDIATE_ACK is lost, detection of that loss will be delayed by the reordering threshold or requested max ack delay.\r\n\r\nPlease don't suggest this.  Acknowledging once per RTT is something that a receiver should be expected to manage on their own.",
      "createdAt": "2023-10-30T20:58:27Z",
      "updatedAt": "2024-03-04T20:53:08Z",
      "closedAt": "2024-03-04T20:53:08Z",
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This is not a recommendation but explaining the possibilities in case the receiver does not manage accordingly. This was discussed quite a lot and we ended up removing normative language (see https://github.com/quicwg/ack-frequency/pull/211) in order to not have it recommended. I don't think we should open this issue again.",
          "createdAt": "2024-01-12T11:18:58Z",
          "updatedAt": "2024-01-12T11:18:58Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@martinthomson is there anything we need to do here or can we close this issue?",
          "createdAt": "2024-02-05T12:14:29Z",
          "updatedAt": "2024-02-05T12:14:29Z"
        },
        {
          "author": "martinthomson",
          "authorAssociation": "MEMBER",
          "body": "It reads as a suggestion to me.  Consider rewording.",
          "createdAt": "2024-02-06T05:54:06Z",
          "updatedAt": "2024-02-06T05:54:06Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@martinthomson I created PR #278. Is that any better?",
          "createdAt": "2024-03-01T12:17:55Z",
          "updatedAt": "2024-03-01T12:17:55Z"
        }
      ]
    },
    {
      "number": 228,
      "id": "I_kwDODddxTs51X9qM",
      "title": "How frequently should ACK_FREQUENCY be sent?",
      "url": "https://github.com/quicwg/ack-frequency/issues/228",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "design",
        "needs-discussion",
        "has-pr"
      ],
      "body": "> Note that the congestion window and the RTT change over the lifetime of a connection and therefore might require sending frequent ACK_FREQUENCY frames to ensure optimal performance.\r\n\r\nThis might suggest a posture that is harmful.  If an implementation sends the frame every time it detects a change in RTT, that would be wasteful in the extreme.  I would have thought that there is some function whereby you send updates at some multiple of the RTT but inversely proportional in some way to the amount that the RTT has changed since your last update.",
      "createdAt": "2023-10-30T21:01:15Z",
      "updatedAt": "2024-03-04T21:05:01Z",
      "closedAt": "2024-03-04T21:05:00Z",
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "There was a similar question earlier in issue #198. There wasn't much discussion and maybe this got actually never fully resolved but I guess the question is what would be the right guidance here? Usually the cwnd should not change more than once per RTT. If you send one ACK_FREQUENCY frame per RTT, that's probably unnecessarily but would it hurt?",
          "createdAt": "2024-01-12T13:26:59Z",
          "updatedAt": "2024-01-12T13:26:59Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I guess you are right that the sentence above could be interpreted as you need to change an update on every change of cwnd or RTT. That was of course not the intention.\r\n\r\nI added some explanation in PR #275, however, not sure if  that text actually says much...?  ",
          "createdAt": "2024-02-05T12:58:23Z",
          "updatedAt": "2024-02-05T12:58:23Z"
        }
      ]
    },
    {
      "number": 229,
      "id": "I_kwDODddxTs51X9uF",
      "title": "The extension is a little weakly defined",
      "url": "https://github.com/quicwg/ack-frequency/issues/229",
      "state": "CLOSED",
      "author": "LPardue",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "editorial",
        "has-pr"
      ],
      "body": "This is an editorial matter and subjective. The actual extension gubbins are fine, I just find that the references to the concept of the extenstion is pretty weak.\r\n\r\nFor instance, the introduction is literally 1 sentence and says just \"This document describes a QUIC extension for an endpoint to control its peer's delaying of acknowledgements.\". It would be nicer to expand this a little bit to let the reader in on what type of extension we're talking about - for example, datagrams mentions there are frame types https://datatracker.ietf.org/doc/html/rfc9221#section-1 but I suspect that this draft has a little more nuance.\r\n\r\n",
      "createdAt": "2023-10-30T21:01:23Z",
      "updatedAt": "2024-03-01T11:09:08Z",
      "closedAt": "2024-03-01T11:09:08Z",
      "comments": []
    },
    {
      "number": 230,
      "id": "I_kwDODddxTs51X-uK",
      "title": "Missing forward ref to ACK_FREQUENCY frame",
      "url": "https://github.com/quicwg/ack-frequency/issues/230",
      "state": "CLOSED",
      "author": "LPardue",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "editorial",
        "has-pr"
      ],
      "body": "Section 3 talks about the TP and mentions the frame defined later in the doc. A reference there would help.",
      "createdAt": "2023-10-30T21:03:17Z",
      "updatedAt": "2024-03-01T11:06:15Z",
      "closedAt": "2024-03-01T11:06:15Z",
      "comments": []
    },
    {
      "number": 231,
      "id": "I_kwDODddxTs51X_nT",
      "title": "s/Section ((?:\\d+\\.)*\\d+) of {{/{{Section $1 of /g",
      "url": "https://github.com/quicwg/ack-frequency/issues/231",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "editorial",
        "has-pr"
      ],
      "body": "There are a few section references that could be hyperlinked properly with this simple change.",
      "createdAt": "2023-10-30T21:05:09Z",
      "updatedAt": "2024-02-01T14:43:24Z",
      "closedAt": "2024-02-01T14:43:24Z",
      "comments": []
    },
    {
      "number": 232,
      "id": "I_kwDODddxTs51YAp7",
      "title": "What is the maximum value of min_ack_delay?",
      "url": "https://github.com/quicwg/ack-frequency/issues/232",
      "state": "CLOSED",
      "author": "LPardue",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "no action needed",
        "question"
      ],
      "body": "RFC 9000 defines a maximum for max_ack_delay and what to do if that value is exceeded. The units are different for min_ack_delay, is there no maximum (except the largest number a varint can hold)? \r\n\r\nThe case that might catch people out is where the max_ack_delay is omitted in the TPs and the default is assumed https://www.rfc-editor.org/rfc/rfc9000#section-18.2-4.28.1. Maybe worth a note?",
      "createdAt": "2023-10-30T21:08:07Z",
      "updatedAt": "2024-03-04T14:44:50Z",
      "closedAt": "2024-03-04T14:44:50Z",
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The maximum is given by max_ack_delay.\r\n\r\n`An endpoint's min_ack_delay MUST NOT be greater than its max_ack_delay.`\r\n\r\nThere is no default value because this must be set to negotiate the extension.\r\n\r\nNot sure we need to add anything else? @LPardue ",
          "createdAt": "2024-02-05T13:07:15Z",
          "updatedAt": "2024-02-05T13:07:15Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@LPardue any additional comments?",
          "createdAt": "2024-03-01T12:19:36Z",
          "updatedAt": "2024-03-01T12:19:36Z"
        },
        {
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "body": "The maximums are linked, and being too declarative of limits might be painting ourselves into a corner. #282 addresses the matters as much as I care, so let's close this one",
          "createdAt": "2024-03-04T14:44:50Z",
          "updatedAt": "2024-03-04T14:44:50Z"
        }
      ]
    },
    {
      "number": 233,
      "id": "I_kwDODddxTs51YBAV",
      "title": "Consistency in presentation",
      "url": "https://github.com/quicwg/ack-frequency/issues/233",
      "state": "CLOSED",
      "author": "martinthomson",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "editorial",
        "has-pr"
      ],
      "body": "There is some inconsistency in the use of \"\\`\" throughout.  max_ack_delay is sometimes bare, sometimes `max_ack_delay` and even 'max_ack_delay'.  The same applies to the fields in the frames, which sometimes are referred to in Title Case without decoration and other times use `Title Case`.  Consistency in these matters is important.",
      "createdAt": "2023-10-30T21:09:11Z",
      "updatedAt": "2024-02-01T16:04:06Z",
      "closedAt": "2024-02-01T16:04:05Z",
      "comments": []
    },
    {
      "number": 234,
      "id": "I_kwDODddxTs51YBuC",
      "title": "Receiving *and* sending the TP is required for the extension to be in use",
      "url": "https://github.com/quicwg/ack-frequency/issues/234",
      "state": "CLOSED",
      "author": "LPardue",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "editorial",
        "no action needed",
        "question"
      ],
      "body": "The spec states\r\n\r\n> Receiving a min_ack_delay transport parameter indicates that the peer might send ACK_FREQUENCY frames in the future.\r\n\r\nI find this a little ambiguous. It's probably clearer to state that when both endpoints send and receive the TP, either might send an ACK_FREQUENCY in the future.",
      "createdAt": "2023-10-30T21:11:24Z",
      "updatedAt": "2024-03-01T12:06:24Z",
      "closedAt": "2024-03-01T12:06:24Z",
      "comments": [
        {
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "body": "actualyl the paragraph above states\r\n\r\n> The min_ack_delay transport parameter is a unilateral indication of support for receiving ACK_FREQUENCY frames. If an endpoint sends the transport parameter, the peer is allowed to send ACK_FREQUENCY frames independent of whether it also sends the min_ack_delay transport parameter or not.\r\n\r\nSo sending and receiving isn't required I guess but then the sentence I highlight in the OP is worded in a rather confusing way.",
          "createdAt": "2023-10-30T21:13:25Z",
          "updatedAt": "2023-10-30T21:13:25Z"
        },
        {
          "author": "gloinul",
          "authorAssociation": "NONE",
          "body": "I also think the first reference sentence is strange, it needs to be clarified what is meant to imply. ",
          "createdAt": "2023-11-02T13:29:18Z",
          "updatedAt": "2023-11-02T13:29:18Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think these sentences are actually contradicting about who is allowed to send new frames. I think only the second sentences make sense: if I indicate that I understand these new frames, you can sent them to me. However, if you don't give me an indicating that you understand them as well (even if you do), I can't sent them to you. The first sentence seems to say it the other way around and we need to fix that.\r\n\r\n\r\n@ianswett can you confirm that this is the intended behaviour?",
          "createdAt": "2024-01-12T11:42:33Z",
          "updatedAt": "2024-01-12T11:42:33Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Actually I believe the first sentence was removed already; I couldn't track down exactly when it was removed. But I guess this closes this issue? @LPardue ",
          "createdAt": "2024-02-05T13:15:44Z",
          "updatedAt": "2024-02-05T13:15:44Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "already addressed by #252",
          "createdAt": "2024-03-01T12:06:24Z",
          "updatedAt": "2024-03-01T12:06:24Z"
        }
      ]
    },
    {
      "number": 235,
      "id": "I_kwDODddxTs51YEHs",
      "title": "What is the max of Request Max Ack Delay field in ACK_FREQUENCY frame",
      "url": "https://github.com/quicwg/ack-frequency/issues/235",
      "state": "CLOSED",
      "author": "LPardue",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "design",
        "has-pr"
      ],
      "body": "Given that the max_ack_delay TP is limited to 2^14 per https://www.rfc-editor.org/rfc/rfc9000#section-18.2-4.28.1, we probably have to state the maximum value here too.\r\n\r\nOr is the intention that this extension permits a larger value than in RFC 9000?",
      "createdAt": "2023-10-30T21:18:17Z",
      "updatedAt": "2024-03-04T18:19:01Z",
      "closedAt": "2024-03-04T18:19:01Z",
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I added a note in Pr #276 but not more. I guess if a larger value is sent it is simply ignored. But do we need to state that explicitly? Or do we even want to threat that as an error?",
          "createdAt": "2024-02-05T13:21:09Z",
          "updatedAt": "2024-02-05T13:21:09Z"
        },
        {
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Please don't ignore invalid values. This is easily detectable and should be a connection error.",
          "createdAt": "2024-02-05T14:00:49Z",
          "updatedAt": "2024-02-05T14:00:49Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Not sure if that really is a connection error. Effectively we don't restrict the value you can sent, however, if you sent a too large value the client will anyway use a smaller one (bounded by the definition of max_ack_delay in RFC9000). After all sending this value can not force the client to do anything, therefore it's really more a request or nice ask. However, if we restrict the max value here to align with max_ack_delay that means you also have to change this extension if you ever want to change the limit for max_ack_delay. That seems to tie things more closely together than needed.",
          "createdAt": "2024-02-05T16:22:03Z",
          "updatedAt": "2024-02-05T16:22:03Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I just merged PR #276 to address this issue at least partially.\r\n\r\n@marten-seemann stated on that PR the follwowing:\r\n\r\n> I think https://github.com/quicwg/ack-frequency/issues/235 would be better addressed by defining the maximum value for the Requested Max Ack Delay (1000*2^14, if I understand correctly), instead of reiterating what RFC 9000 defines.\r\n\r\nPlease provide further comments if this issue needs to be addresses more.",
          "createdAt": "2024-03-01T12:00:49Z",
          "updatedAt": "2024-03-01T12:00:49Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Actually the draft already says to treat this as an error:\r\n\r\n\"Receipt of an invalid value MUST be treated as a connection error of type TRANSPORT_PARAMETER_ERROR.\"",
          "createdAt": "2024-03-04T14:52:56Z",
          "updatedAt": "2024-03-04T14:52:56Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "After discussion with @LPardue we recognised that this is actually the wrong error type. the right error type would be FRAME_ENCODING_ERROR.\r\n\r\nAlso the draft currently says \"endpoint MUST update its max_ack_delay\" however, we now says in the draft that the ACK_FREQUENCY frame is a request (that can not be enforced). Therefore, a MUST seem not appropriate here. \r\n\r\n\r\nI created PR #284 to address both. Please review!",
          "createdAt": "2024-03-04T16:35:54Z",
          "updatedAt": "2024-03-04T16:35:54Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "#284 merged. I case this need further wg discussion we can always create another PR on top of this.",
          "createdAt": "2024-03-04T18:19:01Z",
          "updatedAt": "2024-03-04T18:19:01Z"
        }
      ]
    },
    {
      "number": 236,
      "id": "I_kwDODddxTs51YFv3",
      "title": "Does Sequence Number start at 0?",
      "url": "https://github.com/quicwg/ack-frequency/issues/236",
      "state": "CLOSED",
      "author": "LPardue",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "The only requirement seems to be that the number is monotonically increasing. Maybe worth a statement to avoid people making assumptions.",
      "createdAt": "2023-10-30T21:23:30Z",
      "updatedAt": "2023-12-11T02:43:28Z",
      "closedAt": "2023-12-11T02:43:28Z",
      "comments": [
        {
          "author": "gloinul",
          "authorAssociation": "NONE",
          "body": "Also the fact that that it is monotonically increasing should be written in the field definition and not in the last paragraph. But agree on that requiring start of 0 here makes sense. ",
          "createdAt": "2023-11-02T13:39:42Z",
          "updatedAt": "2023-11-02T13:39:42Z"
        },
        {
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "body": "It might be fun to start with a higher value, just to keep things GREASEd from time to time. Starting at 0 is not enforceable on the receiver side anyway, since frames might be lost. So we're in exactly the same situation as with QUIC packet numbers.",
          "createdAt": "2023-11-02T14:37:49Z",
          "updatedAt": "2023-11-02T14:37:49Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "I agree we can't require it start at 0 because it's not enforceable, and there's no reason to.",
          "createdAt": "2023-11-30T15:50:41Z",
          "updatedAt": "2023-11-30T15:50:41Z"
        }
      ]
    },
    {
      "number": 237,
      "id": "I_kwDODddxTs51YM7L",
      "title": "Is use of IMMEDIATE_ACK gated by min_ack_delay TP?",
      "url": "https://github.com/quicwg/ack-frequency/issues/237",
      "state": "CLOSED",
      "author": "LPardue",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "editorial",
        "has-pr"
      ],
      "body": "Section 3 decribes the new TP and how endpoints that send it might then expect to receive ACK_FREQUENCY. I presume the same applies to IMMEDIATE_ACK. If so, it should be stated there too.",
      "createdAt": "2023-10-30T21:48:09Z",
      "updatedAt": "2024-02-01T16:05:11Z",
      "closedAt": "2024-02-01T16:05:11Z",
      "comments": []
    },
    {
      "number": 238,
      "id": "I_kwDODddxTs51YN4K",
      "title": "Can IMMEDIATE_ACK be sent in 0-RTT?",
      "url": "https://github.com/quicwg/ack-frequency/issues/238",
      "state": "CLOSED",
      "author": "LPardue",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "design",
        "has-pr"
      ],
      "body": "This seems like it might be important because you're not allowed to send an ACK_FREQUENCY frame to tune any parameters and the remembered values might not be suited for the new connection?",
      "createdAt": "2023-10-30T21:50:59Z",
      "updatedAt": "2024-02-01T16:04:53Z",
      "closedAt": "2024-02-01T16:04:53Z",
      "comments": [
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "Today the text is quite clear:\r\n\r\n> Endpoints MUST NOT remember the value of the min_ack_delay transport parameter\r\n> they received for use in a subsequent connection. Consequently, ACK_FREQUENCY\r\n> frames cannot be sent in 0-RTT packets, as per {{Section 7.4.1 of QUIC-TRANSPORT}}.\r\n\r\nPart of the reason for not persisting the min_ack_delay TP is because everytime it changes, 0-RTT would fail.\r\n\r\nI don't have a strong opinion on this, but it is a design change if we decided to allow it.  Are you proposing we allow it in 0-RTT?",
          "createdAt": "2023-11-26T23:44:54Z",
          "updatedAt": "2023-11-26T23:44:54Z"
        },
        {
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "body": "The spec is clear about ACK_FREQUENCY, but it doesn't say anything about IMMEDIATE_ACK. So I think we just want to say MUST NOT for both.",
          "createdAt": "2023-11-27T01:01:09Z",
          "updatedAt": "2023-11-27T01:01:09Z"
        }
      ]
    },
    {
      "number": 239,
      "id": "I_kwDODddxTs51YOv9",
      "title": "ACK_FRAME isn't a thing",
      "url": "https://github.com/quicwg/ack-frequency/issues/239",
      "state": "CLOSED",
      "author": "LPardue",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "Section 6.3 mentions \r\n\r\n> If the threshold is smaller, an ACK_FRAME is sent before the packet can be declared lost based on the packet threshold.\r\n\r\npresumably this is just an ACK frame.",
      "createdAt": "2023-10-30T21:54:04Z",
      "updatedAt": "2023-11-30T15:52:50Z",
      "closedAt": "2023-11-30T15:52:50Z",
      "comments": []
    },
    {
      "number": 240,
      "id": "I_kwDODddxTs51YQUI",
      "title": "Are ACK_FREQUENCY or IMMEDIATE_ACK congestion controlled?",
      "url": "https://github.com/quicwg/ack-frequency/issues/240",
      "state": "CLOSED",
      "author": "LPardue",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "[RFC 9000 Section 19.21](https://www.rfc-editor.org/rfc/rfc9000#section-19.21-4) requires that \r\n\r\n> Extension frames MUST be congestion controlled and MUST cause an ACK frame to be sent. The exception is extension frames that replace or supplement the ACK frame. Extension frames are not included in flow control unless specified in the extension.\r\n\r\nI think we can put both of these in the non-congestion controlled bucket because they supplement ACK but if so, this document needs to be explicit about it.\r\n\r\n",
      "createdAt": "2023-10-30T22:00:06Z",
      "updatedAt": "2023-11-26T23:00:52Z",
      "closedAt": "2023-11-26T23:00:52Z",
      "comments": [
        {
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I see IMMEDIATE_ACK as a PING frame on steroids: not only does it ping, but it also elicits an immediate acknowledgement. As such, I'd expect it to be congestion controlled.\r\n\r\nAs for the ACK_FREQUENCY frame, I'd also prefer it to be congestion controlled. My understanding of 19.21 is that the intention was to not congestion control frames that replace the ACK frame (e.g. an ACK frame with timestamps) or supplement the ACK frame (e.g. an extension that, if negotiated, adds fields to the RFC 9000 ACK frame).",
          "createdAt": "2023-11-01T21:31:55Z",
          "updatedAt": "2023-11-01T21:31:55Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "Agreed, I would like these to be congestion controlled.  Dealing with things that aren't congestion controlled creates the potential for problems.\r\n",
          "createdAt": "2023-11-02T17:50:24Z",
          "updatedAt": "2023-11-02T17:50:24Z"
        }
      ]
    },
    {
      "number": 241,
      "id": "I_kwDODddxTs51YQxw",
      "title": "Section 7 - what frame?",
      "url": "https://github.com/quicwg/ack-frequency/issues/241",
      "state": "CLOSED",
      "author": "LPardue",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "editorial",
        "has-pr"
      ],
      "body": "the draft states from the beginning of section 7\r\n\r\n> On sending an update to the peer's max_ack_delay, an endpoint can use this new value in later computations of its Probe Timeout (PTO) period; see [Section 5.2.1](https://rfc-editor.org/rfc/rfc9002#section-5.2.1) of [[QUIC-RECOVERY](https://www.ietf.org/archive/id/draft-ietf-quic-ack-frequency-07.html#QUIC-RECOVERY)].\r\n\r\n> Until the packet carrying this frame is acknowledged, the endpoint MUST use the greater of the current max_ack_delay and the value that is in flight when computing the PTO period. Doing so avoids spurious PTOs that can be caused by an update that decreases the peer's max_ack_delay.\r\n\r\nSince there are 2 frames defined by the draft, it is ambigious what \"this frame\" is ",
      "createdAt": "2023-10-30T22:01:48Z",
      "updatedAt": "2023-12-11T02:45:18Z",
      "closedAt": "2023-12-11T02:45:18Z",
      "comments": []
    },
    {
      "number": 242,
      "id": "I_kwDODddxTs51YRYq",
      "title": "can can",
      "url": "https://github.com/quicwg/ack-frequency/issues/242",
      "state": "CLOSED",
      "author": "LPardue",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "duped word\r\n\r\n> In these cases, Reordering Threshold values other than 1 can can delay loss detection more than an RTT.",
      "createdAt": "2023-10-30T22:04:08Z",
      "updatedAt": "2023-11-26T21:49:17Z",
      "closedAt": "2023-11-26T21:49:17Z",
      "comments": []
    },
    {
      "number": 243,
      "id": "I_kwDODddxTs51YTsp",
      "title": "Consider referencing RFC 9000 S 21",
      "url": "https://github.com/quicwg/ack-frequency/issues/243",
      "state": "CLOSED",
      "author": "LPardue",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [
        "has-pr"
      ],
      "body": "In your security considerations, consider referencing RFC 9000's and in particular https://www.rfc-editor.org/rfc/rfc9000#section-21.9. \r\n\r\nI'm thinking of the additional workload that an IMMEDIATE_ACK _could_ cause if the recipient decided to queue up work, and the recommendations that https://www.rfc-editor.org/rfc/rfc9000#section-21.9-4 makes wrt giving up on such naughty clients.",
      "createdAt": "2023-10-30T22:12:51Z",
      "updatedAt": "2024-03-01T12:03:12Z",
      "closedAt": "2024-03-01T12:03:11Z",
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "merged #268",
          "createdAt": "2024-03-01T12:03:11Z",
          "updatedAt": "2024-03-01T12:03:11Z"
        }
      ]
    },
    {
      "number": 244,
      "id": "I_kwDODddxTs51firx",
      "title": "consider encoding a duration to not acknowledge every CE-marked packet",
      "url": "https://github.com/quicwg/ack-frequency/issues/244",
      "state": "CLOSED",
      "author": "marten-seemann",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "design",
        "needs-discussion"
      ],
      "body": "We decided to remove \"Ignore CE\" in #118, and I'm suggesting to consider reversing that decision.\r\n\r\nWith new congestion control algorithms like Prague / L4S that send ECN marks much more frequently than classical ECN, it seems like there's the possibility that the \"Ignore CE\" field might become useful than we currently anticipate. For the calculation of its alpha value, Prague currently averages the fraction of ECN-marked packets over one RTT before acting on them, and while that's not ideal (see my [recent email thread](https://mailarchive.ietf.org/arch/msg/iccrg/dX4-pc8f0A4dVMEYWEf8qTAgEF8/) on the ICCRG list). While in this case it's still useful to receive the ECN in a timely manner, an immediate acknowledgement of CE-marked packets might not be that useful in all cases. To be clear, I don't have a specific use case for it at this point, but I'm worried that we're about to publish an RFC and might regret not having added this field soon.\r\n\r\nImplementation-wise, this should be trivial to support on both on the sender and the receiver side. For the draft, we need to be careful how we recommend usage of this bit (see #107 for example). Maybe we can make our life easy by recommending that implementations never set this flag, unless in experiments. Future documents could then define how it's actually safe to use it.",
      "createdAt": "2023-10-31T19:54:46Z",
      "updatedAt": "2024-02-05T13:48:47Z",
      "closedAt": "2024-02-05T13:48:47Z",
      "comments": [
        {
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "body": "An alternative would be to replace this boolean flag by some richer signaling, e.g. to only send an ACK for the first CE-marked packet, but then suppress triggering of immediate ACKs for subsequent CE-marked packets for a while.",
          "createdAt": "2023-11-01T06:00:04Z",
          "updatedAt": "2023-11-01T06:00:04Z"
        },
        {
          "author": "moeller0",
          "authorAssociation": "NONE",
          "body": "Nit-pick: it is not that L4S necessarily sends ECN marks more frequently than rfc3168 does... The AQM will send CEs based on the congestion level and hence depending on load L4S and rfc3168 might elicit a similar amount of CE marks. An rfc3168 receiver will than reflect that signal as a TCP ECE flag until the sender acknowledged this with an CWR, so the ECE will stay \"up\" for at least a full RTT on all ACK packets... What L4S does is to put more value on the CE/ECT(1) and ECT(1)/CE transitions, but the actual marking frequency can be quite similar.\r\nL4S needs to average, simply because it needs to reconstruct the congestion signal, which was encoded as marking probability (equivalent with marking frequency) and to extract that from a 1-bit/packet stream simply takes time, as you certainly know. Averaging/low pass filtering however takes time adding delay to the congestion response. But is the fact the congestion signal is already delayed a good justification for delaying it any further?\r\n\r\n",
          "createdAt": "2023-11-01T07:10:49Z",
          "updatedAt": "2023-11-01T07:10:49Z"
        },
        {
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> But is the fact the congestion signal is already delayed a good justification for delaying it any further?\r\n\r\nIt depends. If you know that the signal won't be acted upon for another RTT, it makes little sense to send an extra packet, potentially only containing that one ACK frame, just for that. It might make more sense to wait a few more ms / for a few more packets to arrive before sending that ACK. That said, if I understand [section 2.4.2 of the Prague draft](https://www.ietf.org/archive/id/draft-briscoe-iccrg-prague-congestion-control-03.html#section-2.4.2) correctly, an ECN signal would be acted upon immediately, just with an outdated alpha value, so there seems value in immediately acknowledging that packet.\r\n\r\nIf L4S would lead to a number of consecutive packets being ECN marked though (more so than RFC 3168), as was claimed on the ICCRG list, this might be an important use case for a more fine-grained control on when an ECN marking should elicit an ACK. For example, I could see how acknowledging the first CE after a while right away would be valuable, but then delaying acknowledgements for subsequent CE marks for a certain time. This could be achieved by encoding a duration (similar to the Max Ack Delay field) in the ACK_FREQUENCY frame.",
          "createdAt": "2023-11-01T08:52:25Z",
          "updatedAt": "2023-11-01T08:52:25Z"
        },
        {
          "author": "moeller0",
          "authorAssociation": "NONE",
          "body": "In that case however, stretches of CE, one can simply aggregate these, an ACK containing only CE marked packets should not be ambiguous at the receiver side (even if delayed a bit). But that really just moves the problematic pattern to 50% CE marking, with every other packet marked (which however is not a likely outcome for a true probability encoder, we can expect some more lumping and 50% marking rate probably should be rare...).",
          "createdAt": "2023-11-01T08:56:14Z",
          "updatedAt": "2023-11-01T08:56:14Z"
        },
        {
          "author": "IngJohEricsson",
          "authorAssociation": "NONE",
          "body": "My understanding is that it is important that the first CE after a stretch of non-CE (define number and/or time) should be ACKed immediately. After that, subsequent ACKs can be delayed, regardless packets are CE marked or not.",
          "createdAt": "2023-11-01T08:59:07Z",
          "updatedAt": "2023-11-01T08:59:33Z"
        },
        {
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@moeller0 This discussion is not about how to encode CE markings. That's defined by the ACK frame in RFC 9000, and it does contain cumulative counts. The problem is that every CE-marked packet would be acknowledged separately, since section 13.2.1 says:\r\n> Similarly, packets marked with the ECN Congestion Experienced (CE) codepoint in the IP header SHOULD be acknowledged immediately, to reduce the peer's response time to congestion events.\r\n\r\nNow this might or might not be the input that your congestion controller needs. The purpose of the ACK_FREQUENCY is to give the sender a way to tune how ACKs are sent, such that you can get the right inputs for your congestion controller.\r\n\r\n> My understanding is that it is important that the first CE after a stretch of non-CE (define number and/or time) should be ACKed immediately. After that, subsequent ACKs can be delayed, regardless packets are CE marked or not.\r\n\r\n@IngJohEricsson Then encoding a time as I suggested in https://github.com/quicwg/ack-frequency/issues/244#issuecomment-1788616121 would work. I'll update the title of this issue.",
          "createdAt": "2023-11-01T09:02:32Z",
          "updatedAt": "2023-11-01T09:02:46Z"
        },
        {
          "author": "IngJohEricsson",
          "authorAssociation": "NONE",
          "body": "Yes. Perhaps a time is a good idea, After all, the ECN feedback fields in the ACK frames can differ quite a lot numerically without wrap-around issues\r\n ",
          "createdAt": "2023-11-01T12:47:34Z",
          "updatedAt": "2023-11-01T12:47:34Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "There is text in this draft saying:\r\n\r\n\r\n> An endpoint SHOULD send an immediate acknowledgement when a packet marked with the ECN Congestion Experienced (CE) {{?RFC3168}} codepoint in the IP header is received and the previously received packet was not marked CE.",
          "createdAt": "2023-11-03T09:42:51Z",
          "updatedAt": "2023-11-03T09:42:51Z"
        },
        {
          "author": "moeller0",
          "authorAssociation": "NONE",
          "body": "For rfc3168 (barring a drop of that ACK) that will be enough, however for L4S maybe not, given that steady-state rate seems to require 2 CE marks per RTT, so getting two CE's in sequence likely is a magnitude signal worth transmitting ASAP, no?\r\n\r\nIn L4S for better or worse the \"congestion magnitude\" that the control loop responds to proportionally is a rate coded signal, so the sender needs to have access to the CE marking frequency ideally in a timely fashion. If the response to each individual CE is small, than delaying the CE marks seems not be the best approach.\r\n\r\n",
          "createdAt": "2023-11-03T09:49:49Z",
          "updatedAt": "2023-11-03T09:49:49Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "I discussed this with @marten-seemann and my preference is to save this for a potential v2 of this draft.  We have little experience with ECN deployment in QUIC today and L4S style feedback is also relatively new and congestion controllers are still evolving about how to incorporate it best.\r\n\r\nIf a v2 was created, a client could sent two transport params and the server would respond with whichever it supported/preferred.  There is a bit of extra code complexity, but it gives us time to figure out whether a varint representing a number of packets, time, or something else is the right solution for ECN.",
          "createdAt": "2023-11-08T13:27:59Z",
          "updatedAt": "2023-11-08T13:27:59Z"
        },
        {
          "author": "nibanks",
          "authorAssociation": "MEMBER",
          "body": "I support saving this for a possible future v2.",
          "createdAt": "2023-11-08T14:16:29Z",
          "updatedAt": "2023-11-08T14:16:29Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "As I indicated above in the discussion, the current draft (inline with Acc ECN) only requires sending an immediate ACK for the first CE mark in a row. I tried to clarify this in PR #277. I think this is was what @marten-seemann asked for in his second comment in this discussion above.\r\n\r\nI further agree that if we need anything else in future, that can simply be a new extension when we actually know what we need. Specifying a field that can only be used for \"experimentation\" seems really weird to me. Extensions are cheap, so just specify an own extension for experimentation in a separate draft and reserve a provision code point.\r\n\r\nI'm closing this issue now. In case there is still any clarification needed in the draft, please open a new issue!\r\n\r\n\r\n",
          "createdAt": "2024-02-05T13:48:47Z",
          "updatedAt": "2024-02-05T13:48:47Z"
        }
      ]
    },
    {
      "number": 245,
      "id": "I_kwDODddxTs51rYGR",
      "title": "Response to Long Idle periods",
      "url": "https://github.com/quicwg/ack-frequency/issues/245",
      "state": "CLOSED",
      "author": "gloinul",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "needs-discussion",
        "no action needed"
      ],
      "body": "`It is important to receive timely feedback after long idle periods, e.g. update stale RTT measurements. When no acknowledgement has been sent in over one smoothed round trip time, receivers are encouraged to send an acknowledgement soon after receiving an ack-eliciting packet.`\r\n\r\nWhy is the formulation here \"soon after receiving an ack-eliciting packet\"? Would it not be better to clarify that this is a SHOULD Immediately ACK if no ACK has been sent for more than S_RTT? This would ensure a more rapid recovery from any temporary failures of the path to deliver any packets. \r\n\r\n",
      "createdAt": "2023-11-02T13:49:34Z",
      "updatedAt": "2024-03-01T12:21:41Z",
      "closedAt": "2024-03-01T12:20:15Z",
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This text was added to address issue #209 and added by PR #217. \r\n\r\nAs you can see in the PR, we purposefully didn't say immediate because it doesn't have to be immediate. However, we also thought that it might be sufficient to be vague here.",
          "createdAt": "2024-01-12T13:34:29Z",
          "updatedAt": "2024-01-12T13:34:29Z"
        },
        {
          "author": "gloinul",
          "authorAssociation": "NONE",
          "body": "As part of this discussion are there reasons for not sending an ACK as soon as possible on the first ack-eliciting packets after a period of inactivity? \r\n\r\nJust trying to understand if we create more uncertainty by not being prescriptive in some of these cases?",
          "createdAt": "2024-01-12T14:52:28Z",
          "updatedAt": "2024-01-12T14:52:28Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I don't think we discussed specific scenarios but we felt that this is a more general issue and not something that should be \"solved\" in this extension. That's why we thought normative language might be inappropriate here but we still wanted to note the issue.",
          "createdAt": "2024-02-05T13:25:18Z",
          "updatedAt": "2024-02-05T13:25:18Z"
        },
        {
          "author": "gloinul",
          "authorAssociation": "NONE",
          "body": "I think the core of my concern here qa if this document actually results in a change or uncertainty about what the default behavior are in implementations. But if you don't think, I am fine with closing the issue. ",
          "createdAt": "2024-02-06T10:35:23Z",
          "updatedAt": "2024-02-06T10:35:35Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Having closed this issue because I agree about the uncertainty but that is a generally issue as I said and not specific to this draft. If needed I think it needs to be addresses in a more general way and is therefore out of scope for this draft",
          "createdAt": "2024-03-01T12:21:40Z",
          "updatedAt": "2024-03-01T12:21:40Z"
        }
      ]
    },
    {
      "number": 246,
      "id": "I_kwDODddxTs51ra3Y",
      "title": "Reordering in initial paragraph of Sending Acknowledgments",
      "url": "https://github.com/quicwg/ack-frequency/issues/246",
      "state": "CLOSED",
      "author": "gloinul",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "editorial",
        "has-pr"
      ],
      "body": "The initial text on Sending Acknowledgements does not discuss the reordering threshold. Even if it in practice also needs to be updated based on the value received. The reorder threshold also do not change either of the bulleted reasons for sending ACK. Thus, 6.2 is also not an exception to the rules. If just provides an additional rule. \r\n\r\nI think some consideration for how reordering is handled in this section. I think it should be listed as one that is being updated on receiving and that it a third criteria for acking that needs to be accounted for. \r\n",
      "createdAt": "2023-11-02T13:55:29Z",
      "updatedAt": "2024-03-01T11:11:27Z",
      "closedAt": "2024-03-01T11:11:27Z",
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Not sure if it really matter if it is called an \"exception\" or an \"additional rule\". I think the same is true for section 6.4.\r\n\r\nThe original intention was to described the \"regular behaviour\" in alignment with [13.2.1. ](https://datatracker.ietf.org/doc/html/rfc9000#section-13.2.1)[Sending ACK Frames](https://datatracker.ietf.org/doc/html/rfc9000#name-sending-ack-frames) of RFC9000.",
          "createdAt": "2024-01-12T13:51:19Z",
          "updatedAt": "2024-01-12T13:51:19Z"
        },
        {
          "author": "gloinul",
          "authorAssociation": "NONE",
          "body": "The regular behavior for reordering is this: \r\nFrom Section 13.2.1 of RFC 9000: \r\n`when the packet has a packet number larger than the highest-numbered ack-eliciting packet that has been received and there are missing packets between that packet and this packet.`\r\n\r\nThat behavior as also described in 6.2 the reordering behavior is changed. However, this clearly does not mandate a criteria for when to send an ACK, instead it suppresses an ack. I think it is worth being clear here that Reordering Threshhold is modifying the behavior. I think that should be clearer rather than the additional rules given in 6.4 and 6.5. Thus I suggest something like this for this paragraphs:\r\n\r\n`\r\nOn receiving an ACK_FREQUENCY frame and updating its `max_ack_delay`\r\nand `Ack-Eliciting Threshold` values ({{ack-frequency-frame}}), the endpoint sends an\r\nacknowledgment when one of the following conditions are met:\r\n\r\n- Since the last acknowledgment was sent, the number of received ack-eliciting\r\n  packets is greater than the `Ack-Eliciting Threshold`.\r\n\r\n- Since the last acknowledgment was sent, `max_ack_delay` amount of time has\r\n  passed.\r\n\r\nThe 'Reordering Threshold' impacts the immediate acking when encountering a missing packet by requiring more missing packets before acking (Threshold > 1) or turns off immediate acking to missing packets (Threshold = 0), see {{out-of-order}}. {{congestion}}, and {{batch}} describe exceptions to this strategy.\r\n`",
          "createdAt": "2024-01-12T15:15:23Z",
          "updatedAt": "2024-01-12T15:15:23Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "No this is actually not correct. The Reordering threshold will never suppress an ACK. It might only lead to additional ACKs if the ack frequency is otherwise too low.",
          "createdAt": "2024-01-12T15:52:38Z",
          "updatedAt": "2024-01-12T15:52:38Z"
        },
        {
          "author": "gloinul",
          "authorAssociation": "NONE",
          "body": "Well compared to threshold = 1 it will at least delay the ack or fall back to other triggers of ACKs that may not trigger an ACK at a given packet reception. Is that not suppressing of a trigger at least? ",
          "createdAt": "2024-01-12T15:54:46Z",
          "updatedAt": "2024-01-12T15:54:46Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "not sure which threshold you are talking about now but if you set a reordering threshold that is larger than the ack-eliciting threshold it will have no impact.",
          "createdAt": "2024-01-12T16:21:29Z",
          "updatedAt": "2024-01-12T16:21:29Z"
        },
        {
          "author": "gloinul",
          "authorAssociation": "NONE",
          "body": "The reordering threshold larger than ack-eliciting threshold has no effect if I understand things correct. My point is that if one sets the reordering threshold to something else than 1, then one is changing the behavior compared to RFC 9000, and ACK that would be sent in response to reordering for threshold = 1 would not be sent for threshold = 3 for example, assuming ack-eliciting > 3. My issue with the text is simply that you current text is poor at making the reader aware that also the reordering threshold can change the normal behavior both to reordering, as well as potentially to what might be loss. ",
          "createdAt": "2024-01-12T16:48:50Z",
          "updatedAt": "2024-01-12T16:48:50Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Okay, got it. Yes, I guess we can add one more sentence there.",
          "createdAt": "2024-01-12T16:54:02Z",
          "updatedAt": "2024-01-12T16:54:02Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Created PR #270 now.",
          "createdAt": "2024-01-12T18:10:15Z",
          "updatedAt": "2024-01-12T18:10:15Z"
        }
      ]
    },
    {
      "number": 247,
      "id": "I_kwDODddxTs51tvSQ",
      "title": "Re-ordering threshold should be clearer it also affects gap threshold",
      "url": "https://github.com/quicwg/ack-frequency/issues/247",
      "state": "CLOSED",
      "author": "gloinul",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "editorial",
        "has-pr"
      ],
      "body": "Response to Out-of-Order Packets section I think needs to be clearer that this setting also affects the number of packets until a PN  gap is ACKed. This is not obvious and needs better initial explanation. \r\n\r\n",
      "createdAt": "2023-11-02T19:39:25Z",
      "updatedAt": "2024-03-04T13:58:40Z",
      "closedAt": "2024-03-04T13:58:40Z",
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Sorry I'm not sure I understand this comment. What so you mean by \"affects the number of packets\"? Affecting how? Can you maybe proposed a sentence, so I can better understand what you think is missing?!",
          "createdAt": "2024-01-12T13:54:02Z",
          "updatedAt": "2024-01-12T13:54:02Z"
        },
        {
          "author": "gloinul",
          "authorAssociation": "NONE",
          "body": "I think changing this sentence may resolve my issue: \r\nOLD:\r\nAs specified in {{Section 13.2.1 of QUIC-TRANSPORT}}, endpoints are expected to\r\nsend an acknowledgment immediately on receiving a reordered ack-eliciting\r\npacket.\r\n\r\nNEW: \r\nAs specified in {{Section 13.2.1 of QUIC-TRANSPORT}}, endpoints are expected to\r\nsend an acknowledgment immediately on receiving a reordered ack-eliciting\r\npacket or detecting a gap between previously received packet and an ack eliciting packet with a higher packet number.\r\n",
          "createdAt": "2024-01-12T15:22:10Z",
          "updatedAt": "2024-01-12T15:22:10Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thanks! created PR #273 (aligning with language in RFC9000)",
          "createdAt": "2024-02-05T12:28:15Z",
          "updatedAt": "2024-02-05T12:28:15Z"
        }
      ]
    },
    {
      "number": 248,
      "id": "I_kwDODddxTs51ty-T",
      "title": "Reordering handling and Largest Reported",
      "url": "https://github.com/quicwg/ack-frequency/issues/248",
      "state": "CLOSED",
      "author": "gloinul",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "editorial",
        "has-pr"
      ],
      "body": "Largest Reported:\r\nThe largest packet number that could be declared lost with the specified Reordering Threshold, which is Largest Acked - Reordering Threshold + 1.\r\n\r\nAlso the above definition is very strange, the name and its definition does not appear to match up. Can that be addressed? \r\n\r\nIf we look at the example in 6.2.1:\r\n\r\n Receive 1\r\n  Receive 3 -> 2 Missing\r\n  Receive 4 -> 2 Missing\r\n  Receive 5 -> Send ACK because of 2\r\n  Receive 8 -> 6,7 Missing\r\n  Receive 9 -> Send ACK because of 6, 7 Missing\r\n  Receive 10 -> Send ACK because of 7\r\n\r\nWhat I struggle to understand is how the words use match up with the behavior for when Receive 10 happens. \r\nSo in this situation \r\nLargest Unacked: 10\r\nLargest Acked: 9\r\nLargest Reported: 7\r\nUnreported Missing: <none>\r\n\r\nAn endpoint that receives an ACK_FREQUENCY frame with a non-zero Reordering Threshold value SHOULD send an immediate ACK when the gap between the smallest Unreported Missing packet and the Largest Unacked is greater than or equal to the Reordering Threshold value.\r\n\r\nThere are no Unreported Missing Packet at this stage. \r\n\r\nAnd I note that Receive 9 would have gap reported PN 6, 7 thus, I don't see why one would again report this gap. Which rule is applicable for this case? \r\n\r\n",
      "createdAt": "2023-11-02T19:52:39Z",
      "updatedAt": "2024-03-01T11:19:18Z",
      "closedAt": "2024-03-01T11:19:18Z",
      "comments": [
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "> Largest Reported:\r\n> The largest packet number that could be declared lost with the specified Reordering Threshold, which is Largest Acked - Reordering Threshold + 1.\r\n\r\nYeah I think we are off by one here; could it be that `largest_reported = largest_acked - reordering_threshold`?\r\n\r\nConsider the case of `reordering_threshold` being 1. When an ACK for PN 2 is sent, loss of PN 1 will be reported, I think.",
          "createdAt": "2023-11-27T05:24:59Z",
          "updatedAt": "2023-11-27T05:24:59Z"
        },
        {
          "author": "tatsuhiro-t",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Related issue; I have hard time to understand Largest Acked which is defined as largest acked sent in ACK frame.\r\nIs it an ACK frame that local endpoint has sent before, or is it the ACK frame that would be sent if we decided to send one due to reordering?\r\nIf it is the former, Largest Acked is undefined before sending an ACK frame. Consequently, Largest Reported and Unreported Missing are also undefined because they rely on Largest Acked.  The first example in 6.2.1 has no statement about ACK frame before receiving packet 5, but then Largest Acked is still undefined at this stage, so cannot determine whether we should send immediate ACK or not.\r\nIt would be nice to show these variables when receiving each packet, in order to make it easier to understand how the algorithm works.\r\n",
          "createdAt": "2024-01-08T10:36:56Z",
          "updatedAt": "2024-01-08T10:36:56Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@gloinul you need to send another ACK when you received packet 10 in order to enable the ACK receiver to declare packet 7 as lost. The gap that both 6 and 7 are missing is already reported with the ACK in response to the receive of packet 9 but at this point the ACK receiver can only declare packet 6 as lost. Then when the next ACK is received the ACK receiver can also declare packet 7 as lost.\r\n\r\nI guess you are right that the term \"reported\" might be confusing but the calculation is correct. In the example above the \"Largest Reported\" is the packet, that needs another ACK in order to be declared lost by the ACK receiver.",
          "createdAt": "2024-01-12T11:02:40Z",
          "updatedAt": "2024-01-12T11:02:40Z"
        },
        {
          "author": "gloinul",
          "authorAssociation": "NONE",
          "body": "Ok, what can be done to the description here so that one actually understands what is meant and don't missunderstand things here? ",
          "createdAt": "2024-01-12T12:34:54Z",
          "updatedAt": "2024-01-12T12:34:54Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@gloinul I added a note in PR #274 to exactly explain this part of the example. Does that help?",
          "createdAt": "2024-02-05T12:38:32Z",
          "updatedAt": "2024-02-05T12:38:32Z"
        },
        {
          "author": "gloinul",
          "authorAssociation": "NONE",
          "body": "Yes, that helps clarify the example. Thanks",
          "createdAt": "2024-02-06T12:58:41Z",
          "updatedAt": "2024-02-06T12:58:41Z"
        }
      ]
    },
    {
      "number": 251,
      "id": "I_kwDODddxTs535Iud",
      "title": "acknowledg\"e\"ment or acknowledgment?",
      "url": "https://github.com/quicwg/ack-frequency/issues/251",
      "state": "CLOSED",
      "author": "kazuho",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Acknowledgement (with E) is used 57 times, including the title. Acknowledgment (without E) is used 15 times.\r\n\r\nFWIW, RFC 9000 uses \"acknowledgment\" (without E).",
      "createdAt": "2023-11-27T04:33:35Z",
      "updatedAt": "2023-11-30T15:52:27Z",
      "closedAt": "2023-11-30T15:52:27Z",
      "comments": [
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "I don't have a strong opinion, but I think it's best to be consistent with RFC9000.",
          "createdAt": "2023-11-30T15:47:15Z",
          "updatedAt": "2023-11-30T15:47:15Z"
        }
      ]
    },
    {
      "number": 253,
      "id": "I_kwDODddxTs535MQ7",
      "title": "no change in ack behavior before the first ACK_FREQUENCY frame?",
      "url": "https://github.com/quicwg/ack-frequency/issues/253",
      "state": "CLOSED",
      "author": "marten-seemann",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "design",
        "needs-discussion",
        "has-pr"
      ],
      "body": "> Receiving a min_ack_delay transport parameter indicates that the peer might send ACK_FREQUENCY frames in the future. Until an ACK_FREQUENCY frame is received, receiving this transport parameter does not cause the endpoint to change its acknowledgement behavior.\r\n\r\nThis sentence doesn't seem to be correct, as negotiating the extension modifies the ECN behavior as compared to RFC 9002:\r\n> An endpoint SHOULD send an immediate acknowledgement when a packet marked with the ECN Congestion Experienced (CE) {{?RFC3168}} codepoint in the IP header is received and the previously received packet was not marked CE.",
      "createdAt": "2023-11-27T04:51:28Z",
      "updatedAt": "2024-03-04T20:56:29Z",
      "closedAt": "2024-03-04T20:56:29Z",
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "That is true. I would actually propose that we only change the behaviour if the Ack-Eliciting Threshold is larger than one:\r\n\r\n> If the Ack-Eliciting Threshold is larger than 1, an endpoint SHOULD send an immediate acknowledgement when a packet marked with the ECN Congestion Experienced (CE) {{?RFC3168}} codepoint in the IP header is received and the previously received packet was not marked CE. From there on if multiple CE-marked packets are received in a row or only non-CE-marked packet received, the endpoint resumes to sending acknowledgement based on the Ack-Eliciting Threshold or max_ack_delay. Only whenever another transition from non-CE-marked to CE-marked occurs and immediate acknowledgement is sent.\r\n\r\nI guess we could also say \"larger or equal to 1\" but this still would mean, that this different behaviour would only become active if at least one ACK_FREQUENCY frame was received.\r\n",
          "createdAt": "2024-01-12T14:10:50Z",
          "updatedAt": "2024-01-12T14:10:50Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I created PR #277 for this.",
          "createdAt": "2024-02-05T13:37:20Z",
          "updatedAt": "2024-02-05T13:37:20Z"
        }
      ]
    },
    {
      "number": 295,
      "id": "I_kwDODddxTs6JAk3A",
      "title": "Idle period clarification",
      "url": "https://github.com/quicwg/ack-frequency/issues/295",
      "state": "CLOSED",
      "author": "MikeBishop",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "In Section 6:\r\n\r\n> ...the data receiver sends an acknowledgment when one of the following conditions are met since the last acknowledgement was sent:\r\n>\r\n>- The number of received ack-eliciting packets is greater than the Ack-Eliciting Threshold.\r\n>\r\n>- **max_ack_delay amount of time has passed.**\r\n\r\nIn Section 6.1:\r\n\r\n> When no acknowledgment has been sent in over one smoothed round trip time (...), receivers are encouraged to send an acknowledgment **soon after receiving an ack-eliciting packet**.\r\n\r\nA strict reading of Section 6 would suggest that an ACK will be sent every `max_ack_delay` microseconds regardless of whether any ack-eliciting packets were received in that time period. 6.1 suggests that no ACK need be sent if no traffic was received, but that an ACK will be sent immediately upon receipt of a packet.\r\n\r\nI *think* the correct resolution here is that the second bullet in Section 6 should add \"...and at least one ack-eliciting packet has been received.\" This condition would immediately become true upon receipt of a packet, causing the behavior encouraged in 6.1.",
      "createdAt": "2024-05-15T19:00:12Z",
      "updatedAt": "2024-07-23T05:09:53Z",
      "closedAt": "2024-07-23T05:09:53Z",
      "comments": []
    },
    {
      "number": 297,
      "id": "I_kwDODddxTs6QG_TW",
      "title": "invalid reference to RFC 9002",
      "url": "https://github.com/quicwg/ack-frequency/issues/297",
      "state": "CLOSED",
      "author": "marten-seemann",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Section 6.3 references section 18.2 of RFC 9002. However, RFC 9002 only has a total of 9 sections.\r\n\r\nI assume it is supposed to reference section 6.1.1.",
      "createdAt": "2024-07-19T03:00:11Z",
      "updatedAt": "2024-07-20T21:56:15Z",
      "closedAt": "2024-07-20T21:56:15Z",
      "comments": []
    },
    {
      "number": 298,
      "id": "I_kwDODddxTs6QHfai",
      "title": "inconsistent use of error codes",
      "url": "https://github.com/quicwg/ack-frequency/issues/298",
      "state": "CLOSED",
      "author": "marten-seemann",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "When designing QUIC, we decided that FRAME_ENCODING_ERROR is used iff the condition can be detected without accessing any connection state.\r\n\r\nThis is not the case for the Requested Max Ack Delay in the ACK_FREQUENCY frame:\r\n> A value smaller than the min_ack_delay advertised by the peer is also invalid.  Receipt of an invalid value MUST be treated as a connection error of type FRAME_ENCODING_ERROR.\r\n\r\nThis should probably be a PROTOCOL_VIOLATION instead.",
      "createdAt": "2024-07-19T04:38:01Z",
      "updatedAt": "2024-07-20T21:57:06Z",
      "closedAt": "2024-07-20T21:57:06Z",
      "comments": []
    },
    {
      "number": 299,
      "id": "I_kwDODddxTs6QHlcw",
      "title": "examples assume that 0 is not a valid packet number",
      "url": "https://github.com/quicwg/ack-frequency/issues/299",
      "state": "CLOSED",
      "author": "marten-seemann",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "But it is.\r\n\r\nIn example 1, receiving packet 3 should trigger an ACK, since this would allow the peer to declare packet 0 lost (3-0 >= 3).\r\nInstead of changing which ACKs are sent, the easiest solution would be adding another line for packet 0 to the table.",
      "createdAt": "2024-07-19T04:59:25Z",
      "updatedAt": "2024-07-20T22:16:39Z",
      "closedAt": "2024-07-20T22:16:39Z",
      "comments": []
    },
    {
      "number": 304,
      "id": "I_kwDODddxTs6YCM1Q",
      "title": "Define what should happen if packets arrive outside `Missing Packet Threshold`",
      "url": "https://github.com/quicwg/ack-frequency/issues/304",
      "state": "CLOSED",
      "author": "michael-eriksson",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "question"
      ],
      "body": "The document does not specify what should happen if a packet arrives more out of order than `Missing Packet Threshold`. An immediate ack is the most reasonable action, but it should probably be explicitly specified.\r\n\r\nSee also the quicdev Slack message: https://quicdev.slack.com/archives/CTDAH4H71/p1725959171986379",
      "createdAt": "2024-09-26T14:10:02Z",
      "updatedAt": "2025-02-28T22:42:05Z",
      "closedAt": "2025-02-28T22:42:05Z",
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Not sure I understand this comment. the draft says:\n\n> An endpoint that receives an ACK_FREQUENCY frame with a non-zero Reordering Threshold value SHOULD send an immediate ACK when the gap between the smallest Unreported Missing packet and the Largest Unacked is greater than or equal to the Reordering Threshold value.\n\nThis say \"larger or equal\" which should include this case, no?",
          "createdAt": "2025-01-27T16:27:02Z",
          "updatedAt": "2025-01-27T16:27:02Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "Unfortunately, I can't see the slack history anymore, but I agree with @mirjak that the current text seems to cover this.  We could say it elsewhere if it's helpful, but I'm not sure where?",
          "createdAt": "2025-02-06T15:17:53Z",
          "updatedAt": "2025-02-06T15:17:53Z"
        },
        {
          "author": "michael-eriksson",
          "authorAssociation": "NONE",
          "body": "No, the text quoted from the draft above does not cover the case that I'm after.\n\nLet's use Table 1 of draft-10 as an example. What should happen if packet 2 is received after packet 5 has been received (but before packet 8 is received)? An ack for packet 5 has already been sent, to indicate that packet 2 is missing. Packet 2 then arrives so late that it's outside the `Reordering Threshold`.",
          "createdAt": "2025-02-10T14:46:14Z",
          "updatedAt": "2025-02-10T14:46:14Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This is covered in RFC9000 (and not changed):\n\n```\nIn order to assist loss detection at the sender, an endpoint SHOULD generate and send an ACK frame without delay when it receives an ack-eliciting packet either:\n\n* when the received packet has a packet number less than another ack-eliciting packet that has been received, or\n```",
          "createdAt": "2025-02-10T15:25:37Z",
          "updatedAt": "2025-02-10T15:25:37Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Okay, looking at the draft, this is actually not very clear. My understanding was always that we keep the behavior as specified in RFC9000 when the PN is less than an already received one and we only change the behavior in case of gaps. If so, we should maybe clarify this. @Ian can you confirm?",
          "createdAt": "2025-02-10T15:40:27Z",
          "updatedAt": "2025-02-10T15:40:27Z"
        }
      ]
    },
    {
      "number": 305,
      "id": "I_kwDODddxTs6YCWGw",
      "title": "Loss detection fencepost error",
      "url": "https://github.com/quicwg/ack-frequency/issues/305",
      "state": "CLOSED",
      "author": "michael-eriksson",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "has-pr"
      ],
      "body": "There seems (to me) to be a fencepost error in the discussion about [Setting the Reordering Threshold value](https://www.ietf.org/archive/id/draft-ietf-quic-ack-frequency-10.html#name-setting-the-reordering-thre). I think that the `Reordering Threshold` value should be set to _the same value_ as RFC 9000's `kPacketThreshold`.\r\n\r\nExample: Loss detection with kPacketThreshold set to 3 would perfectly catch the reported missing packets in the [Table 1 example](https://www.ietf.org/archive/id/draft-ietf-quic-ack-frequency-10.html#section-6.2.1-2). Please check the pseudocode in A.10 of RFC 9002, where the condition for declaring a packet as lost is:\r\n```\r\nlargest_acked_packet (5) >= unacked.packet_number (2) + kPacketThreshold (3)\r\n```\r\n\r\nSee also the quicdev Slack message: https://quicdev.slack.com/archives/CTDAH4H71/p1725959899164449",
      "createdAt": "2024-09-26T14:21:28Z",
      "updatedAt": "2025-02-06T13:05:39Z",
      "closedAt": "2025-02-06T13:05:39Z",
      "comments": []
    },
    {
      "number": 306,
      "id": "I_kwDODddxTs6YCeq3",
      "title": "Include note about loss detection update",
      "url": "https://github.com/quicwg/ack-frequency/issues/306",
      "state": "CLOSED",
      "author": "michael-eriksson",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "question"
      ],
      "body": "The example loss detection algorithm in Appendix A of RFC 9002 assumes that packets that arrives out of order are always acknowledged immediately. Because of this, it does not include `max_ack_delay` when the [loss delay threshold is computed](https://www.rfc-editor.org/rfc/rfc9002.html#section-a.10-2).\r\n\r\nSetting the `Ack-Eliciting Threshold` field in the `ACK_FREQUENCY` frame to something else than 1 implies that some packets that arrive out of order will have delayed acknowledgments. Hence, the `max_ack_delay` should be added to the `loss_delay` variable in the algorithm above in those cases.\r\n\r\nIt would probably be valuable for implementers if this information was included in the document.\r\n\r\nSee also the quicdev Slack thread: https://quicdev.slack.com/archives/CTDAH4H71/p1725960809852329",
      "createdAt": "2024-09-26T14:35:12Z",
      "updatedAt": "2025-02-28T22:43:24Z",
      "closedAt": "2025-02-28T22:43:23Z",
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Not really sure this is needed. Unfortunately I can't see anymore if there was a discuss on slack. However, loss_delay is defined like this:\n\nloss_delay = kTimeThreshold * max(latest_rtt, smoothed_rtt)\n\nwhere kTimeThreshold > 1. This should be large enough even if max_ack_delay is not added.",
          "createdAt": "2025-01-27T15:21:01Z",
          "updatedAt": "2025-01-27T15:21:01Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "I don't think there was ever a consideration to include max_ack_delay, partially because max_ack_delay can be quite larger compared to RTT.\n\nI'm also having a very difficult time coming up with a case we'd want to delay loss detection on the sender by adding max_ack_delay.  In cases when the ACK that indicates the missing packet is delayed by max_ack_delay, the use of max(latest_rtt, smoothed_rtt) would ensure that it isn't immediately declared lost.",
          "createdAt": "2025-02-06T15:30:12Z",
          "updatedAt": "2025-02-06T15:30:12Z"
        },
        {
          "author": "michael-eriksson",
          "authorAssociation": "NONE",
          "body": "OK, a scenario.\n\nThe sender has configured the `Requested Max Ack Delay` to 1/4 of the RTT. Packets 100 and 101 are sent directly after each other but reordered, so 101 is received before 100. When 101 arrives, an ack is sent. 100 arrives shortly after, but no ack is sent because of the Ack Frequency configuration (`Reordering Threshold` is larger than 1). After 1/4 of the RTT, the ack delay timer expires and the ack for packet 100 is finally sent.\n\nWith the default calculation of `loss_delay`, where `max_ack_delay` is not included, packet 100 will be (falsely) declared as lost at the sender after 9/8 = 1.125 (`kTimeThreshold`) of the RTT, which is before the ack will arrive at around 5/4 = 1.25 of the RTT.",
          "createdAt": "2025-02-10T15:12:33Z",
          "updatedAt": "2025-02-10T15:12:33Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "packet 100 will trigger an immediate ACK because it is smaller than 101 as specified in sec 13.2.1 in RFC9000.",
          "createdAt": "2025-02-10T15:31:00Z",
          "updatedAt": "2025-02-10T15:31:00Z"
        },
        {
          "author": "michael-eriksson",
          "authorAssociation": "NONE",
          "body": "Huh? What's the point with `Reordering Threshold` then?",
          "createdAt": "2025-02-10T15:57:54Z",
          "updatedAt": "2025-02-10T15:57:54Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "you delay the ack if you have a gap but if you receive a packet that fills a gap it still makes sense to tell the other end immediately to avoid spurious retransmissions. I guess we could optimise this further and e.g. only send a ACK if the packet fills a gap and a larger PN has already been ack'ed otherwise you wait for the usually ACK delay. Not sure if that makes a big difference but it would probably correct to do it that way.",
          "createdAt": "2025-02-10T16:06:57Z",
          "updatedAt": "2025-02-10T16:06:57Z"
        },
        {
          "author": "michael-eriksson",
          "authorAssociation": "NONE",
          "body": "Quoting the draft:\n> After an ACK_FREQUENCY frame with a Reordering Threshold value other than 1 has been received, this extension delays immediate acknowledgements to reordered ack-eliciting packets and the gaps they can create.",
          "createdAt": "2025-02-10T16:38:41Z",
          "updatedAt": "2025-02-10T16:38:41Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yes, I saw this but I would interpreted this as delaying the ACK but still send an immediate ACK if the re-ordered packet is received after the ack delay or re-ordering threshold, or, to say it in other words, if a higher PN packet already triggered an ACK. However, this part seems actually not very clear.",
          "createdAt": "2025-02-10T17:33:57Z",
          "updatedAt": "2025-02-10T17:33:57Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "closing this one also as #319 was merged",
          "createdAt": "2025-02-28T22:43:23Z",
          "updatedAt": "2025-02-28T22:43:23Z"
        }
      ]
    },
    {
      "number": 307,
      "id": "I_kwDODddxTs6kGHRZ",
      "title": "When to ACK on new CE?",
      "url": "https://github.com/quicwg/ack-frequency/issues/307",
      "state": "CLOSED",
      "author": "martinduke",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial",
        "has-pr"
      ],
      "body": "Section 6.4 says a new CE mark should be immediately acked \"if the Ack-Eliciting Threshold is larger than 1.\" But a threshold of 1 indicates that some packets are not being acked! Is this intentional, or should it be \"larger than zero?\"",
      "createdAt": "2024-12-20T16:30:25Z",
      "updatedAt": "2025-02-06T12:55:50Z",
      "closedAt": "2025-02-06T12:55:50Z",
      "comments": [
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "As you said, everything gets acked with a Reordering Threshold of 1, so technically CE only changes behavior for values greater than 1.  But that's probably thinking about it in an overly clever way and we should say zero or state it differently.",
          "createdAt": "2024-12-20T16:35:34Z",
          "updatedAt": "2024-12-20T16:35:48Z"
        },
        {
          "author": "martinduke",
          "authorAssociation": "CONTRIBUTOR",
          "body": "No! ack-eliciting-threshold = 0 means everything gets acked! 1 means we skip packets.",
          "createdAt": "2024-12-20T16:55:27Z",
          "updatedAt": "2024-12-20T16:55:27Z"
        },
        {
          "author": "martinduke",
          "authorAssociation": "CONTRIBUTOR",
          "body": "So I think this is the current literal interpretation of the draft:\r\n\r\n- ack-eliciting-threshold = 0: ack every packet, the CE marking is neither here nor there\r\n- ack-eliciting-threshold = 1: per RFC 9000, SHOULD ack any CE packet, period.\r\n- ack-eliciting-threshold > 1: per the draft, SHOULD ack the first CE only.\r\n\r\nSo the main question, is this the intent?\r\n\r\nIf not the intent (i.e. the actual intent is to ack the first CE only, even when threshold=1), then s/larger than 1/larger than 0, and we're done.\r\n\r\nIf it is the intent, a sentence like \"When the ack-eliciting threshold is 1, an ENDPOINT SHOULD ack every CE-marked packet, even if consecutive\" would make it clearer.\r\n",
          "createdAt": "2024-12-20T18:32:58Z",
          "updatedAt": "2024-12-20T18:32:58Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "My mistake, I was thinking of Reordering Threshold, not Ack-Eliciting Threshold.\r\n\r\nMy intent was to ack only the first CE, so changing it to larger than 0 seems correct.  If you're acking every other packet anyway, you'll be getting plenty of feedback.\r\n\r\nI wrote #308 to fix this.",
          "createdAt": "2024-12-20T18:50:11Z",
          "updatedAt": "2024-12-20T18:50:11Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "> So I think this is the current literal interpretation of the draft:\r\n> \r\n> * ack-eliciting-threshold = 0: ack every packet, the CE marking is neither here nor there\r\n> * ack-eliciting-threshold = 1: per RFC 9000, SHOULD ack any CE packet, period.\r\n> * ack-eliciting-threshold > 1: per the draft, SHOULD ack the first CE only.\r\n> \r\n> So the main question, is this the intent?\r\n\r\nYes this interpretation is correct as also discussed in issue #253.\r\n\r\n> If it is the intent, a sentence like \"When the ack-eliciting threshold is 1, an ENDPOINT SHOULD ack every CE-marked packet, even if consecutive\" would make it clearer.\r\n\r\nI believe we also decided to not add any additional normative language here because as you write above this is simply the behaviour as defined normatively already in RFC9000 and we shouldn't define it twice because that make it harder to change things. I guess we could add a non-normative clarification if that really helps but as you actually interpreted the doc correctly, maybe that's not needed?\r\n\r\n",
          "createdAt": "2024-12-23T13:41:51Z",
          "updatedAt": "2024-12-23T13:41:51Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "I closed my first PR, but I do think editorial clarification would be helpful here, since I already forgot what we had agreed upon.",
          "createdAt": "2024-12-23T20:15:10Z",
          "updatedAt": "2024-12-23T20:15:10Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I created PR #313",
          "createdAt": "2025-01-27T15:03:38Z",
          "updatedAt": "2025-01-27T15:03:38Z"
        }
      ]
    },
    {
      "number": 309,
      "id": "I_kwDODddxTs6kRgxM",
      "title": " Packet Reception in ACK Frequency Spec example doesnt specify packets received in batch",
      "url": "https://github.com/quicwg/ack-frequency/issues/309",
      "state": "CLOSED",
      "author": "gaurav2699",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "editorial",
        "has-pr"
      ],
      "body": "The examples provided explains how each packet received would elicit an acknowledgment. However, it does not explicitly mention that packets are not received in batches.\r\nTo avoid any potential confusion, I think its worth to add clarification in the specification to state that packets are not received in batches. This would help ensure that the behavior of acknowledgment frequency is clearly understood.",
      "createdAt": "2024-12-23T13:15:07Z",
      "updatedAt": "2025-02-06T12:55:16Z",
      "closedAt": "2025-02-06T12:55:16Z",
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'm not sure if I understand this comment. It really doesn't matter if packets are received in batches or not, because at the end each packet and more importantly each ACK frame contained in a packets needs to be processed. Or can you make a proposal where exactly you would like to see which clarification?",
          "createdAt": "2025-01-27T14:44:58Z",
          "updatedAt": "2025-01-27T14:44:58Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Also there is a comment on batch processing (as packets could be received in batches) in section 6.5:\n\n> To avoid sending multiple acknowledgments in rapid succession, an\n>  endpoint can process all packets in a batch before determining\n>  whether to send an ACK frame in response, as stated in Section 13.2.2\n>  of [QUIC-TRANSPORT].\n",
          "createdAt": "2025-01-27T15:05:54Z",
          "updatedAt": "2025-01-27T15:05:54Z"
        },
        {
          "author": "nibanks",
          "authorAssociation": "MEMBER",
          "body": "@mirjak the issue is that the example assumes you send ACKs immediately after processing individual packets; but if the packets were processed in batch, which as you point out is suggested, the ACKs you send out would actually be different. Overall, it effects the logic of when and what to send, depending on batching.",
          "createdAt": "2025-01-27T15:14:01Z",
          "updatedAt": "2025-01-27T15:14:01Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The example assume that the ACK frames are process in the order as given in the example, basically one by one. You mean we should say that explicitly?",
          "createdAt": "2025-01-27T15:31:12Z",
          "updatedAt": "2025-01-27T15:31:12Z"
        },
        {
          "author": "nibanks",
          "authorAssociation": "MEMBER",
          "body": "Yes, exactly.",
          "createdAt": "2025-01-27T15:35:09Z",
          "updatedAt": "2025-01-27T15:35:09Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I created PR #315",
          "createdAt": "2025-01-27T16:36:13Z",
          "updatedAt": "2025-01-27T16:36:13Z"
        }
      ]
    },
    {
      "number": 310,
      "id": "I_kwDODddxTs6kgqG9",
      "title": "What's retransmittable?",
      "url": "https://github.com/quicwg/ack-frequency/issues/310",
      "state": "CLOSED",
      "author": "martinduke",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "has-pr"
      ],
      "body": "Unless I missed it, the draft isn't explicit about which of the two new frames are retransmittable. I'd guess that ACK_FREQUENCY is and IMMEDIATE_ACK isn't.",
      "createdAt": "2024-12-26T18:14:26Z",
      "updatedAt": "2025-02-06T13:06:09Z",
      "closedAt": "2025-02-06T13:06:07Z",
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "\nThe draft does say this explicitly for ACK_FREQUENCY:\n\n> ACK_FREQUENCY frames are ack-eliciting and congestion controlled. When an ACK_FREQUENCY frame is lost, the sender is encouraged to send another ACK_FREQUENCY frame, unless an ACK_FREQUENCY frame with a larger Sequence Number value has already been sent. However, it is not forbidden to retransmit the lost frame (see {{Section 13.3 of QUIC-TRANSPORT}}), because the receiver will ignore duplicate or out-of-order ACK_FREQUENCY frames based on the Sequence Number.\n\nThis was already discussed in issue #122 and PR #136 merged the text above. However, PR #136 also contained a sentence for IMMEDIATE_ACK (\"IMMEDIATE_ACK frames do not need to be retransmitted.\") but it seems that sentence is not in the draft. Need to do some more research what happened here... \n\nIn anyway for IMMEDIATE_ACK it really doesn't make a difference because you can't not distinguish the retransmitted frame from a new one. So if we detect a loss of an IMMEDIATE_ACK, you can decide if you still want an immediate ACK or not and send a \"new\" one, however, there is not really any harm in retransmitting it either. So maybe we decided at some point to rather say nothing...?",
          "createdAt": "2025-01-27T14:34:15Z",
          "updatedAt": "2025-01-27T14:34:15Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Okay, I found the problem. PR #160 removed this sentence. That PR was supposed to be only editorial, so I think that was wrong. I created another PR to re-add that sentence. See #312. Thanks Martin!",
          "createdAt": "2025-01-27T14:41:44Z",
          "updatedAt": "2025-01-27T14:41:44Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "#312 merged",
          "createdAt": "2025-02-06T13:06:07Z",
          "updatedAt": "2025-02-06T13:06:07Z"
        }
      ]
    },
    {
      "number": 311,
      "id": "I_kwDODddxTs6neLMc",
      "title": "Transport Parameter takes 8 bytes to encode",
      "url": "https://github.com/quicwg/ack-frequency/issues/311",
      "state": "CLOSED",
      "author": "martinduke",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I take it this is because it's an experimental value that will be replaced before it goes to RFC. So this is a tracking issue for that replacement.\n\nWe expect to eventually send this for every connection, so a shorter value would be helpful.",
      "createdAt": "2025-01-24T15:19:06Z",
      "updatedAt": "2025-01-24T16:28:51Z",
      "closedAt": "2025-01-24T16:28:51Z",
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yes, this is what the IANA section already says:\n\n> When this document is approved, IANA is requested to assign a permanent allocation of a codepoint in the 0-63 range to replace the provisional codepoint described above.\n\nWhat do we need this issue for?",
          "createdAt": "2025-01-24T16:05:43Z",
          "updatedAt": "2025-01-24T16:05:43Z"
        }
      ]
    },
    {
      "number": 316,
      "id": "I_kwDODddxTs6ns5w9",
      "title": "Fix build failures",
      "url": "https://github.com/quicwg/ack-frequency/issues/316",
      "state": "CLOSED",
      "author": "LPardue",
      "authorAssociation": "MEMBER",
      "assignees": [
        "LPardue"
      ],
      "labels": [],
      "body": "Updating the editor copy is failing due to actions deprecation. I'll get this fixed up.",
      "createdAt": "2025-01-27T17:04:03Z",
      "updatedAt": "2025-01-31T14:59:14Z",
      "closedAt": "2025-01-31T14:59:12Z",
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Yes, wanted to look into this as well but ready to call it a day for today. If you can do it, that would be great! thanks! Otherwise I'll do it tomorrow.",
          "createdAt": "2025-01-27T17:43:11Z",
          "updatedAt": "2025-01-27T17:43:11Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I did update the workflow files and also updated the link to the editors copy to point to the html file. However, I didn't rebase the branches of the PRs. Maybe we can merge them without running check as they are reasonable small.",
          "createdAt": "2025-01-31T14:59:12Z",
          "updatedAt": "2025-01-31T14:59:12Z"
        }
      ]
    },
    {
      "number": 321,
      "id": "I_kwDODddxTs62ylzx",
      "title": "Sending ACKs for packets < largest_acked may not be valuable",
      "url": "https://github.com/quicwg/ack-frequency/issues/321",
      "state": "OPEN",
      "author": "martinduke",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "design",
        "has-pr"
      ],
      "body": "#304 clarifies that RFC 9000 rules about ACKing packets < largest_acked still apply:\n\n> When an ack-eliciting packet is received with a packet number less than Largest Acked, this still triggers an immediate acknowledgement in an effort to avoid the packet being spuriously declared lost.\n\nTo be clear: this totally works, and in no case makes things worse than the baseline. In the \"normal\" case when packet gaps are loss, not reordering, it has no effect at all.\n\nHowever, I wonder if this rule is far less than optimal in cases with a lot of reordering, and may add little to no value in more common cases. Loss and reordering both manifest as a sudden jump in sequence number; if a reordering case, the gap packets will arrive later. The reordering_thresh field can suppress the ack of this first jump, but not the followon packets with lower numbers.\n\nFor example, Say that ack_eliciting_threshold is 1 (the default) but reordering_threshold is zero (meaning, ignore reordering). If the pattern of packet arrival is 10, 11, 1, 2, 3, 4, 5, 6, 7, 8, 9, then there will be 10 ACKs: one for 11, as the second packet to arrive, and then one for each of 1:9 because they are all less than largest_acked. In this case, network reordering has caused the ack rate to be roughly double what the receiver requested. Without the text in question, one would expect an ack for 11, 2, 4, 6, and 8.\n\nIn #304 , the stipulation is that acking these packets will prevent spurious retransmits. If true, that would be valuable. However:\n\n- If the sender is using RFC 9002 time-based recovery, the important thing is that the ack arrives before the timeout. IIUC, this is best ensured via requested_max_ack_delay rather than through this mechanism.\n\n- If the sender is using packet-based recovery, the additional acks don't really help. If ack_eliciting_threshold is set correctly, there won't be a retransmission until another ACK arrives. If the ACK is delayed till another packet arrives, the sender's state for the early packet won't change in the meantime.\n\nI find this hard to reason about, and am happy to be told I'm holding it wrong.\n\nalso sent as email to the list: https://mailarchive.ietf.org/arch/msg/quic/D8ivpSvNqz8ixwF-y_UgtEINYio/",
      "createdAt": "2025-05-15T15:50:23Z",
      "updatedAt": "2025-08-12T17:05:21Z",
      "closedAt": null,
      "comments": [
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "Actually, I'm under the impression that the [earlier comments on #304](https://github.com/quicwg/ack-frequency/issues/304#issuecomment-2616282013) from @mirjak and @ianswett were correct in pointing out that the situation is covered by the following statement: \"An endpoint that receives an ACK_FREQUENCY frame with a non-zero Reordering Threshold value SHOULD send an immediate ACK when the gap between the smallest Unreported Missing packet and the Largest Unacked is greater than or equal to the Reordering Threshold value.\"\n\nConsider packet-number-based loss detection:\n\nWhen a sender advertises an ack_frequency.reordering_threshold of N, the assumption is that the sender will not declare a packet lost until the gap between the packet number (PN) of an outstanding packet and the largest PN acknowledged becomes greater than N.\n\nThis, in turn, means that the receiver does not need to acknowledge such packets immediately if the PN of the out-of-order packet falls within the gap defined by ack_frequency.reordering_threshold.\n\nOtherwise, the packet must be acknowledged immediately, but as said, we already have the text that covers this case.\n\nConsider time-based loss detection:\n\nThe idea behind time-based loss detection is that any packet can be acknowledged within a certain timeframe. It is reasonable to argue that this timeframe equals the one-way delay in each direction plus the max_ack_delay value. Under that interpretation, it is safe to delay ACKs for out-of-order packets that fall within the threshold advertised in the ACK_FREQUENCY frame.",
          "createdAt": "2025-05-19T22:02:12Z",
          "updatedAt": "2025-05-19T22:02:45Z"
        },
        {
          "author": "martinduke",
          "authorAssociation": "CONTRIBUTOR",
          "body": "If that's the intent of the section, I agree that's fine. But I interpreted it differently and there's an editorial issue that this needs to be written.\n\nAs I read it, there are two different requirements for an ACK, which are both sufficient:\n\n- largest_unacked - smallest_unreported_missing > Reordring_threshold\n- packet_number < largest_acked\n\nThe first usually happens when the incoming packets increases largest_acked.\n\nThe second is the case I'm concerned about.\n\nIf my initial 11-packet example above really should result in only five ACKs, then the paragraphs should be rewritten:\n\nOLD\nWhen an ack-eliciting packet is received with a packet number less than Largest Acked, this still triggers an immediate acknowledgement in an effort to avoid the packet being spuriously declared lost.\n\nNEW\nWhen the reordering threshold is not zero, and an ack-eliciting packet is received with a packet number at least Reordering Threshold behind Largest Acked, this still triggers an immediate acknowledgement in an effort to avoid the packet being spuriously declared lost.\n\n I would be fine with that; it might be better than deleting the paragraph entirely.\n",
          "createdAt": "2025-05-20T14:45:50Z",
          "updatedAt": "2025-05-20T14:45:50Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "@martinduke Of course you are correct.\n\nIt\u2019s not only when smallest_unreported_missing changes. *Any* change happening outside of the reordering window should be shared immediately by sending ACKs.",
          "createdAt": "2025-05-20T23:57:02Z",
          "updatedAt": "2025-05-20T23:57:02Z"
        },
        {
          "author": "MarcoPolo",
          "authorAssociation": "NONE",
          "body": "I've started implementing this draft, and I've spent some time thinking about this. I agree with @kazuho's  point:\n\n> Any change happening outside of the reordering window should be shared immediately by sending ACKs.\n\nConsider that the text prior to #319 says:\u2028\n\n> Largest Reported Missing: The largest packet number that could be declared lost with the specified Reordering Threshold, which is Largest Acked - Reordering Threshold.\n\nMy understanding of this text means that we cannot declare packet numbers greater than Largest Acked - Reordering threshold as lost. If they are not declared as lost, then there's no point in sending an immediate ack upon receiving them.\n\nWe should only send an immediate ack to assist with loss detection *if* we would classify that packet as lost.\n\u2028\nAs an example:\n\n\u2028Given:\nReordering Threshold = 2\nAck-Eliciting Threshold = 2\n\nThe case with reordering, but no immediate ack due to reordering:\n\n| Packet Number | Should Send Ack | Notes                                   |\n|---------------|-----------------|-----------------------------------------|\n| 0             | 0               |                                         |\n| 1             | 0               |                                         |\n| 3             | 1               | Ack because we've seen 3 packets        |\n| 2             | 0               | No ack because 2 was never considered lost |\n| 4             | 0               |                                         |\n| 5             | 1               | Ack because we've seen 3 more packets   |\u2028\u2028\n\nHere's another example where we do declare a packet as lost and send another ack after receiving it:\n\n| Packet Number | Should Send Ack | Notes                                      |\n|---------------|-----------------|--------------------------------------------|\n| 0             | 0               |                                            |\n| 1             | 0               |                                            |\n| 3             | 1               | Ack because we've seen 3 packets           |\n| 4             | 1               | Ack because 2 is now declared lost         |\n| 2             | 1               | Ack because 2 was received (change outside the reordering window) |\n| 5             | 0               |                                            |\n\n\nThis isn't counter to what is defined in RFC 9000:\n \n```\n\u2028In order to assist loss detection at the sender, an endpoint SHOULD generate and send an ACK frame without delay when it receives an ack-eliciting packet either:\n\n * when the received packet has a packet number less than another ack-eliciting packet that has been received, or\n```\n\nThat is just the case when reordering threshold is equal to 1. Which is to say every reordering results in an ack.\n\n\u2028I think we should revert #319, and I think the ack frequency draft text should be clearer. Here's a suggestion:\n\n\u2028\u2028OLD:\n\n```\n\u2028Largest Unacked:\n: The largest packet number among all received ack-eliciting packets.\n\nLargest Acked:\n: The Largest Acknowledged value sent in an ACK frame.\n\nLargest Reported Missing:\n: The largest packet number that could be declared lost with the specified\n  Reordering Threshold, which is Largest Acked - Reordering Threshold.\n\nUnreported Missing:\n: Packets with packet numbers between the Largest Unacked and Largest Reported\n  Missing that have not yet been received.\n\nAn endpoint that receives an ACK_FREQUENCY frame with a non-zero Reordering\nThreshold value SHOULD send an immediate ACK when the gap\nbetween the smallest Unreported Missing packet and the Largest Unacked is greater\nthan or equal to the Reordering Threshold value. Sending this additional ACK will\nreset the max_ack_delay timer and Ack-Eliciting Threshold counter (as any ACK\nwould do).\n```\n\n\u2028\u2028NEW:\u2028\n\n```\n\u2028Largest Packet Number Seen:\n: The largest packet number among all received ack-eliciting packets.\n\nReordering Window:\n: The packet numbers in between the Largest Packet Number Seen and the Largest\n  Packet Number Seen - Reordering Threshold.\n\nAn endpoint that receives an ACK_FREQUENCY frame with a non-zero Reordering\nThreshold value SHOULD send an immediate ACK when there are changes outside the\nReordering Window. These changes include a packet number that can now be\ndeclared missing due to receiving a new Largest Packet Number Seen, or a\nacknowledging a previously declared missing packet.\n```\n\nI like phrasing it in terms of the reordering window, which is relative to the largest packet number seen.\u2028\n\n---\n\n\u2028\u2028To come back to @martinduke original example, I think the correct thing would be to ack every other packet due to the ack eliciting threshold, but no acks due to reordering as the reordering window is essentially infinite with reordering threshold set to 0.",
          "createdAt": "2025-08-12T01:17:11Z",
          "updatedAt": "2025-08-12T01:17:11Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "As discussed at IETF-123, we decided to include this. PR #322 proposed this change and is ready to merge after more editorial review!",
          "createdAt": "2025-08-12T17:05:09Z",
          "updatedAt": "2025-08-12T17:05:09Z"
        }
      ]
    },
    {
      "number": 323,
      "id": "I_kwDODddxTs684KYq",
      "title": "Trimmed Ack Ranges",
      "url": "https://github.com/quicwg/ack-frequency/issues/323",
      "state": "OPEN",
      "author": "martinduke",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "has-pr"
      ],
      "body": "There is an edge case where the reordering_threshold and ack_frequency are quite large, and there is also a large number of ACK ranges. I guess this could happen where there's a large BDP and a nasty, non-bursty loss pattern.\n\nIf the ACK has to be truncated due to length, this can result in cases where received packets are not acknowledged before the ranges that contain them are truncated. This would result in a large amount of spurious loss.\n\nIt is simple enough to write code to avoid this if the ack range limit is a constant: always send an ACK if the newly arrived packet is in the lowest allowed ack range. It's a bit harder if ACK ranges are truncated dynamically (e.g. based on the size of other frames in the packet). I don't know if any QUIC implementation tries to do it dynamically.\n\nI don't think any core changes to the spec are necessary, but there might be a \"don't do that\", or something about sending the ACK anyway when in danger of truncation.",
      "createdAt": "2025-06-23T16:55:52Z",
      "updatedAt": "2025-08-20T11:13:47Z",
      "closedAt": null,
      "comments": [
        {
          "author": "martinduke",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I believe the correct algorithm is\n```\nif ((num_ack_ranges == max_num_ack_ranges) &&\n    (largest_acked < lowest_ack_range.max())) {\n    SendAck();\n}\n```\n\nAnd it is only with the ACK_FREQUENCY frame that one can possibly end up in this state.\n\nAs I said, if max_num_ack_ranges is very dynamic I'm not sure how to handle things.",
          "createdAt": "2025-06-25T22:31:49Z",
          "updatedAt": "2025-06-25T22:31:49Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Why is it only with the ACK-FREQUENCY frame that this can happen? the ACK-Frequency frames provides guidance but the decision is taken by the ACK sender and an ACK sender could already today choice a low ACK frequency. ",
          "createdAt": "2025-07-07T15:49:32Z",
          "updatedAt": "2025-07-07T15:49:32Z"
        },
        {
          "author": "martinduke",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Under RFC9000 behavior, a new ACK range implies missing packets, which SHOULD trigger a new ACK. That makes it impossible for a received packet to never be ACKed unless the maximum number of ACK ranges is 1, unless the sender is violating the SHOULD, in which case, they were warned.\n\nThis draft changes what an ACK sender SHOULD do. An ACK sender needs to be cognizant of how its ACK range limit (which is not communicated) interacts with the peer's ACK_FREQUENCY frame.",
          "createdAt": "2025-07-07T17:21:14Z",
          "updatedAt": "2025-07-07T17:21:14Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think rfc9000 states that very packet needs be ack\u2019ed eventually. This requirement doesn\u2019t change. If your choice of ack range/frequency requires you to sent additional acks, that\u2019s just the way it is, independent of the fact if the other ends tells you its preferences about ack frequency.",
          "createdAt": "2025-07-07T18:05:28Z",
          "updatedAt": "2025-07-07T18:05:28Z"
        },
        {
          "author": "martinduke",
          "authorAssociation": "CONTRIBUTOR",
          "body": "That seems like a very subtle thing for people implementing ACK_FREQUENCY to figure out.",
          "createdAt": "2025-07-07T18:14:03Z",
          "updatedAt": "2025-07-07T18:14:03Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Okay, that\u2019s a different issue and maybe something we can clarify. ",
          "createdAt": "2025-07-07T18:21:31Z",
          "updatedAt": "2025-07-07T18:21:31Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I proposed PR #328 for issue #327 but I believe this might also address this issue...? Please check @martinduke !",
          "createdAt": "2025-08-12T17:32:18Z",
          "updatedAt": "2025-08-12T17:32:18Z"
        }
      ]
    },
    {
      "number": 324,
      "id": "I_kwDODddxTs69WsC3",
      "title": "Losing the first packet in a PN space",
      "url": "https://github.com/quicwg/ack-frequency/issues/324",
      "state": "CLOSED",
      "author": "martinduke",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Say a sender starts with PN 0 in the 1-RTT space, then sends an ACK_FREQUENCY frame with a high ack_eliciting_threshold in PN 1. But PN 0 is lost.\n\nAccording to the logic in RFC 9000, 13.2.1, packet 0 is not considered \"missing\" by the receiver in the sense that PN 1 will not trigger an ACK for creating a gap. It follows that no value of reordering_threshold will trigger an ACK for any consecutive packet greater than zero. If ack_eliciting_threshold is high, there could be quite a bit of delay in reporting the loss to the sender.\n\nI'm reluctant to say that there should be normative change, but this one of a bunch of not-obvious dynamics to picking high thresholds that maybe should be mentioned.\n\n",
      "createdAt": "2025-06-25T20:15:18Z",
      "updatedAt": "2025-07-07T17:29:01Z",
      "closedAt": "2025-07-07T17:29:01Z",
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Sounds like an initialisation problem if I understood you correctly. But isn't that the same in RFC9002. If you loose PN0, you don ack PN 1 immediately but by default would likely ack PN 2?",
          "createdAt": "2025-07-07T15:52:25Z",
          "updatedAt": "2025-07-07T15:52:25Z"
        },
        {
          "author": "martinduke",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I've thought about this a bit more and it's not a big deal. Closing.",
          "createdAt": "2025-07-07T17:29:01Z",
          "updatedAt": "2025-07-07T17:29:01Z"
        }
      ]
    },
    {
      "number": 325,
      "id": "I_kwDODddxTs7AWNRz",
      "title": "shorter transport parameter",
      "url": "https://github.com/quicwg/ack-frequency/issues/325",
      "state": "CLOSED",
      "author": "marten-seemann",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "The transport parameter currently uses an 8-byte varint. Given that this extension will likely be widely supported, it would be nice to choose a smaller value.",
      "createdAt": "2025-07-14T01:04:59Z",
      "updatedAt": "2025-07-14T01:19:43Z",
      "closedAt": "2025-07-14T01:19:43Z",
      "comments": [
        {
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Section 10.1 already states:\n> When this document is approved, IANA is requested to assign a\n   permanent allocation of a codepoint in the 0-63 range to replace the\n   provisional codepoint described above.",
          "createdAt": "2025-07-14T01:19:43Z",
          "updatedAt": "2025-07-14T01:19:43Z"
        }
      ]
    },
    {
      "number": 327,
      "id": "I_kwDODddxTs7ChLU4",
      "title": "Can we check that ACK Frequency is robust to loss?",
      "url": "https://github.com/quicwg/ack-frequency/issues/327",
      "state": "OPEN",
      "author": "gorryfair",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "has-pr"
      ],
      "body": "I'd like to be sure that the advicde in the ACK Frequency I-D is not fargile to disruption of the return path - and this might depened on how often a receiver ACKs, how much it trims the ACK range info and whether some level of packet loss is tolerable for the sender to receive a full enough picture that CC isn't disrupted.\n\nRFC9000 is quite robust to occassional ACK loss. It's one thing to eliminate useless ACKs, maybe though more thought is needed if a reduced rate results in a sender becoming unaware of patterns of loss on the forward direction, especially when there is also some non-zero loss on the return direction.\n\nThis may in someway be related in some way to \"Trimmed Ack Ranges #323\".\n",
      "createdAt": "2025-07-25T14:46:45Z",
      "updatedAt": "2025-08-20T11:13:56Z",
      "closedAt": null,
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think this issue is related to #323 and similar as I said there I think this is already addressed by RFC9000:\n\nSection 13.2.1 of RFC9000 state the requirement that every packet must be acknowledge (at least once):\n> Every packet SHOULD be acknowledged at least once, and ack-eliciting packets MUST be acknowledged at least once within the maximum delay an endpoint communicated using the max_ack_delay transport parameter; \n\nAnd in Section 13.2.4. on ACK ranges, it is stated an endpoint can detect if a packet containing an ACK frame was lost or received as as such can trim the ACK range based on this. Section 13.2.4. says\n> When a packet containing an ACK frame is acknowledged, the receiver can stop acknowledging packets less than or equal to the Largest Acknowledged field in the sent ACK frame.\n\nHowever it is also noted in the same section that the mechanism does not guarantee that every ack is seen by the sender:\n> In cases with ACK frame loss and reordering, this approach does not guarantee that every acknowledgment is seen by the sender before it is no longer included in the ACK frame. Packets could be received out of order, and all subsequent ACK frames containing them could be lost. In this case, the loss recovery algorithm could cause spurious retransmissions, but the sender will continue making forward progress.\n\nAs such I think we can maybe add a note that a) the requirement to ack all packets is still true and needs to be considered, and b) a lower ack frequency could cause more spurious retransmissions if ACKs get lost and this needs to be considered as well when trimming the ACK range in an ACK frame.\n",
          "createdAt": "2025-08-12T17:21:25Z",
          "updatedAt": "2025-08-12T17:21:25Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "PR #328 proposed some text. Please have a look if this addresses this issue sufficiently!",
          "createdAt": "2025-08-12T17:31:41Z",
          "updatedAt": "2025-08-12T17:31:41Z"
        }
      ]
    },
    {
      "number": 329,
      "id": "I_kwDODddxTs7GZfs6",
      "title": "off-by-one in definition of \"Ack-Eliciting Threshold\" in draft-ietf-quic-ack-frequency-11",
      "url": "https://github.com/quicwg/ack-frequency/issues/329",
      "state": "CLOSED",
      "author": "nealcardwell",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "The definition of \"Ack-Eliciting Threshold\" in draft-ietf-quic-ack-frequency-11 is: \"Ack-Eliciting Threshold: A variable-length integer representing the maximum number of ack-eliciting packets the recipient of this frame receives before sending an acknowledgment.\"\n\nAFAICT this definition seems to have an off-by-one error that makes it inconsistent with the other explanations involving the \"Ack-Eliciting Threshold\", which say:\n\n+ (1) \"... By default, an endpoint sends an ACK frame for every other ack-eliciting packet, as specified in Section 13.2.2 of [QUIC-TRANSPORT], which corresponds to a value of 1.\"\n\n+ (2) \"... the data receiver sends an acknowledgment when one of the following conditions are met since the last acknowledgement was sent: The number of received ack-eliciting packets is greater than the Ack-Eliciting Threshold. ...\"\n\n+ (3) \"When the number of in-flight ack-eliciting packets is larger than the ACK-Eliciting Threshold, an endpoint can expect that the peer will not need to wait for its max_ack_delay period before sending an acknowledgment. \"\n\nFor example, suppose a QUIC endpoint sends an \"Ack-Eliciting Threshold\" of 1. By the definition of  \"Ack-Eliciting Threshold\", this is saying \"the maximum number of ack-eliciting packets the recipient of this frame receives before sending an acknowledgment\" is 1. Which AFAICT means that when the recipient receives 1 packet, it should theb send an immediate ACK. But that directly contradicts (1), which says that an \"Ack-Eliciting Threshold\" of 1 means to send \"an ACK frame for every other ack-eliciting packet\".\n\nA suggestion would be to s/before/without/ in the definition. That would make the definition: \"Ack-Eliciting Threshold: A variable-length integer representing the maximum number of ack-eliciting packets the recipient of this frame receives _without_ sending an acknowledgment.\" AFAICT that fixes things. For example: suppose a QUIC endpoint sends an \"Ack-Eliciting Threshold\" of 1. Then that means \"the maximum number of ack-eliciting packets the recipient of this frame receives _without_ sending an acknowledgment\" is 1. So if the recipient receives 1 ack-eliciting packet, it can decide not to send an ACK. Then when the 2nd ack-eliciting packet arrives, it must send an immediate ack.\n\ncc: @ianswett @janaiyengar @mirjak ",
      "createdAt": "2025-08-17T18:40:43Z",
      "updatedAt": "2025-08-20T11:13:21Z",
      "closedAt": "2025-08-20T11:13:21Z",
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thanks for catching this @nealcardwell ! At some point we changed the definition and either we forgot to adjust this or we interpreted \"before\" as \"without\" as you suggest. In any case, I agree that this is definitely not clear and confusing, and created a PR as you suggested: #330\n\nFor me this simply word change makes it clear but let's see if others prefer maybe a different wording....",
          "createdAt": "2025-08-18T09:01:52Z",
          "updatedAt": "2025-08-18T09:01:52Z"
        }
      ]
    },
    {
      "number": 332,
      "id": "I_kwDODddxTs7MGTuw",
      "title": "Section 6.3 is not about \"Sending Acknowledgments\"",
      "url": "https://github.com/quicwg/ack-frequency/issues/332",
      "state": "OPEN",
      "author": "kazuho",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Section 6 is titled \"Sending Acknowledgments\" that sounds like it specifies the behavior of the receiver. However, Section 6.3 is an exception. Titled \"Setting the Reordering Threshold value,\" the sub-section talks about the responsibility of the sender.\n\nIt think Section 6.3 should either:\n* become a section of its own next to Section 7 (Computation of the Probe Timeout Period) and Section 8 (Determining Acknowledgment Frequency), or\n* become a sub-section of Section 4 (ACK_FREQUENCY frame).",
      "createdAt": "2025-09-17T01:16:51Z",
      "updatedAt": "2025-09-17T01:16:51Z",
      "closedAt": null,
      "comments": []
    }
  ],
  "pulls": [
    {
      "number": 4,
      "id": "MDExOlB1bGxSZXF1ZXN0MzY0MzAyMzgx",
      "title": "Change Time Tolerance to Update Max Ack Delay",
      "url": "https://github.com/quicwg/ack-frequency/pull/4",
      "state": "MERGED",
      "author": "janaiyengar",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This PR changes a few things:\r\n- Introduces a `min_ack_delay` TP for negotiating extension use\r\n- Changes `Time Tolerance` to `Update Max Ack Delay`\r\n- Makes the fields required\r\n- Specifies invalid values\r\n\r\nCloses #2.",
      "createdAt": "2020-01-17T20:15:30Z",
      "updatedAt": "2025-02-06T13:20:42Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "master",
      "baseRefOid": "e95015dedcd85f71f3109160323aac0713023629",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "jri/update-mad",
      "headRefOid": "65b71253ca21f0a95ad47240f717928c6e30a27a",
      "closedAt": "2020-01-17T20:29:05Z",
      "mergedAt": "2020-01-17T20:29:05Z",
      "mergedBy": "janaiyengar",
      "mergeCommit": {
        "oid": "960e862fb19ca11f2285121b32270db46c139103"
      },
      "comments": [
        {
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm merging this, let's address issues in later PRs.",
          "createdAt": "2020-01-17T20:29:00Z",
          "updatedAt": "2020-01-17T20:29:00Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 7,
      "id": "MDExOlB1bGxSZXF1ZXN0MzY0MzM1NDkz",
      "title": "Add section on PTO computation with updated max_ack_delay",
      "url": "https://github.com/quicwg/ack-frequency/pull/7",
      "state": "MERGED",
      "author": "janaiyengar",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #1.",
      "createdAt": "2020-01-17T21:58:26Z",
      "updatedAt": "2025-02-06T13:20:43Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "master",
      "baseRefOid": "960e862fb19ca11f2285121b32270db46c139103",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "jri/pto",
      "headRefOid": "11fbdcd13c2250094e7216576c9d032709f0d0ee",
      "closedAt": "2020-01-17T21:59:36Z",
      "mergedAt": "2020-01-17T21:59:36Z",
      "mergedBy": "janaiyengar",
      "mergeCommit": {
        "oid": "fc3eb17d4cf79f371ec138c26371e78ecc4d9b8b"
      },
      "comments": [
        {
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "body": "merging.",
          "createdAt": "2020-01-17T21:59:30Z",
          "updatedAt": "2020-01-17T21:59:30Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 8,
      "id": "MDExOlB1bGxSZXF1ZXN0MzY0MzQ4NTYy",
      "title": "Add sequence number to frame",
      "url": "https://github.com/quicwg/ack-frequency/pull/8",
      "state": "MERGED",
      "author": "janaiyengar",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #5.",
      "createdAt": "2020-01-17T22:46:39Z",
      "updatedAt": "2025-02-06T13:20:44Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "master",
      "baseRefOid": "fc3eb17d4cf79f371ec138c26371e78ecc4d9b8b",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "jri/seqnum",
      "headRefOid": "6529108ccdbcec4f86ee9e6340124f0df66c3e59",
      "closedAt": "2020-01-17T22:47:58Z",
      "mergedAt": "2020-01-17T22:47:58Z",
      "mergedBy": "janaiyengar",
      "mergeCommit": {
        "oid": "0b23026b4f9760a2ab0325dcef702770cbaee3ed"
      },
      "comments": [
        {
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "body": "merging.",
          "createdAt": "2020-01-17T22:47:52Z",
          "updatedAt": "2020-01-17T22:47:52Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 9,
      "id": "MDExOlB1bGxSZXF1ZXN0MzY0MzUyMTkw",
      "title": "Handle initial conditions",
      "url": "https://github.com/quicwg/ack-frequency/pull/9",
      "state": "MERGED",
      "author": "janaiyengar",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "... and some editorializing.",
      "createdAt": "2020-01-17T23:02:08Z",
      "updatedAt": "2025-02-06T13:20:44Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "master",
      "baseRefOid": "0b23026b4f9760a2ab0325dcef702770cbaee3ed",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "jri/initial",
      "headRefOid": "bf23ce91fd410dcef64ff53b4e561828469cf795",
      "closedAt": "2020-01-17T23:02:30Z",
      "mergedAt": "2020-01-17T23:02:30Z",
      "mergedBy": "janaiyengar",
      "mergeCommit": {
        "oid": "254044e375d9517b107a2d789534d466b344caa4"
      },
      "comments": [
        {
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "body": "merging.",
          "createdAt": "2020-01-17T23:02:21Z",
          "updatedAt": "2020-01-17T23:02:21Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 10,
      "id": "MDExOlB1bGxSZXF1ZXN0MzY0MzYzOTcy",
      "title": "Add reordering tolerance",
      "url": "https://github.com/quicwg/ack-frequency/pull/10",
      "state": "MERGED",
      "author": "janaiyengar",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #6.",
      "createdAt": "2020-01-18T00:00:59Z",
      "updatedAt": "2025-02-06T13:20:46Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "master",
      "baseRefOid": "254044e375d9517b107a2d789534d466b344caa4",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "jri/reordering",
      "headRefOid": "e6dbc9a96c2f02d6556e205c044515b16aa678a3",
      "closedAt": "2020-01-18T00:01:17Z",
      "mergedAt": "2020-01-18T00:01:16Z",
      "mergedBy": "janaiyengar",
      "mergeCommit": {
        "oid": "06792883fc189e7296ea0fcf48e96bdd9b127e4a"
      },
      "comments": [
        {
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "body": "merging.",
          "createdAt": "2020-01-18T00:01:11Z",
          "updatedAt": "2020-01-18T00:01:11Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 11,
      "id": "MDExOlB1bGxSZXF1ZXN0MzY0MzY5Nzk4",
      "title": "Add references, add Frame Type field to ACK-FREQUENCY frame",
      "url": "https://github.com/quicwg/ack-frequency/pull/11",
      "state": "MERGED",
      "author": "janaiyengar",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-01-18T00:33:57Z",
      "updatedAt": "2025-02-06T13:20:47Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "master",
      "baseRefOid": "3a7ca17cd9c65cf3073ee63d991374318e985659",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "jri/refs",
      "headRefOid": "d1677752b7ed819995d6ced4b4c7a6ed0f64beaa",
      "closedAt": "2020-01-18T00:48:03Z",
      "mergedAt": "2020-01-18T00:48:03Z",
      "mergedBy": "janaiyengar",
      "mergeCommit": {
        "oid": "ee639b160220d60b87fe03689a459049247b7d02"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 12,
      "id": "MDExOlB1bGxSZXF1ZXN0MzY1MDYyNjEy",
      "title": "Editorial comments",
      "url": "https://github.com/quicwg/ack-frequency/pull/12",
      "state": "MERGED",
      "author": "ianswett",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Plus fixing one spot where it said 2^14, but I think it should have been 2^24",
      "createdAt": "2020-01-21T02:03:39Z",
      "updatedAt": "2025-02-06T13:20:48Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "master",
      "baseRefOid": "0402c2a1f495dae0a97a19a9fbfb11bc9afcff0c",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "ianswett-editorial",
      "headRefOid": "8f28d22bee0aaccd82323410ea50854309445a24",
      "closedAt": "2020-01-21T18:41:05Z",
      "mergedAt": "2020-01-21T18:41:05Z",
      "mergedBy": "janaiyengar",
      "mergeCommit": {
        "oid": "c45b03bbe836e6321f12a0373544b247c117ac9b"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2MTAzODQw",
          "commit": {
            "abbreviatedOid": "8f28d22"
          },
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-01-21T18:40:59Z",
          "updatedAt": "2020-01-21T18:40:59Z",
          "comments": []
        }
      ]
    },
    {
      "number": 13,
      "id": "MDExOlB1bGxSZXF1ZXN0MzY1NDUwNzgy",
      "title": "A few more suggestions",
      "url": "https://github.com/quicwg/ack-frequency/pull/13",
      "state": "MERGED",
      "author": "ianswett",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Changed the error code to FRAME_ENCODING_ERROR and removed a condition for update which I think may end up causing correctness issues.",
      "createdAt": "2020-01-21T18:35:52Z",
      "updatedAt": "2025-02-06T13:20:50Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "master",
      "baseRefOid": "0402c2a1f495dae0a97a19a9fbfb11bc9afcff0c",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "ianswett-editorial2",
      "headRefOid": "8996a31f11771c95d07083b826703d9be5cfa8e1",
      "closedAt": "2020-01-21T20:21:30Z",
      "mergedAt": "2020-01-21T20:21:30Z",
      "mergedBy": "janaiyengar",
      "mergeCommit": {
        "oid": "b78e2486498a51aacdb7b6681709f40eff40a157"
      },
      "comments": [
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "I removed the comment you thought was unnecessary, and we can discuss it and any other changes to the section separately.",
          "createdAt": "2020-01-21T19:16:01Z",
          "updatedAt": "2020-01-21T19:16:01Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2MTA0Njk1",
          "commit": {
            "abbreviatedOid": "c09c66a"
          },
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-01-21T18:42:23Z",
          "updatedAt": "2020-01-21T18:50:10Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "I don't think this is necessary. The TP says nothing about ECN, and ECN says nothing about reordering.",
              "createdAt": "2020-01-21T18:42:23Z",
              "updatedAt": "2020-01-21T19:15:08Z"
            },
            {
              "originalPosition": 40,
              "body": "```suggestion\r\nfrom the most recent frame (frame with the highest sequence number) that was acknowledged.\r\n```",
              "createdAt": "2020-01-21T18:43:38Z",
              "updatedAt": "2020-01-21T19:15:08Z"
            },
            {
              "originalPosition": 38,
              "body": "```suggestion\r\nMUST use the maximum of the current value and all those in flight.  If there are\r\n```",
              "createdAt": "2020-01-21T18:44:00Z",
              "updatedAt": "2020-01-21T19:15:08Z"
            },
            {
              "originalPosition": 39,
              "body": "```suggestion\r\nACK-FREQUENCY frames in flight, then endpoints MUST use the `max_ack_delay` value\r\n```",
              "createdAt": "2020-01-21T18:48:42Z",
              "updatedAt": "2020-01-21T19:15:08Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2MTI1ODkx",
          "commit": {
            "abbreviatedOid": "8996a31"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-01-21T19:16:16Z",
          "updatedAt": "2020-01-21T19:16:16Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "Removed.",
              "createdAt": "2020-01-21T19:16:16Z",
              "updatedAt": "2020-01-21T19:16:16Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2MTY1MjMx",
          "commit": {
            "abbreviatedOid": "8996a31"
          },
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-01-21T20:21:02Z",
          "updatedAt": "2020-01-21T20:21:02Z",
          "comments": []
        }
      ]
    },
    {
      "number": 15,
      "id": "MDExOlB1bGxSZXF1ZXN0MzY1NDUzNzE3",
      "title": "Editorial for undesirable consequence",
      "url": "https://github.com/quicwg/ack-frequency/pull/15",
      "state": "MERGED",
      "author": "ianswett",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Small readability tweaks",
      "createdAt": "2020-01-21T18:43:56Z",
      "updatedAt": "2025-02-06T13:20:49Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "master",
      "baseRefOid": "c45b03bbe836e6321f12a0373544b247c117ac9b",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "ianswett-editorial3",
      "headRefOid": "3fdeed2d74c382a3dc7c5b79297c0344028a422a",
      "closedAt": "2020-01-21T20:22:06Z",
      "mergedAt": "2020-01-21T20:22:06Z",
      "mergedBy": "janaiyengar",
      "mergeCommit": {
        "oid": "7e2a9ce4a05201d4049794cc8ef1c75393658032"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2MTY1NzUw",
          "commit": {
            "abbreviatedOid": "3fdeed2"
          },
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-01-21T20:22:01Z",
          "updatedAt": "2020-01-21T20:22:01Z",
          "comments": []
        }
      ]
    },
    {
      "number": 16,
      "id": "MDExOlB1bGxSZXF1ZXN0MzY1NDk3NzA5",
      "title": "Re-introduce text that was inadvertently removed",
      "url": "https://github.com/quicwg/ack-frequency/pull/16",
      "state": "MERGED",
      "author": "janaiyengar",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "and reflow some text.",
      "createdAt": "2020-01-21T20:31:17Z",
      "updatedAt": "2025-02-06T13:20:50Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "master",
      "baseRefOid": "7e2a9ce4a05201d4049794cc8ef1c75393658032",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "jri/fixtext",
      "headRefOid": "074576cbea9937431f380f30537f99bc7caebc1c",
      "closedAt": "2020-01-21T21:11:43Z",
      "mergedAt": "2020-01-21T21:11:43Z",
      "mergedBy": "janaiyengar",
      "mergeCommit": {
        "oid": "c111991f576015fa11cb6c3e575c3a44412fdd0e"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2MTcyMjM2",
          "commit": {
            "abbreviatedOid": "3715a8d"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-01-21T20:33:25Z",
          "updatedAt": "2020-01-21T20:33:26Z",
          "comments": [
            {
              "originalPosition": 51,
              "body": "I intentionally removed this, because I think it results in indeterminate behavior.  I think you either need to use packet number or sequence number, not both.",
              "createdAt": "2020-01-21T20:33:25Z",
              "updatedAt": "2020-01-21T20:56:10Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2MTc0MTEy",
          "commit": {
            "abbreviatedOid": "3715a8d"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-01-21T20:36:42Z",
          "updatedAt": "2020-01-21T20:36:43Z",
          "comments": [
            {
              "originalPosition": 51,
              "body": "Ok, I misread this the first time as packet number for some reason.  I think we need to find a different term besides sequence number at some point.  Also, when is sequence number capitalized?  It seems other fields in the frame always are.",
              "createdAt": "2020-01-21T20:36:43Z",
              "updatedAt": "2020-01-21T20:56:10Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2MTc0MTYx",
          "commit": {
            "abbreviatedOid": "3715a8d"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-01-21T20:36:47Z",
          "updatedAt": "2020-01-21T20:36:47Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2MTg1ODEx",
          "commit": {
            "abbreviatedOid": "3715a8d"
          },
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-01-21T20:57:19Z",
          "updatedAt": "2020-01-21T20:57:20Z",
          "comments": [
            {
              "originalPosition": 51,
              "body": "I had packet number earlier, but that was mistakenly left over. That should simply have been changed to sequence number, which is what this PR does.\r\n\r\nThe rule we've used is field names are capitalized, but when talking about the concept, it's not. (\"sequence number of the frame\" vs \"Sequence Number field in the frame\"). This is the same as how we did sequence number of NCID frames in the transport draft -- both cases are used in the same manner.",
              "createdAt": "2020-01-21T20:57:20Z",
              "updatedAt": "2020-01-21T20:57:20Z"
            }
          ]
        }
      ]
    },
    {
      "number": 21,
      "id": "MDExOlB1bGxSZXF1ZXN0MzY4Nzc2MzE3",
      "title": "Define codepoints for the transport param and frame",
      "url": "https://github.com/quicwg/ack-frequency/pull/21",
      "state": "MERGED",
      "author": "ianswett",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Also rename ACK-FREQUENCY to ACK_FREQUENCY to Fix #19 ",
      "createdAt": "2020-01-29T21:33:37Z",
      "updatedAt": "2025-02-06T13:20:51Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "master",
      "baseRefOid": "c111991f576015fa11cb6c3e575c3a44412fdd0e",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "ianswett-codepoints",
      "headRefOid": "51d932182544da7ccfc28b070c26ac451dccd2aa",
      "closedAt": "2020-01-31T02:49:44Z",
      "mergedAt": "2020-01-31T02:49:44Z",
      "mergedBy": "janaiyengar",
      "mergeCommit": {
        "oid": "3b23c62e6bdb5f5a483a6dfeb73bd2e2030e0f67"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 23,
      "id": "MDExOlB1bGxSZXF1ZXN0MzY4ODA1MjMx",
      "title": "Remove mention of slow start and hystart",
      "url": "https://github.com/quicwg/ack-frequency/pull/23",
      "state": "MERGED",
      "author": "ianswett",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #14  by removing references to slow start, hystart, and paced chirping.\r\n\r\nSlow start and BBR startup aren't quite the same as @mjoras mentioned, hystart isn't specified for QUIC, and paced chirping is not an IETF draft to my knowledge.",
      "createdAt": "2020-01-29T22:47:38Z",
      "updatedAt": "2025-02-06T13:20:52Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "master",
      "baseRefOid": "c111991f576015fa11cb6c3e575c3a44412fdd0e",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "ianswett-remove-mentions",
      "headRefOid": "e8a98fb32d556a85410faeeb44ad1edd730a5143",
      "closedAt": "2020-01-31T02:50:22Z",
      "mergedAt": "2020-01-31T02:50:22Z",
      "mergedBy": "janaiyengar",
      "mergeCommit": {
        "oid": "59bc418cfc1dc4ea350b50897b5d83af00d90568"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 24,
      "id": "MDExOlB1bGxSZXF1ZXN0MzcwMDY0MDk1",
      "title": "Use frame instead of TP for reordering",
      "url": "https://github.com/quicwg/ack-frequency/pull/24",
      "state": "MERGED",
      "author": "janaiyengar",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #18.",
      "createdAt": "2020-02-02T22:31:55Z",
      "updatedAt": "2025-02-06T13:20:52Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "master",
      "baseRefOid": "59bc418cfc1dc4ea350b50897b5d83af00d90568",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "jri/ignore-order",
      "headRefOid": "9c70e5961d8abd1b4bdec754af1263cc44a6f2dd",
      "closedAt": "2020-02-03T16:23:11Z",
      "mergedAt": "2020-02-03T16:23:11Z",
      "mergedBy": "janaiyengar",
      "mergeCommit": {
        "oid": "8c88e17ec7acdbc62a9cb26443db47139576a75f"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxOTgxNjAy",
          "commit": {
            "abbreviatedOid": "4953c04"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "I prefer \"Ingnore Reordering\" to \"Ignore Order\", though I admit the latter is slightly shorter.  One suggestion on making the text slightly more proscriptive.",
          "createdAt": "2020-02-03T00:40:28Z",
          "updatedAt": "2020-02-03T00:48:35Z",
          "comments": [
            {
              "originalPosition": 43,
              "body": "How about \", the receiver MUST only send an acknowledgement in response to receiving Packet Tolerance packets or after the updated max_ack_delay has passed, and MUST NOT send an immediate acknowledgement in response to out of order packets.\"",
              "createdAt": "2020-02-03T00:40:29Z",
              "updatedAt": "2020-02-03T16:22:05Z"
            },
            {
              "originalPosition": 13,
              "body": "```suggestion\r\nIgnore Reordering:\r\n```",
              "createdAt": "2020-02-03T00:45:11Z",
              "updatedAt": "2020-02-03T16:22:05Z"
            },
            {
              "originalPosition": 46,
              "body": "```suggestion\r\nrecent frame received from the peer has an `Ignore Reordering` value of `false`\r\n```",
              "createdAt": "2020-02-03T00:46:29Z",
              "updatedAt": "2020-02-03T16:22:05Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyMTAxNTcy",
          "commit": {
            "abbreviatedOid": "4953c04"
          },
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-02-03T09:04:00Z",
          "updatedAt": "2020-02-03T16:22:28Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "This doesn't fit within that space, if you can find a better way to write this out, happy to do it.",
              "createdAt": "2020-02-03T09:04:00Z",
              "updatedAt": "2020-02-03T16:22:28Z"
            },
            {
              "originalPosition": 43,
              "body": "I'm taking the second half of this, the first half seems unnecessary",
              "createdAt": "2020-02-03T09:06:48Z",
              "updatedAt": "2020-02-03T16:22:28Z"
            }
          ]
        }
      ]
    },
    {
      "number": 28,
      "id": "MDExOlB1bGxSZXF1ZXN0MzcxNzQxMzQ4",
      "title": "0 is a valid min_ack_delay",
      "url": "https://github.com/quicwg/ack-frequency/pull/28",
      "state": "MERGED",
      "author": "ianswett",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #26",
      "createdAt": "2020-02-06T07:04:48Z",
      "updatedAt": "2025-02-06T13:20:53Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "master",
      "baseRefOid": "8c88e17ec7acdbc62a9cb26443db47139576a75f",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "ianswett-0-min-ack-delay",
      "headRefOid": "3f8b8e3b640413e8c47ce40437965653a7ef20db",
      "closedAt": "2020-02-06T07:11:18Z",
      "mergedAt": "2020-02-06T07:11:18Z",
      "mergedBy": "janaiyengar",
      "mergeCommit": {
        "oid": "014ca67fd916f5a477fa6abb4a680ca86f51c56b"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0MjM2NzUz",
          "commit": {
            "abbreviatedOid": "3f8b8e3"
          },
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-02-06T07:11:12Z",
          "updatedAt": "2020-02-06T07:11:12Z",
          "comments": []
        }
      ]
    },
    {
      "number": 29,
      "id": "MDExOlB1bGxSZXF1ZXN0MzcyMzc5MTM3",
      "title": "Clarify when you might not retransmit",
      "url": "https://github.com/quicwg/ack-frequency/pull/29",
      "state": "MERGED",
      "author": "ianswett",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "If there's a frame with a larger sequence number, there's no need to retransmit.",
      "createdAt": "2020-02-07T12:04:00Z",
      "updatedAt": "2025-02-06T13:20:54Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "master",
      "baseRefOid": "014ca67fd916f5a477fa6abb4a680ca86f51c56b",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "ianswett-when-retransmit",
      "headRefOid": "b9b12132088c9e01acd43346565097b1389e0a2f",
      "closedAt": "2020-02-27T23:27:06Z",
      "mergedAt": "2020-02-27T23:27:06Z",
      "mergedBy": "janaiyengar",
      "mergeCommit": {
        "oid": "0c59475c5eebf232679612a13fe8cc3b11731a5f"
      },
      "comments": [
        {
          "author": "rpaulo",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thanks, looks good ;-)",
          "createdAt": "2020-02-08T10:58:03Z",
          "updatedAt": "2020-02-08T10:58:03Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 31,
      "id": "MDExOlB1bGxSZXF1ZXN0Mzc1MDMzMTAw",
      "title": "Remove sections from motivations, add implementation considerations.",
      "url": "https://github.com/quicwg/ack-frequency/pull/31",
      "state": "MERGED",
      "author": "mjoras",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I think the motivations section as-is is too long. It spends a lot of time\r\ntalking about what are effectively the tradeoffs. IMO the motivations section\r\nshould specify why it's useful to have the sender control the receiver's ACK\r\nfrequency, and then we can have a separate section for the tradeoffs.\r\n\r\nThis takes a stab at that section, lifting things from motivations and adding\r\nsome new text specifically addressing the nascent stages of a connection. \r\n\r\nI also made some editorial changes to the existing text.\r\n\r\nI am happy to add any additional considerations we think might need to be called out.\r\n\r\nThis attempts to resolve #17 ",
      "createdAt": "2020-02-13T18:53:22Z",
      "updatedAt": "2020-03-19T23:08:56Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "master",
      "baseRefOid": "0c59475c5eebf232679612a13fe8cc3b11731a5f",
      "headRepository": "mjoras/ack-frequency",
      "headRefName": "master",
      "headRefOid": "2e3c981e2711c2f8da242937246c69db291c3031",
      "closedAt": "2020-03-19T23:08:56Z",
      "mergedAt": "2020-03-19T23:08:55Z",
      "mergedBy": "janaiyengar",
      "mergeCommit": {
        "oid": "eb364241a0eef02207841a05a1e20ba9cd072af3"
      },
      "comments": [
        {
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks for the PR, @mjoras ! I like the new text you propose (I've proposed some changes), but I think you might be assuming that ACK_FREQUENCY is only used for delaying acks further. An important point that bears bringing out in the motivation is that a sender might want more frequent acks as well, for example during startup. That's worth capturing in the modified motivation section.",
          "createdAt": "2020-02-27T23:38:29Z",
          "updatedAt": "2020-02-27T23:38:29Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "@mjoras this PR is almost done, any chance you can do another round of updates and we can get it in?",
          "createdAt": "2020-03-07T10:30:23Z",
          "updatedAt": "2020-03-07T10:30:23Z"
        },
        {
          "author": "mjoras",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@ianswett sorry, I'll do some updates today.",
          "createdAt": "2020-03-16T17:03:21Z",
          "updatedAt": "2020-03-16T17:03:21Z"
        },
        {
          "author": "mjoras",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@ianswett @janaiyengar I've updated the PR, I'll watch and iterate on any remaining feedback quickly this time.",
          "createdAt": "2020-03-16T17:21:32Z",
          "updatedAt": "2020-03-16T17:21:32Z"
        },
        {
          "author": "mjoras",
          "authorAssociation": "CONTRIBUTOR",
          "body": "thanks @janaiyengar. Something about vim and the macbook pro keyboard apparently makes me incapable of spelling things properly. I want my desk keyboard back \ud83d\ude42 \r\n\r\n",
          "createdAt": "2020-03-19T20:01:18Z",
          "updatedAt": "2020-03-19T20:01:18Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4NTIzMDc3",
          "commit": {
            "abbreviatedOid": "7ed0a51"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "A few comments and sugestions.",
          "createdAt": "2020-02-13T20:19:56Z",
          "updatedAt": "2020-02-13T20:25:28Z",
          "comments": [
            {
              "originalPosition": 43,
              "body": "The frequency only matters if there are packets that arrive out of order, so it might be worth stating that?",
              "createdAt": "2020-02-13T20:19:56Z",
              "updatedAt": "2020-03-19T19:17:11Z"
            },
            {
              "originalPosition": 47,
              "body": "This is a good use of the word Nascent, but I don't believe nascent is a commonly used word in the congestion control world, so I'd be inclined to call this section \"New Connections\"",
              "createdAt": "2020-02-13T20:21:32Z",
              "updatedAt": "2020-03-19T19:17:11Z"
            },
            {
              "originalPosition": 57,
              "body": "This section seems a bit odd down here given this draft adds an explicit signal for the sender to tell the receiver what ACK strategy it wants.  The section could be re-written to advise the sender to delay sending the ACK_FREQUENCY frame while it's reliant upon frequent acknowledgements to quickly ramp up the congestion controller, and remove the part about how the receiver needs to be cautious about changing its strategy.",
              "createdAt": "2020-02-13T20:24:51Z",
              "updatedAt": "2020-03-19T19:17:11Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4NTUyMzE1",
          "commit": {
            "abbreviatedOid": "7ed0a51"
          },
          "author": "mjoras",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-02-13T21:09:15Z",
          "updatedAt": "2020-02-13T21:09:16Z",
          "comments": [
            {
              "originalPosition": 57,
              "body": "I think I phrased this poorly. What I meant is that the _sender_ should be cautious in sending an ACK_FREQUENCY too early in the connection, as indeed the receiver is meant to be a passive actor in this decision making. I think we are on the same page here, I will rephrase.",
              "createdAt": "2020-02-13T21:09:15Z",
              "updatedAt": "2020-03-19T19:17:11Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4NTUyNTkw",
          "commit": {
            "abbreviatedOid": "7ed0a51"
          },
          "author": "mjoras",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-02-13T21:09:44Z",
          "updatedAt": "2020-02-13T21:09:45Z",
          "comments": [
            {
              "originalPosition": 43,
              "body": "Good point, I agree that's a good addition.",
              "createdAt": "2020-02-13T21:09:44Z",
              "updatedAt": "2020-03-19T19:17:11Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY0NDA1MjQw",
          "commit": {
            "abbreviatedOid": "aaed29f"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "A few more suggestions, but it looks good.",
          "createdAt": "2020-02-25T19:55:05Z",
          "updatedAt": "2020-02-25T20:04:52Z",
          "comments": [
            {
              "originalPosition": 37,
              "body": "```suggestion\r\nstrategies and find those which best suit their congestion controllers, applications, and networks.\r\n```",
              "createdAt": "2020-02-25T19:55:05Z",
              "updatedAt": "2020-03-19T19:17:11Z"
            },
            {
              "originalPosition": 45,
              "body": "How about \"Consequently, a receiver that sends acknowledgements less frequently force the sender to wait for the time threshold instead of the packet threshold.\"?  Are there other specific examples you have in mind?",
              "createdAt": "2020-02-25T19:57:32Z",
              "updatedAt": "2020-03-19T19:17:11Z"
            },
            {
              "originalPosition": 50,
              "body": "```suggestion\r\ncontroller will quickly increase the amount of data in the network until it is\r\n```",
              "createdAt": "2020-02-25T20:04:04Z",
              "updatedAt": "2020-03-19T19:17:11Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY2MDcyNzYy",
          "commit": {
            "abbreviatedOid": "aaed29f"
          },
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "A few comments",
          "createdAt": "2020-02-27T23:31:44Z",
          "updatedAt": "2020-02-27T23:36:26Z",
          "comments": [
            {
              "originalPosition": 45,
              "body": "@ianswett : I don't think that's accurate, since the ack may be received before the time threshold period passes. I  prefer Matt's wording, since it's not necessary to wade into details here.",
              "createdAt": "2020-02-27T23:31:44Z",
              "updatedAt": "2020-03-19T19:17:11Z"
            },
            {
              "originalPosition": 48,
              "body": "```suggestion\r\nMany congestion control algorithms have a special state for the beginning\r\n```",
              "createdAt": "2020-02-27T23:31:59Z",
              "updatedAt": "2020-03-19T19:17:11Z"
            },
            {
              "originalPosition": 60,
              "body": "I agree with the premise, but not with the recommendation. A sender might want to ask the receiver to ack every packet during this phase, and that needs an ACK_FREQUENCY frame. I think what you want to say here is not to advise caution, but to note that a sender could use the frame to make the receiver ack more frequently during this phase.",
              "createdAt": "2020-02-27T23:34:50Z",
              "updatedAt": "2020-03-19T19:17:11Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcwNzM2NjA1",
          "commit": {
            "abbreviatedOid": "aaed29f"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-03-07T10:29:39Z",
          "updatedAt": "2020-03-07T10:29:39Z",
          "comments": [
            {
              "originalPosition": 45,
              "body": "Fair point Jana, ignore my suggestion Matt.",
              "createdAt": "2020-03-07T10:29:39Z",
              "updatedAt": "2020-03-19T19:17:11Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc3MjcyNDk5",
          "commit": {
            "abbreviatedOid": "7f1888f"
          },
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "Thanks, @mjoras -- a few more suggestions.",
          "createdAt": "2020-03-18T22:13:40Z",
          "updatedAt": "2020-03-19T00:20:00Z",
          "comments": [
            {
              "originalPosition": 37,
              "body": "```suggestion\r\nstrategies and find those which best suit their applications and congestion\r\n```",
              "createdAt": "2020-03-18T22:13:40Z",
              "updatedAt": "2020-03-19T19:17:11Z"
            },
            {
              "originalPosition": 48,
              "body": "```suggestion\r\nMany congestion control algorithms have a startup mechanism during the beginning\r\n```",
              "createdAt": "2020-03-18T22:14:40Z",
              "updatedAt": "2020-03-19T19:17:11Z"
            },
            {
              "originalPosition": 49,
              "body": "```suggestion\r\nof a connection.  It is typical that in this period the congestion controller\r\n```",
              "createdAt": "2020-03-18T22:14:55Z",
              "updatedAt": "2020-03-19T19:17:11Z"
            },
            {
              "originalPosition": 55,
              "body": "```suggestion\r\nacknowledgments at a rate which is optimal for the the sender's congestion\r\n```",
              "createdAt": "2020-03-18T22:15:20Z",
              "updatedAt": "2020-03-19T19:17:11Z"
            },
            {
              "originalPosition": 54,
              "body": "```suggestion\r\ncongestion controller is in this state, ensuring that the receiver will send\r\n```",
              "createdAt": "2020-03-18T22:15:37Z",
              "updatedAt": "2020-03-19T19:17:11Z"
            },
            {
              "originalPosition": 53,
              "body": "```suggestion\r\ncontroller's machinery.  A sender can send ACK_FREQUENCY frames while its\r\n```",
              "createdAt": "2020-03-18T22:15:58Z",
              "updatedAt": "2020-03-19T19:17:11Z"
            },
            {
              "originalPosition": 56,
              "body": "```suggestion\r\ncontroller.\r\n```",
              "createdAt": "2020-03-18T22:16:35Z",
              "updatedAt": "2020-03-19T19:17:11Z"
            },
            {
              "originalPosition": 65,
              "body": "```suggestion\r\ncontrollers rely on the timing of peer acknowledgments (an \"ACK clock\") to send\r\ndata, delaying acknowledgments will cause undesirable bursts of data into the\r\nnetwork.\r\n```",
              "createdAt": "2020-03-19T00:09:55Z",
              "updatedAt": "2020-03-19T19:17:11Z"
            },
            {
              "originalPosition": 4,
              "body": "I think deleting this text here leads to the impression that there are only good things that can come out of reducing ACK rate, which leads to the question, why not simply reduce it. I think it's important to note the other points here, and maybe point to the considerations section. How about something like:\r\n\r\n> As discussed in {{implementation}}, there are undesirable consequences to a receiver unilaterally\r\n> reducing the acknowledgement frequency however, in terms of congestion control and loss\r\n> detection. Consequently, a sender needs the ability to express its constraints on the acknowledgement \r\n> frequency to maximize congestion controller performance.\"",
              "createdAt": "2020-03-19T00:18:01Z",
              "updatedAt": "2020-03-19T19:17:11Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc4MTUzMjUy",
          "commit": {
            "abbreviatedOid": "2e3c981"
          },
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Thanks, @mjoras!",
          "createdAt": "2020-03-19T23:08:45Z",
          "updatedAt": "2020-03-19T23:08:45Z",
          "comments": []
        }
      ]
    },
    {
      "number": 32,
      "id": "MDExOlB1bGxSZXF1ZXN0Mzk5Mzc0NzY2",
      "title": "use TRANSPORT_PARAMETER_ERROR",
      "url": "https://github.com/quicwg/ack-frequency/pull/32",
      "state": "MERGED",
      "author": "kazuho",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Use TRANSPORT_PARAMETER_ERROR for communicating errors in TP, rather than using PROTOCOL_VIOLATION.",
      "createdAt": "2020-04-06T04:37:02Z",
      "updatedAt": "2020-04-18T21:02:56Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "master",
      "baseRefOid": "a2283352a7314e730d43681fdac31a54cfab2c7e",
      "headRepository": "kazuho/ack-frequency",
      "headRefName": "kazuho/error-code-for-tp",
      "headRefOid": "52a3464e435320737aefdd7ead30c3c326734321",
      "closedAt": "2020-04-18T21:02:56Z",
      "mergedAt": "2020-04-18T21:02:56Z",
      "mergedBy": "ianswett",
      "mergeCommit": {
        "oid": "bc49468c91497a37105082eb50aa0fd5b2723858"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg3OTI5MDY2",
          "commit": {
            "abbreviatedOid": "52a3464"
          },
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-04-06T04:38:11Z",
          "updatedAt": "2020-04-06T04:38:11Z",
          "comments": []
        }
      ]
    },
    {
      "number": 33,
      "id": "MDExOlB1bGxSZXF1ZXN0NDAwMDIzNzQw",
      "title": "follow the practice of using PROTOCOL_VIOLATION for semantic errors",
      "url": "https://github.com/quicwg/ack-frequency/pull/33",
      "state": "MERGED",
      "author": "kazuho",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "At the moment, the specification requires the use of FRAME_ENCODING_ERROR when an endpoint receives an ACK_FREQUENCY frame with the value of Update Max Ack Delay field being smaller than `min_ack_delay`.\r\n\r\nThat contradicts from the practice of the core draft, that restricts the use of FRAME_ENCODING_ERROR to syntactic (i.e. encoding) errors.\r\n\r\nThis PR fixes the problem by changing the error code to be used in that case to PROTOCOL_VIOLATION.\r\n",
      "createdAt": "2020-04-07T04:01:54Z",
      "updatedAt": "2020-04-18T21:03:17Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "master",
      "baseRefOid": "a2283352a7314e730d43681fdac31a54cfab2c7e",
      "headRepository": "kazuho/ack-frequency",
      "headRefName": "kazuho/semantic-error-is-not-frame-encoding-error",
      "headRefOid": "c97fff0520df677956dbeb9de9a0f8858b1f5d68",
      "closedAt": "2020-04-18T21:03:17Z",
      "mergedAt": "2020-04-18T21:03:17Z",
      "mergedBy": "ianswett",
      "mergeCommit": {
        "oid": "8ba2ebbc82a2259ee8dd3b995c06febb3e78a71d"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg5MzgyNjI0",
          "commit": {
            "abbreviatedOid": "c97fff0"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-04-07T18:29:43Z",
          "updatedAt": "2020-04-07T18:29:43Z",
          "comments": []
        }
      ]
    },
    {
      "number": 36,
      "id": "MDExOlB1bGxSZXF1ZXN0NDA3OTg3NTEx",
      "title": "Replace 'Ignore Order' with 'Packet Loss Threshold'",
      "url": "https://github.com/quicwg/ack-frequency/pull/36",
      "state": "CLOSED",
      "author": "ianswett",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #35 by specifying a 'Packet Loss Threshold' field which allows the sender of the frame to communicate the packet loss threshold to the receiver, avoiding unnecessary immediate ACKs and speeding up loss detection.",
      "createdAt": "2020-04-23T15:09:30Z",
      "updatedAt": "2025-02-06T13:20:55Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "8ba2ebbc82a2259ee8dd3b995c06febb3e78a71d",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "ianswett-packet-loss-threshold",
      "headRefOid": "ec27899e2dd6eca6b474c26d9e989de52f63df63",
      "closedAt": "2021-09-08T12:07:25Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "The direction is to not add this unless there's clear justification of its value, so closing.  Also, it's clear the PR was confusing as written.",
          "createdAt": "2021-09-08T12:12:29Z",
          "updatedAt": "2021-09-08T12:12:29Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzMDQ3MzU5",
          "commit": {
            "abbreviatedOid": "ec27899"
          },
          "author": "martinthomson",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-08-07T05:43:46Z",
          "updatedAt": "2020-08-07T05:43:47Z",
          "comments": [
            {
              "originalPosition": 55,
              "body": "I don't know how to implement this.  Or maybe it's just a bug.\r\n\r\nLet's say that I acknowledged packet 10.  The packet loss threshold is 4.  As stated, this says: acknowledge immediately if you receive packet 15.  That seems OK.\r\n\r\nBut if I acknowledge 10, but 9 has not been received, this text implies that receiving 13 would cause an immediate ACK.  That seems like it might always result in an immediate ACK over time:\r\n\r\n```\r\nif pn > largest_received:\r\n  largest_received = pn\r\n  for n in 0..(largest_received - loss_threshold):\r\n    if !received(n):\r\n      send_immediate_ack()\r\n      break\r\n```\r\n\r\nIf instead this is something like:\r\n\r\n```\r\nif pn > largest_received:\r\n  largest_received = pn\r\n  if loss_threshold > 0 && largest_received > largest_acked + loss_threshold:\r\n    for n in (largest_acked + 1)..(largest_received - loss_threshold):\r\n      if !received(n):\r\n        send_immediate_ack()\r\n        break\r\n```\r\n\r\nThat might be a reason to include the largest acknowledged in the calculation.\r\n\r\nAssuming the latter is your intent, as this requires iteration over `loss_threshold` packets, receivers should be allowed to limit the size of this value arbitrarily to avoid O(N) work for little attacker cost.",
              "createdAt": "2020-08-07T05:43:46Z",
              "updatedAt": "2020-08-07T05:43:47Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzMDg5MTY3",
          "commit": {
            "abbreviatedOid": "ec27899"
          },
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-08-07T07:21:51Z",
          "updatedAt": "2020-08-07T07:21:52Z",
          "comments": [
            {
              "originalPosition": 55,
              "body": "FWIW, I tend to think that the latter is the correct thing to do. But at the same time, I would argue against allowing the receiver to set an arbitrary maximum for the loss_threshold field, as that prevents the sender from using a loss_threshold as a way of asking the receiver to ignore order.\r\n\r\nIn practice, I would assume that a receiver would be using a list of ranges (i.e. ack blocks) for representing what needs to be sent in an ACK frame. Typically, the number of blocks will exceed an internal threshold and trigger an ack before the attack being described here becomes an issue. I would be fine with pointing that out explicitly, and that would work as a mitigation.",
              "createdAt": "2020-08-07T07:21:51Z",
              "updatedAt": "2020-08-07T07:21:52Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzMTA5MTIy",
          "commit": {
            "abbreviatedOid": "ec27899"
          },
          "author": "martinthomson",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-08-07T07:56:07Z",
          "updatedAt": "2020-08-07T07:56:08Z",
          "comments": [
            {
              "originalPosition": 55,
              "body": "As a followup to this.  I tried implementing this and realized that if you hold ranges of packets, you can do something sensible without having to limit the value of `loss_threshold`, but it isn't very easy to think about.\r\n\r\nIf you haven't sent an ACK yet, then you can check that the `range.min > 0` and `range.max > loss_threshold`.  This says that the range of unacknowledged packets you have received doesn't start at 0 and there might be more than `loss_threshold` packets outstanding.  This bit gets a little sketchy when people start packet numbers at numbers greater than 0, but I think that the immediate ACK there is tolerable in that case, because it happens just once when it might not be desirable (that is, for the first application data packet).\r\n\r\nIf you have sent an ACK including `largest`, then you check that `range.min > largest + 1` and `range.max > largest + loss_threshold`.\r\n\r\nThis only works if you merge ranges properly when receiving packets.  For instance, when receiving packets 3, 1, and 2 in that order, you produce a single range that covers 1 to 3 and not separate ranges.  Merging ranges is fairly straightforward, and you more or less have to it to construct valid ACK frames, but it's worth noting.\r\n\r\nI ultimately track the *next* packet that needs acknowledgment rather than the largest (this saves errors at 0), and so I get:\r\n\r\n```\r\non_received(pn):\r\n\r\nranges.add(pn)\r\nif pn == ranges.largest().max {\r\n  # this just extended the most recent range\r\n  last_packet_time = now()\r\n  if loss_threshold > 0:\r\n    reordered = next_unacknowledged < ranges.largest().min && pn >= next_unacknowledged + loss_threshold\r\n  else:\r\n    reordered = false\r\nelse:\r\n  reordered = pn < next_unacknowledged\r\nendif\r\n```",
              "createdAt": "2020-08-07T07:56:08Z",
              "updatedAt": "2020-08-07T07:56:54Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzMjc3NTc3",
          "commit": {
            "abbreviatedOid": "ec27899"
          },
          "author": "dtikhonov",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2020-08-07T12:38:41Z",
          "updatedAt": "2020-08-07T12:38:42Z",
          "comments": [
            {
              "originalPosition": 55,
              "body": "~~The way I'd solve this is to look up the oldest unacked packet.  This packet would have the smallest packet number.  This is the packet number to subtract from `largest_received`; the difference is to be compared with `loss_threshold`.~~\r\n\r\nEdit: post-coffee I realize that this is not what's intended.",
              "createdAt": "2020-08-07T12:38:42Z",
              "updatedAt": "2020-08-07T12:49:39Z"
            }
          ]
        }
      ]
    },
    {
      "number": 39,
      "id": "MDExOlB1bGxSZXF1ZXN0NDYyODk1NjYy",
      "title": "CE is covered in section 13.2.1 of transport draft",
      "url": "https://github.com/quicwg/ack-frequency/pull/39",
      "state": "CLOSED",
      "author": "dtikhonov",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2020-08-04T17:12:13Z",
      "updatedAt": "2021-07-12T16:54:42Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "8ba2ebbc82a2259ee8dd3b995c06febb3e78a71d",
      "headRepository": "dtikhonov/ack-frequency",
      "headRefName": "patch-1",
      "headRefOid": "0e333c4e40330d713d0d394210fcbbbd6f32e227",
      "closedAt": "2021-07-12T16:54:42Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYxMDIxNjY5",
          "commit": {
            "abbreviatedOid": "0e333c4"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2020-08-04T17:27:45Z",
          "updatedAt": "2020-08-04T17:27:45Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTY1MTA3ODM3",
          "commit": {
            "abbreviatedOid": "0e333c4"
          },
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-01-11T07:21:36Z",
          "updatedAt": "2021-01-11T07:21:36Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzA0MzM4MzEy",
          "commit": {
            "abbreviatedOid": "0e333c4"
          },
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-07-12T16:54:28Z",
          "updatedAt": "2021-07-12T16:54:28Z",
          "comments": []
        }
      ]
    },
    {
      "number": 41,
      "id": "MDExOlB1bGxSZXF1ZXN0NTE0MzI2NjY3",
      "title": "Change codepoints to avoid conflict with draft revisions",
      "url": "https://github.com/quicwg/ack-frequency/pull/41",
      "state": "MERGED",
      "author": "janaiyengar",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "We don't need to change the frame type on each draft version, but I figured that it'd be safer.",
      "createdAt": "2020-11-02T21:22:40Z",
      "updatedAt": "2025-02-06T13:20:57Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "master",
      "baseRefOid": "8ba2ebbc82a2259ee8dd3b995c06febb3e78a71d",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "jri/opcode",
      "headRefOid": "3720428fe2c323fae8715e9fc3afdda3ec974ef5",
      "closedAt": "2020-11-02T23:47:34Z",
      "mergedAt": "2020-11-02T23:47:34Z",
      "mergedBy": "janaiyengar",
      "mergeCommit": {
        "oid": "35fed220a6b7a52ddcdecab495f902216c7d6969"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 47,
      "id": "MDExOlB1bGxSZXF1ZXN0NTg1ODQwNDkw",
      "title": "min_ack_delay is a unilateral indication",
      "url": "https://github.com/quicwg/ack-frequency/pull/47",
      "state": "MERGED",
      "author": "nibanks",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Fixes #42. Clearly declares that the TP only works in one direction.",
      "createdAt": "2021-03-05T19:56:40Z",
      "updatedAt": "2021-04-19T18:37:46Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "master",
      "baseRefOid": "35fed220a6b7a52ddcdecab495f902216c7d6969",
      "headRepository": "nibanks/ack-frequency",
      "headRefName": "patch-1",
      "headRefOid": "31c0570abcdfcf1dce02e2c1b2c5f20e1d3429e4",
      "closedAt": "2021-04-19T18:37:46Z",
      "mergedAt": "2021-04-19T18:37:46Z",
      "mergedBy": "ianswett",
      "mergeCommit": {
        "oid": "5e83cc8190b4eccea997fc7d1ddfd7520240533c"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjA1NTkzMzM3",
          "commit": {
            "abbreviatedOid": "053d1bb"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-03-05T20:58:22Z",
          "updatedAt": "2021-03-05T20:58:26Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "I'd drop this sentence, since it's not quite saying what you want to say at the moment and I think the paragraph works without it.\r\n\r\n```suggestion\r\nreceiving ACK_FREQUENCY frames.  If an endpoint sends the transport parameter, the peer\r\n```",
              "createdAt": "2021-03-05T20:58:22Z",
              "updatedAt": "2021-03-05T21:01:13Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NjM3MjEzMDky",
          "commit": {
            "abbreviatedOid": "31c0570"
          },
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-04-15T23:22:28Z",
          "updatedAt": "2021-04-15T23:22:28Z",
          "comments": []
        }
      ]
    },
    {
      "number": 50,
      "id": "MDExOlB1bGxSZXF1ZXN0NjcwNzkwMDE0",
      "title": "Change title, fix refs",
      "url": "https://github.com/quicwg/ack-frequency/pull/50",
      "state": "MERGED",
      "author": "janaiyengar",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-06-15T22:16:59Z",
      "updatedAt": "2025-02-06T13:20:58Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "master",
      "baseRefOid": "f97243281aa4a399bc43018c52288bee8cb7e9f6",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "jri/title",
      "headRefOid": "cccc4c71cdccd947aa725d1a662a22bc1e056b74",
      "closedAt": "2021-06-15T22:41:51Z",
      "mergedAt": "2021-06-15T22:41:51Z",
      "mergedBy": "mjoras",
      "mergeCommit": {
        "oid": "43953203d3a285090f1922c1554a9fce1312e620"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njg0NTM5MDE0",
          "commit": {
            "abbreviatedOid": "80450a2"
          },
          "author": "nibanks",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-06-15T22:17:48Z",
          "updatedAt": "2021-06-15T22:17:48Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njg0NTUyMjgw",
          "commit": {
            "abbreviatedOid": "cccc4c7"
          },
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-06-15T22:44:26Z",
          "updatedAt": "2021-06-15T22:44:27Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\ndocname: draft-ietf-quic-ack-frequency-latest\r\n```",
              "createdAt": "2021-06-15T22:44:26Z",
              "updatedAt": "2021-06-15T22:44:27Z"
            }
          ]
        }
      ]
    },
    {
      "number": 52,
      "id": "MDExOlB1bGxSZXF1ZXN0Njc4OTM4NDc5",
      "title": "fixup links to repo and list",
      "url": "https://github.com/quicwg/ack-frequency/pull/52",
      "state": "MERGED",
      "author": "LPardue",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-06-28T10:58:51Z",
      "updatedAt": "2025-02-06T13:20:59Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "0ac7e5e950b5d705ee9f89d9ea8c0d2056a3fd3e",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "lucas/fixup-discussion-links",
      "headRefOid": "67d85a6502acfa9df7b34faadc5e60a152add0e9",
      "closedAt": "2021-06-28T16:41:40Z",
      "mergedAt": "2021-06-28T16:41:40Z",
      "mergedBy": "ianswett",
      "mergeCommit": {
        "oid": "cacf0485084e3638dcb0fcf805d06a55a3dd248a"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Njk0MTcwNTk0",
          "commit": {
            "abbreviatedOid": "67d85a6"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-06-28T16:41:36Z",
          "updatedAt": "2021-06-28T16:41:36Z",
          "comments": []
        }
      ]
    },
    {
      "number": 54,
      "id": "MDExOlB1bGxSZXF1ZXN0Njg4MDA2Mjc4",
      "title": "Fix CE section reference",
      "url": "https://github.com/quicwg/ack-frequency/pull/54",
      "state": "MERGED",
      "author": "janaiyengar",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Copy of #39, applied to new draft filename.\r\nCloses #39.",
      "createdAt": "2021-07-12T16:54:18Z",
      "updatedAt": "2025-02-06T13:21:00Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "cacf0485084e3638dcb0fcf805d06a55a3dd248a",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "fixsection",
      "headRefOid": "f2ac9f2ec0e3ce17712a9d3f992608cd1df2ad00",
      "closedAt": "2021-07-12T16:54:42Z",
      "mergedAt": "2021-07-12T16:54:42Z",
      "mergedBy": "ianswett",
      "mergeCommit": {
        "oid": "18b674861d099a9053919c7c1543e5eccee0c6df"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzA0MzM4NDQ3",
          "commit": {
            "abbreviatedOid": "f2ac9f2"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-07-12T16:54:36Z",
          "updatedAt": "2021-07-12T16:54:36Z",
          "comments": []
        }
      ]
    },
    {
      "number": 55,
      "id": "MDExOlB1bGxSZXF1ZXN0Njg4MDIwOTU2",
      "title": "Rename 'Packet Tolerance' to 'ACK-Eliciting Threshold'",
      "url": "https://github.com/quicwg/ack-frequency/pull/55",
      "state": "MERGED",
      "author": "ianswett",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Part of #27\r\n\r\nWe still need to decide whether to change 'Update Max Ack Delay' to 'Max Ack Delay'.",
      "createdAt": "2021-07-12T17:13:43Z",
      "updatedAt": "2025-02-06T13:21:58Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "e5b46f2888aa5dc87daac3a430b5d4c832d5dd9a",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "ianswett-ack-eliciting-threshold",
      "headRefOid": "d2a84dcf14dfe1884ae92d8c6af83b27ad299436",
      "closedAt": "2021-07-29T14:39:24Z",
      "mergedAt": "2021-07-29T14:39:24Z",
      "mergedBy": "ianswett",
      "mergeCommit": {
        "oid": "a458009b1828cf719b2c5499e72b419956f65a0b"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzA0Mzg1ODI1",
          "commit": {
            "abbreviatedOid": "aeb4036"
          },
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-07-12T17:48:21Z",
          "updatedAt": "2021-07-12T17:49:21Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "```suggestion\r\n|                  Ack-Eliciting Threshold (i)                ...\r\n```",
              "createdAt": "2021-07-12T17:48:21Z",
              "updatedAt": "2021-07-12T17:49:21Z"
            },
            {
              "originalPosition": 24,
              "body": "```suggestion\r\nAck-Eliciting Threshold:\r\n```",
              "createdAt": "2021-07-12T17:48:33Z",
              "updatedAt": "2021-07-12T17:49:21Z"
            },
            {
              "originalPosition": 34,
              "body": "```suggestion\r\nis recorded as the largest seen sequence number. The new Ack-Eliciting Threshold\r\n```",
              "createdAt": "2021-07-12T17:48:44Z",
              "updatedAt": "2021-07-12T17:49:21Z"
            },
            {
              "originalPosition": 44,
              "body": "```suggestion\r\nand `Ack-Eliciting Threshold` values ({{multiple-frames}}), the endpoint MUST send an\r\n```",
              "createdAt": "2021-07-12T17:48:53Z",
              "updatedAt": "2021-07-12T17:49:21Z"
            },
            {
              "originalPosition": 49,
              "body": "```suggestion\r\n  packets is greater than or equal to the recorded `Ack-Eliciting Threshold`.\r\n```",
              "createdAt": "2021-07-12T17:49:02Z",
              "updatedAt": "2021-07-12T17:49:21Z"
            },
            {
              "originalPosition": 60,
              "body": "```suggestion\r\n`Ack-Eliciting Threshold` and `max_ack_delay` thresholds for sending\r\n```",
              "createdAt": "2021-07-12T17:49:12Z",
              "updatedAt": "2021-07-12T17:49:21Z"
            }
          ]
        }
      ]
    },
    {
      "number": 56,
      "id": "MDExOlB1bGxSZXF1ZXN0Njk1NDU4Nzc5",
      "title": "Change Update Max Ack Delay to Request Max Ack Delay",
      "url": "https://github.com/quicwg/ack-frequency/pull/56",
      "state": "MERGED",
      "author": "ianswett",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes the remainder of #27 not fixed by #55",
      "createdAt": "2021-07-22T19:58:27Z",
      "updatedAt": "2025-02-06T13:22:01Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "b8a834e72d9d14aa366e81fe5f9ddedd4bf73eb2",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "ianswett-request-max-ack-delay",
      "headRefOid": "5520d9fa7d2e35d7c83115097f52009447a1f9b7",
      "closedAt": "2021-09-09T23:55:36Z",
      "mergedAt": "2021-09-09T23:55:36Z",
      "mergedBy": "ianswett",
      "mergeCommit": {
        "oid": "2d9681036b0c69cc08c050604e81863cc14d0df2"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzE0MDE3Njcz",
          "commit": {
            "abbreviatedOid": "adb702e"
          },
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "One suggestion, but looks good to me otherwise.",
          "createdAt": "2021-07-23T18:11:23Z",
          "updatedAt": "2021-07-23T18:30:06Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "Suggestion: \"A variable-length integer representing the value to which the endpoint requests the peer to update its `max_ack_delay` (Section 18.2 of {{QUIC-TRANSPORT}}).\"",
              "createdAt": "2021-07-23T18:29:08Z",
              "updatedAt": "2021-07-23T18:30:06Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzE0MjI4NTEx",
          "commit": {
            "abbreviatedOid": "adb702e"
          },
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-07-24T11:48:12Z",
          "updatedAt": "2021-07-24T11:48:12Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzE0MjI5Njgz",
          "commit": {
            "abbreviatedOid": "adb702e"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-07-24T12:07:25Z",
          "updatedAt": "2021-07-24T12:07:25Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "I went with your suggestion with one less 'to'. It's definitely more correct, but I'd like to find something easier to read.\r\n\r\nI came up with the following, but I'm not sure it's better:\r\n\"A variable-length integer representing the updated max_ack_delay (Section 18.2 of {{QUIC-TRANSPORT}}) value the endpoint is requesting of the peer.\"",
              "createdAt": "2021-07-24T12:07:25Z",
              "updatedAt": "2021-07-24T12:07:25Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzUwOTA0NTI5",
          "commit": {
            "abbreviatedOid": "92f1388"
          },
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "This is good enough. You have a conflict to resolve, but let's merge this.",
          "createdAt": "2021-09-09T22:43:46Z",
          "updatedAt": "2021-09-09T22:43:46Z",
          "comments": []
        }
      ]
    },
    {
      "number": 57,
      "id": "MDExOlB1bGxSZXF1ZXN0Njk1NDc1OTY3",
      "title": "Set limits to min_ack_delay and max_ack_delay",
      "url": "https://github.com/quicwg/ack-frequency/pull/57",
      "state": "MERGED",
      "author": "janaiyengar",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #43.\r\nCloses #44.",
      "createdAt": "2021-07-22T20:25:01Z",
      "updatedAt": "2025-02-06T13:21:59Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "89980ef76468ce41df2e11cbc6244eb0f7a78753",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "jri/min-max",
      "headRefOid": "8a87dbd3d38c40507a2ca346f242fbdee3866ec3",
      "closedAt": "2021-07-31T01:15:52Z",
      "mergedAt": "2021-07-31T01:15:51Z",
      "mergedBy": "ianswett",
      "mergeCommit": {
        "oid": "b8a834e72d9d14aa366e81fe5f9ddedd4bf73eb2"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzEzMzI1NjAy",
          "commit": {
            "abbreviatedOid": "8a87dbd"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-07-23T00:16:42Z",
          "updatedAt": "2021-07-23T00:16:42Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzEzNzgyNTMz",
          "commit": {
            "abbreviatedOid": "8a87dbd"
          },
          "author": "nibanks",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-07-23T14:25:17Z",
          "updatedAt": "2021-07-23T14:25:17Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzE0MjI4NDU0",
          "commit": {
            "abbreviatedOid": "8a87dbd"
          },
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-07-24T11:47:01Z",
          "updatedAt": "2021-07-24T11:47:01Z",
          "comments": []
        }
      ]
    },
    {
      "number": 58,
      "id": "MDExOlB1bGxSZXF1ZXN0Njk1NTk3MzE2",
      "title": "Tweak ack-eliciting threshold.",
      "url": "https://github.com/quicwg/ack-frequency/pull/58",
      "state": "MERGED",
      "author": "ianswett",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "design"
      ],
      "body": "Fixes #49\r\n\r\nAlso updates the transport parameter codepoint to 0xff03de1a from 0xff02de1a.",
      "createdAt": "2021-07-23T00:45:44Z",
      "updatedAt": "2025-02-06T13:22:02Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "2d9681036b0c69cc08c050604e81863cc14d0df2",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "ianswett-tweak-ack-threshold",
      "headRefOid": "4311a922f4c2d79e25bd37aaa27d80638fa56eec",
      "closedAt": "2021-09-10T00:24:46Z",
      "mergedAt": "2021-09-10T00:24:45Z",
      "mergedBy": "ianswett",
      "mergeCommit": {
        "oid": "71ec632906f12388cf6623399d3deac3c2d59585"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzEzNzgxMTEw",
          "commit": {
            "abbreviatedOid": "0b83fda"
          },
          "author": "nibanks",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-07-23T14:24:04Z",
          "updatedAt": "2021-07-23T14:24:04Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "I believe you are missing a word (`packets`?) between `ack-eliciting` and `you can`.",
              "createdAt": "2021-07-23T14:24:04Z",
              "updatedAt": "2021-07-23T14:24:04Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzEzODQ3NTEx",
          "commit": {
            "abbreviatedOid": "0b83fda"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-07-23T15:31:43Z",
          "updatedAt": "2021-07-23T15:31:43Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "Yes, thanks.",
              "createdAt": "2021-07-23T15:31:43Z",
              "updatedAt": "2021-07-23T15:31:43Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzEzODUwNDUw",
          "commit": {
            "abbreviatedOid": "1ce9b5f"
          },
          "author": "nibanks",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-07-23T15:34:49Z",
          "updatedAt": "2021-07-23T15:34:49Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzE0MDMxODQy",
          "commit": {
            "abbreviatedOid": "f92fbf5"
          },
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-07-23T18:31:12Z",
          "updatedAt": "2021-07-23T19:01:10Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\nmin_ack_delay (0xff03de1a):\r\n```",
              "createdAt": "2021-07-23T18:31:12Z",
              "updatedAt": "2021-07-23T19:01:10Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzE0MjE0NDYz",
          "commit": {
            "abbreviatedOid": "f92fbf5"
          },
          "author": "martinthomson",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-07-24T07:41:53Z",
          "updatedAt": "2021-07-24T07:41:54Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\nmin_ack_delay (0x9a7eb021):\r\n```\r\n\r\nGenerating a fresh value is a) good hygiene, b) easy.",
              "createdAt": "2021-07-24T07:41:54Z",
              "updatedAt": "2021-07-24T07:41:54Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzE0MjE0NTI3",
          "commit": {
            "abbreviatedOid": "f92fbf5"
          },
          "author": "martinthomson",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-07-24T07:42:58Z",
          "updatedAt": "2021-07-24T07:42:58Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "\"you\"?\r\n\r\nThis is the maximum number of ack-eliciting packets that the recipient of this frame can receive without sending an immediate acknowledgment.",
              "createdAt": "2021-07-24T07:42:58Z",
              "updatedAt": "2021-07-24T07:42:58Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzE0NjkyMjM3",
          "commit": {
            "abbreviatedOid": "d1f68ef"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-07-26T10:35:42Z",
          "updatedAt": "2021-07-26T10:35:42Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "I took Jana's suggestion, but don't have a strong opinion between similar codepoints and random ones.",
              "createdAt": "2021-07-26T10:35:42Z",
              "updatedAt": "2021-07-26T10:35:42Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzE0NjkzNTEy",
          "commit": {
            "abbreviatedOid": "d1f68ef"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-07-26T10:37:21Z",
          "updatedAt": "2021-07-26T10:37:21Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "Thanks",
              "createdAt": "2021-07-26T10:37:21Z",
              "updatedAt": "2021-07-26T10:37:21Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzE2MzQ0MTcw",
          "commit": {
            "abbreviatedOid": "5673dc2"
          },
          "author": "ekinnear",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-07-27T20:23:50Z",
          "updatedAt": "2021-07-27T20:23:51Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "Is there a way to phrase this such that the off-by-one-ness is intuitive?\r\nSomething along the lines of \"the number of packets after the most-recently-acked one to skip before sending another ack\".\r\n\r\nSo saying \"skip zero packets\" means ack every time, saying \"skip one packet after the most recently acked one\" means ack every-other. \r\n\r\nStill trying to come up with a nice way to word that, but it seems like it could reduce off-by-one confusion.",
              "createdAt": "2021-07-27T20:23:50Z",
              "updatedAt": "2021-07-27T20:23:51Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzE2MzY0ODAz",
          "commit": {
            "abbreviatedOid": "5673dc2"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-07-27T20:48:57Z",
          "updatedAt": "2021-07-27T20:48:57Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "I'm definitely open to other wordings.  I think the example of 0 helps for me, but suggestions are welcome.",
              "createdAt": "2021-07-27T20:48:57Z",
              "updatedAt": "2021-07-27T20:48:57Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzE2Mzg3ODAy",
          "commit": {
            "abbreviatedOid": "5673dc2"
          },
          "author": "martinthomson",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-07-27T21:18:22Z",
          "updatedAt": "2021-07-27T21:18:22Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "The phrasing I used was \"the number of packets you can receive without sending an immediate acknowledgment\". So has Ian. Isn't that intuitive enough?",
              "createdAt": "2021-07-27T21:18:22Z",
              "updatedAt": "2021-07-27T21:19:12Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzUwOTA2ODUz",
          "commit": {
            "abbreviatedOid": "5673dc2"
          },
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-09-09T22:48:33Z",
          "updatedAt": "2021-09-09T22:55:55Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "```suggestion\r\n  packets the recipient of this frame can receive without sending an immediate\r\n```",
              "createdAt": "2021-09-09T22:48:33Z",
              "updatedAt": "2021-09-09T22:55:55Z"
            },
            {
              "originalPosition": 19,
              "body": "The text is slightly but enough different to the suggestion you made, @martinthomson. I think we should replace \"before\" with \"without\".",
              "createdAt": "2021-09-09T22:48:38Z",
              "updatedAt": "2021-09-09T22:55:55Z"
            }
          ]
        }
      ]
    },
    {
      "number": 59,
      "id": "MDExOlB1bGxSZXF1ZXN0Njk2MTA5Njg3",
      "title": "Cap ACK-eliciting threshold if the received value is too large",
      "url": "https://github.com/quicwg/ack-frequency/pull/59",
      "state": "MERGED",
      "author": "ianswett",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "design"
      ],
      "body": "Fixes #45",
      "createdAt": "2021-07-23T17:35:14Z",
      "updatedAt": "2025-02-06T13:22:00Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "89980ef76468ce41df2e11cbc6244eb0f7a78753",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "ianswett-cap-ack-eliciting-threshold",
      "headRefOid": "4e904ce9048a34c6a33a15b86e033fa83615ef4d",
      "closedAt": "2021-07-31T01:13:42Z",
      "mergedAt": "2021-07-31T01:13:42Z",
      "mergedBy": "ianswett",
      "mergeCommit": {
        "oid": "88d9c0bf8298d3c7ba02556a0ffa4870c2652532"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzEzOTY0NTEx",
          "commit": {
            "abbreviatedOid": "7fb52e4"
          },
          "author": "nibanks",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-07-23T17:37:13Z",
          "updatedAt": "2021-07-23T17:37:13Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzE0MDkzMzgy",
          "commit": {
            "abbreviatedOid": "7fb52e4"
          },
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-07-23T20:07:55Z",
          "updatedAt": "2021-07-23T20:07:55Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzE0MjI4MDk4",
          "commit": {
            "abbreviatedOid": "7fb52e4"
          },
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-07-24T11:40:16Z",
          "updatedAt": "2021-07-24T11:40:33Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "The largest representable value is by definition the maximum value.\r\n```suggestion\r\n  value instead.\r\n```",
              "createdAt": "2021-07-24T11:40:16Z",
              "updatedAt": "2021-07-24T11:40:33Z"
            }
          ]
        }
      ]
    },
    {
      "number": 60,
      "id": "MDExOlB1bGxSZXF1ZXN0Njk2MTE2ODIy",
      "title": "MAY omit the max_ack_delay if enough packets are in flight",
      "url": "https://github.com/quicwg/ack-frequency/pull/60",
      "state": "MERGED",
      "author": "ianswett",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "design"
      ],
      "body": "Fixes #37 by allowing implementations to not add max_ack_delay to the PTO calculation if enough ack-eliciting packets are in flight.",
      "createdAt": "2021-07-23T17:49:54Z",
      "updatedAt": "2025-02-06T13:22:03Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "89980ef76468ce41df2e11cbc6244eb0f7a78753",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "ianswett-omit-max-ack-delay",
      "headRefOid": "cda2f6719c14f81ad3ac09937435f8b2dc57648e",
      "closedAt": "2021-09-10T07:15:35Z",
      "mergedAt": "2021-09-10T07:15:35Z",
      "mergedBy": "ianswett",
      "mergeCommit": {
        "oid": "5aeebefc3a0e33d69b5b830663f2fa7c78368299"
      },
      "comments": [
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "@marten-seemann Does Jana's longer explanation help or would you like more clarification?",
          "createdAt": "2021-07-27T00:08:37Z",
          "updatedAt": "2021-07-27T00:08:37Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzE0MDk3MDg0",
          "commit": {
            "abbreviatedOid": "694afdd"
          },
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-07-23T20:14:01Z",
          "updatedAt": "2021-07-23T20:14:24Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\nACK-Eliciting Threshold, an endpoint can expect that the peer\r\nwill not need to wait for its `max_ack_delay` period before\r\nsending an acknowledgement. In such cases, the endpoint MAY\r\ntherefore exclude the peer's 'max_ack_delay' from its PTO\r\ncalculation.\r\n```",
              "createdAt": "2021-07-23T20:14:01Z",
              "updatedAt": "2021-07-23T20:14:24Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzE0MjI4MjY4",
          "commit": {
            "abbreviatedOid": "694afdd"
          },
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "I'm not sure I understand the motivation for this (I'm also having trouble following the issue). Can we add some more explanation here?",
          "createdAt": "2021-07-24T11:43:01Z",
          "updatedAt": "2021-07-24T11:43:01Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzE1ODE4NjIw",
          "commit": {
            "abbreviatedOid": "e053319"
          },
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-07-27T11:55:20Z",
          "updatedAt": "2021-07-27T11:55:20Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzUwOTgyNDU5",
          "commit": {
            "abbreviatedOid": "e053319"
          },
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "one suggestion, but lgtm otherwise.",
          "createdAt": "2021-09-10T01:52:20Z",
          "updatedAt": "2021-09-10T01:52:39Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "```suggestion\r\ncalculation. Note that this optimization requires some care in implementation, since\r\nit can cause premature PTOs under packet loss when `ignore_order` is enabled.\r\n```",
              "createdAt": "2021-09-10T01:52:20Z",
              "updatedAt": "2021-09-10T01:52:39Z"
            }
          ]
        }
      ]
    },
    {
      "number": 61,
      "id": "MDExOlB1bGxSZXF1ZXN0Njk2MTk2NTU4",
      "title": "Don't change ack behavior until ACK_FREQUENCY is received",
      "url": "https://github.com/quicwg/ack-frequency/pull/61",
      "state": "MERGED",
      "author": "janaiyengar",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #25.",
      "createdAt": "2021-07-23T20:34:18Z",
      "updatedAt": "2025-02-06T13:22:04Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "fae9484977b8bb16ead9bcace6e81727d5051571",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "jri/tp-only",
      "headRefOid": "810155d0d1be47d8abb0acc91daa237f56a444a1",
      "closedAt": "2021-09-10T16:23:50Z",
      "mergedAt": "2021-09-10T16:23:50Z",
      "mergedBy": "ianswett",
      "mergeCommit": {
        "oid": "eccfdbe87babccd5294d3264c7627de0f5b08091"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzE0MTA5NzIw",
          "commit": {
            "abbreviatedOid": "c68c59d"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-07-23T20:35:55Z",
          "updatedAt": "2021-07-23T20:35:56Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\nreceiving this transport parameter does not cause the endpoint to\r\n```",
              "createdAt": "2021-07-23T20:35:55Z",
              "updatedAt": "2021-07-23T20:35:56Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzE0MTE4OTg2",
          "commit": {
            "abbreviatedOid": "51e9ed1"
          },
          "author": "nibanks",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-07-23T20:52:36Z",
          "updatedAt": "2021-07-23T20:52:36Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzE0MjI3OTc3",
          "commit": {
            "abbreviatedOid": "51e9ed1"
          },
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-07-24T11:38:02Z",
          "updatedAt": "2021-07-24T11:38:02Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzE0MjI4MzIw",
          "commit": {
            "abbreviatedOid": "51e9ed1"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-07-24T11:44:01Z",
          "updatedAt": "2021-07-24T11:44:01Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzE0MjUyMDEz",
          "commit": {
            "abbreviatedOid": "51e9ed1"
          },
          "author": "huitema",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "Works for me.",
          "createdAt": "2021-07-24T18:17:31Z",
          "updatedAt": "2021-07-24T18:17:31Z",
          "comments": []
        }
      ]
    },
    {
      "number": 63,
      "id": "MDExOlB1bGxSZXF1ZXN0NzAwNjMxNTUz",
      "title": "MUST NOT store min_ack_delay",
      "url": "https://github.com/quicwg/ack-frequency/pull/63",
      "state": "MERGED",
      "author": "ianswett",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "design"
      ],
      "body": "Closes #22 and #40\r\n\r\nAnd by implication, cannot send ACK_FREQUENCY in 0-RTT packets.",
      "createdAt": "2021-07-31T01:10:21Z",
      "updatedAt": "2025-02-06T13:22:02Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "a458009b1828cf719b2c5499e72b419956f65a0b",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "ianswett-dont-store-min-ack-delay",
      "headRefOid": "c0084a4105c45d36a77f0eab46a8432e6eb0d35f",
      "closedAt": "2021-09-10T16:15:48Z",
      "mergedAt": "2021-09-10T16:15:48Z",
      "mergedBy": "ianswett",
      "mergeCommit": {
        "oid": "fae9484977b8bb16ead9bcace6e81727d5051571"
      },
      "comments": [],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzE5NjEwMDU2",
          "commit": {
            "abbreviatedOid": "5e664b1"
          },
          "author": "martinthomson",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-07-31T23:49:14Z",
          "updatedAt": "2021-07-31T23:49:15Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "Please drop this last sentence.",
              "createdAt": "2021-07-31T23:49:15Z",
              "updatedAt": "2021-07-31T23:49:15Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzIwMjEyNzU1",
          "commit": {
            "abbreviatedOid": "5e664b1"
          },
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "Thank you for the PR. Looks good, below is nothing more than an editorial preference.",
          "createdAt": "2021-08-02T13:38:08Z",
          "updatedAt": "2021-08-02T13:39:14Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "How about going like:\r\n```suggestion\r\nEndpoints MUST NOT remember the value of min_ack_delay transport parameter they received.\r\n```\r\n\r\nI think provision of the first sentence (\"An endpoint MUST NOT send ACK_FREQUENCY frames until ...\") is covered by the last sentence of the previous paragraph. If we think that that sentence is vague, we can change \"if\" of that sentence to \"if and only if.\"\r\n\r\nRegarding the second sentence, my preference goes to using the phrase \"remembered\" and talking about both sides, because that is what RFC 9000 does.",
              "createdAt": "2021-08-02T13:38:08Z",
              "updatedAt": "2021-08-02T13:39:14Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzIwNzI2MjU3",
          "commit": {
            "abbreviatedOid": "e5e173c"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-08-03T02:27:14Z",
          "updatedAt": "2021-08-03T02:27:15Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "I took Kazuho's suggestion, which I think is correct based on the discussion on #22?",
              "createdAt": "2021-08-03T02:27:14Z",
              "updatedAt": "2021-08-03T02:27:15Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzIwNzI2NTUx",
          "commit": {
            "abbreviatedOid": "436b33b"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-08-03T02:28:00Z",
          "updatedAt": "2021-08-03T02:28:00Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "Thanks, suggestion accepted.",
              "createdAt": "2021-08-03T02:28:00Z",
              "updatedAt": "2021-08-03T02:28:00Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzIxMTIxMzQz",
          "commit": {
            "abbreviatedOid": "436b33b"
          },
          "author": "nibanks",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-08-03T12:14:00Z",
          "updatedAt": "2021-08-03T12:14:00Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzIxNzM4MTk2",
          "commit": {
            "abbreviatedOid": "436b33b"
          },
          "author": "martinthomson",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-08-04T00:06:11Z",
          "updatedAt": "2021-08-04T00:06:11Z",
          "comments": []
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzUwOTg0MTY2",
          "commit": {
            "abbreviatedOid": "436b33b"
          },
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "couple of suggestions, but lgtm",
          "createdAt": "2021-09-10T01:56:51Z",
          "updatedAt": "2021-09-10T01:59:38Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\nthey received. Consequently, ACK_FREQUENCY frames MUST NOT be sent in 0-RTT\r\n```",
              "createdAt": "2021-09-10T01:56:51Z",
              "updatedAt": "2021-09-10T01:59:38Z"
            },
            {
              "originalPosition": 6,
              "body": "```suggestion\r\npackets, as per Section 7.4.1 of {{QUIC-TRANSPORT}}.\r\n```",
              "createdAt": "2021-09-10T01:59:18Z",
              "updatedAt": "2021-09-10T01:59:38Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzUwOTg3MTkw",
          "commit": {
            "abbreviatedOid": "436b33b"
          },
          "author": "martinthomson",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-09-10T02:05:07Z",
          "updatedAt": "2021-09-10T02:05:07Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "isn't it \"cannot\"?\r\n\r\n(You see, if we say \"MUST NOT\", we probably need to say what happens if you get a 0-RTT packet with ACK_FREQUENCY in it, but I know that some implementations can't really make that distinction.)",
              "createdAt": "2021-09-10T02:05:07Z",
              "updatedAt": "2021-09-10T02:05:07Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzUxMTEwODIz",
          "commit": {
            "abbreviatedOid": "983de2c"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-09-10T07:13:05Z",
          "updatedAt": "2021-09-10T07:13:05Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Good point, I think cannot is more correct, updated.",
              "createdAt": "2021-09-10T07:13:05Z",
              "updatedAt": "2021-09-10T07:13:05Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzUxMzQ0Mjk4",
          "commit": {
            "abbreviatedOid": "c0084a4"
          },
          "author": "nibanks",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-09-10T12:13:42Z",
          "updatedAt": "2021-09-10T12:13:42Z",
          "comments": []
        }
      ]
    },
    {
      "number": 64,
      "id": "MDExOlB1bGxSZXF1ZXN0NzI5NjAyNTY3",
      "title": "Add an IMMEDIATE_ACK frame",
      "url": "https://github.com/quicwg/ack-frequency/pull/64",
      "state": "MERGED",
      "author": "ianswett",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "design"
      ],
      "body": "Fixes #34 by adding a one byte IMMEDIATE_ACK frame.",
      "createdAt": "2021-09-08T12:30:33Z",
      "updatedAt": "2025-02-06T13:22:05Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "b8a834e72d9d14aa366e81fe5f9ddedd4bf73eb2",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "ianswett-immediate-ack",
      "headRefOid": "e81e1ad5374acb94d239aca590feb2d9b65511bb",
      "closedAt": "2021-09-15T23:28:30Z",
      "mergedAt": "2021-09-15T23:28:30Z",
      "mergedBy": "ianswett",
      "mergeCommit": {
        "oid": "2653d744076e98d40bf0b6240d82af2e84f0a2c9"
      },
      "comments": [
        {
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "body": "editorial nit: my preference would be for frame diagrams to use the notation in QUIC transport. I see that ACK_FREQUENCY is defined using ASCII art, so perhaps you want to consider a separate follow up PR to switch styles after this lands.",
          "createdAt": "2021-09-08T12:35:12Z",
          "updatedAt": "2021-09-08T12:35:12Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks Lucas, I filed #66 to update them.",
          "createdAt": "2021-09-08T15:50:21Z",
          "updatedAt": "2021-09-08T15:50:21Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzUxMzQ0OTc4",
          "commit": {
            "abbreviatedOid": "2235bf4"
          },
          "author": "nibanks",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-09-10T12:14:36Z",
          "updatedAt": "2021-09-10T12:14:36Z",
          "comments": []
        },
        {
          "id": "PRR_kwDODddxTs4s5865",
          "commit": {
            "abbreviatedOid": "5de6302"
          },
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-09-14T01:33:19Z",
          "updatedAt": "2021-09-14T01:33:19Z",
          "comments": []
        }
      ]
    },
    {
      "number": 67,
      "id": "MDExOlB1bGxSZXF1ZXN0NzMxODk5MjAy",
      "title": "Add a DELAY_ACK frame",
      "url": "https://github.com/quicwg/ack-frequency/pull/67",
      "state": "CLOSED",
      "author": "ianswett",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "design"
      ],
      "body": "This frame overrides the behavior of IMMEDIATE_ACK, if the two were to be placed in the same packet.  This would of course be silly, but I don't think it's worth disallowing given the lack of harm.\r\n\r\nFixes #65",
      "createdAt": "2021-09-11T08:51:21Z",
      "updatedAt": "2025-02-06T13:22:05Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "eccfdbe87babccd5294d3264c7627de0f5b08091",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "ianswett-no-ack",
      "headRefOid": "e25e0d9a8ce01e74404628da8229162e1507aa5d",
      "closedAt": "2021-09-15T20:03:54Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "huitema",
          "authorAssociation": "NONE",
          "body": "1) Do we really need this?\r\n2) What happens if the receiver ignores the frame and just acks the packet?\r\n3) If a packet contains both immediate_ack and no_ack, the reaction should be \"protocol error\", not \"ignore one and pick the other\".",
          "createdAt": "2021-09-13T00:18:30Z",
          "updatedAt": "2021-09-13T00:18:30Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs4s6Jqd",
          "commit": {
            "abbreviatedOid": "e25e0d9"
          },
          "author": "martinthomson",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "Still not supportive of doing this.  See list discussion.",
          "createdAt": "2021-09-14T03:38:42Z",
          "updatedAt": "2021-09-14T03:40:25Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "Missing negation?",
              "createdAt": "2021-09-14T03:38:43Z",
              "updatedAt": "2021-09-14T03:40:25Z"
            },
            {
              "originalPosition": 4,
              "body": "The ordering of this section is a bit off.  This concept is less important than ACK_FREQUENCY, so it should probably go after it.\r\n\r\nThis frame needs citations from other parts of the document.",
              "createdAt": "2021-09-14T03:39:47Z",
              "updatedAt": "2021-09-14T03:51:59Z"
            },
            {
              "originalPosition": 11,
              "body": "Section reference for IMMEDIATE_ACK?",
              "createdAt": "2021-09-14T03:40:09Z",
              "updatedAt": "2021-09-14T03:40:25Z"
            }
          ]
        }
      ]
    },
    {
      "number": 68,
      "id": "MDExOlB1bGxSZXF1ZXN0NzMxOTk2MjQ2",
      "title": "ACK less frequently when CE marks are received",
      "url": "https://github.com/quicwg/ack-frequency/pull/68",
      "state": "MERGED",
      "author": "ianswett",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "design"
      ],
      "body": "Per @bbriscoe's suggestion in #48, this PR changes the immediate ACK behavior to only send an immediate ACK when transitioning from non-marked to CE marked.\r\n\r\nAlso treats receipt of non Ack-Eliciting packets as Ack-Eliciting if they are CE marked.\r\n\r\nFixes #48",
      "createdAt": "2021-09-11T20:14:21Z",
      "updatedAt": "2025-02-06T13:22:10Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "2172c24df098c408456f2f30bba56ba3bf27e2b1",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "ianswett-ce-immediate-ack",
      "headRefOid": "c0f542e96584522bf9d401447eb15c0a42090bd6",
      "closedAt": "2021-10-12T20:39:58Z",
      "mergedAt": "2021-10-12T20:39:57Z",
      "mergedBy": "janaiyengar",
      "mergeCommit": {
        "oid": "1fcf6a17e8f9bbfb3a51e9d6f02046bb3401ef5b"
      },
      "comments": [
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm wondering if this should be max(2, Ack-Eliciting Threshold)/2 instead?\r\n\r\nAs it is, except for the immediate ack on unmarked to CE marked, this algorithm basically doesn't change acknowledgement behavior at all.",
          "createdAt": "2021-09-12T13:19:24Z",
          "updatedAt": "2021-09-12T13:19:24Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "I think this is about done and I'd like to merge it prior to shipping the next version of the draft.  Can anyone provide a final review?",
          "createdAt": "2021-10-10T15:10:29Z",
          "updatedAt": "2021-10-10T15:10:29Z"
        },
        {
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "body": "@ianswett and I discussed this. Forcing ACKing of ACKs seems problematic (thanks @kazuho), and we would like to steer clear of that for this time being. So we are removing any text about ACKing non-ack-eliciting packets, since that seems like a footgun. If there's a specific reason to include it, let's do that in a new Issue and PR.",
          "createdAt": "2021-10-12T20:38:29Z",
          "updatedAt": "2021-10-12T20:38:29Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks for the suggestion @kazuho Let's keep this relatively simple for now.",
          "createdAt": "2021-10-13T09:59:27Z",
          "updatedAt": "2021-10-13T09:59:27Z"
        }
      ],
      "reviews": [
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzUyMjI4ODU3",
          "commit": {
            "abbreviatedOid": "b44b55d"
          },
          "author": "martinthomson",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-09-12T23:47:57Z",
          "updatedAt": "2021-09-12T23:50:48Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "```suggestion\r\nAn endpoint SHOULD send an immediate acknowledgement when a packet marked\r\n```",
              "createdAt": "2021-09-12T23:47:57Z",
              "updatedAt": "2021-09-12T23:50:48Z"
            },
            {
              "originalPosition": 10,
              "body": "```suggestion\r\nreceived and the previous packet was not marked CE.\r\n```",
              "createdAt": "2021-09-12T23:48:34Z",
              "updatedAt": "2021-09-12T23:50:48Z"
            },
            {
              "originalPosition": 16,
              "body": "```suggestion\r\ncompared to {{Section 13.2.1 of QUIC-TRANSPORT}} when peers are using\r\n```",
              "createdAt": "2021-09-12T23:49:14Z",
              "updatedAt": "2021-09-12T23:50:48Z"
            },
            {
              "originalPosition": 14,
              "body": "How about\r\n> An endpoint SHOULD reduce its Ack-Eliciting Threshold to at most 2 when acknowledging a contiguous series of CE marked packets.",
              "createdAt": "2021-09-12T23:50:42Z",
              "updatedAt": "2021-09-12T23:50:48Z"
            }
          ]
        },
        {
          "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NzUyMjMyNDA2",
          "commit": {
            "abbreviatedOid": "b44b55d"
          },
          "author": "goelvidhi",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-09-13T00:13:10Z",
          "updatedAt": "2021-09-13T00:13:10Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "This line is a bit confusing. I think we can separate out `reduces the peer's response time to congestion events` and `while also reducing the ACK rate as compared to`. Another clarification is needed about the fact that congestion controllers don't mark but respond to marks.\r\nSuggestion:\r\n```\r\nDoing so reduces the peer's response time to congestion events especially when peers are using DCTCP {{?RFC8257}} or other congestion controllers that respond to immediate CE markings which are much more\r\n frequent than classic ECN {{?RFC3168}}.\r\n ```\r\n And then talk about\r\n ```\r\n This will also help in reducing the ACK rate on the reverse path as compared to Section 13.2.1 of {{QUIC-TRANSPORT}}\r\n ```\r\n \r\n",
              "createdAt": "2021-09-13T00:13:10Z",
              "updatedAt": "2021-09-13T00:13:48Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs4s54JG",
          "commit": {
            "abbreviatedOid": "4b13883"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-09-14T00:43:04Z",
          "updatedAt": "2021-09-14T00:43:04Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "It doesn't actually reduce the response time compared to RFC9000, so I think the current text is more accurate?",
              "createdAt": "2021-09-14T00:43:04Z",
              "updatedAt": "2021-09-14T00:43:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs4s6Zq7",
          "commit": {
            "abbreviatedOid": "4b13883"
          },
          "author": "goelvidhi",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-09-14T06:06:38Z",
          "updatedAt": "2021-09-14T06:06:38Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "I copied the `reduces response time` phrase from the current text.\r\nI agree that it doesn't reduce peer's response time to congestion necessarily but makes the response based on the extent of congestion (number of CE marks) instead of its presence. (RFC 9000)\r\n",
              "createdAt": "2021-09-14T06:06:38Z",
              "updatedAt": "2021-09-14T06:06:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs4s7tiv",
          "commit": {
            "abbreviatedOid": "4b13883"
          },
          "author": "bbriscoe",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-09-14T12:05:50Z",
          "updatedAt": "2021-09-14T12:05:50Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "I think the original attempt to emulate Accurate ECN feedback in TCP might have been misguided. The AccECN machinery was necessary in TCP because TCP does _not_ have ACK frequency control. Here in QUIC we are adding ACK frequency control. So the only addition needed for ECN should indeed be to immediately trigger an ACK on a transition from non-CE to CE marking. Then, QUIC should just continue ACKing every Ack-Eliciting Threshold packets. No need for the max(2, ...). I think (I'm not working on QUIC, so I don't keep the whole of the QUIC design in my working memory).\r\n\r\nThat sorts out the lower bound on ACK frequency, but it leaves one problem at the upper bound (if I understand QUIC correctly). [RFC9000 \u00a713.2.1.  Sending ACK Frames](https://datatracker.ietf.org/doc/html/rfc9000#section-13.2.1) and [\u00a713.2.4. Limiting Ranges by Tracking ACK Frames](https://datatracker.ietf.org/doc/html/rfc9000#section-13.2.4) suggest that a host that is only sending non-ack-eliciting packets could occasionally include an ack-eliciting packet (e.g. a ping) to catch up on the feedback and allow the other end to clear out the state its been collecting.\r\n\r\nAn example where this could be a problem is when data transfer switches back and forth from one QUIC peer to the other. Imagine an asymmetric data transfer from A to B ends. If the network CE-marked many or all the ACKs on the reverse path (B-A), I believe A will not ACK any of the last round of ACKs it receives. Then if B becomes the sender of a volley of data, it will unknowingly send data into a path that was already congested just with ACKs.\r\n\r\nWith ECN, I'm not sure it's the best design to rely on the sender of the non-ack-eliciting packets (B in the example) to send an occasional ack-eliciting packet. If the receiver of the non-ack-eliciting packets (A) is seeing a large amount of ECN marks, it ought to be able to send occasional ACKs of non-ack-eliciting packets (to B), whether or not B asks for them.\r\n\r\nIn AccECN, we allowed TCP to ack a sequence of CE-marked ACKs, as long as the ACK frequency was no less than 1 per 3 CE-marked packets. Even with 100% CE-marking, this damps any potential ACK ping-pong but still ensures the other end receive feedback of congestion events.\r\n",
              "createdAt": "2021-09-14T12:05:50Z",
              "updatedAt": "2021-09-14T12:05:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs4s7xXI",
          "commit": {
            "abbreviatedOid": "4b13883"
          },
          "author": "bbriscoe",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-09-14T12:21:20Z",
          "updatedAt": "2021-09-14T12:21:20Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "This phrase is not right: \r\n`especially when peers are using DCTCP {{?RFC8257}} or other congestion controllers that respond to immediate CE markings which are much more frequent than classic ECN {{?RFC3168}}.`\r\nFor a start all controllers _respond_ to more frequent CE markings, it's ones that _cause_ more frequent markings. But it's also for during extremes of congestion on the reverse path, irrespective of the type of controller. How about:\r\n`especially during periods of extreme congestion on the reverse path, or when peers are using DCTCP {{?RFC8257}} or other congestion controllers that routinely cause more frequent ECN marking than classic ECN {{?RFC3168}}.`",
              "createdAt": "2021-09-14T12:21:20Z",
              "updatedAt": "2021-09-14T12:21:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs4tCPFu",
          "commit": {
            "abbreviatedOid": "2a861ba"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-09-15T19:53:14Z",
          "updatedAt": "2021-09-15T19:53:14Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "The PR had already been updated to be more similar to your text, but I added 'extreme congestion', PTAL",
              "createdAt": "2021-09-15T19:53:14Z",
              "updatedAt": "2021-09-15T19:53:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs4tCPjB",
          "commit": {
            "abbreviatedOid": "2a861ba"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-09-15T19:55:30Z",
          "updatedAt": "2021-09-15T19:55:30Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "Thanks, I'll update this to make it so CE marked packets are treated like ack-eliciting packets from an ACK perspective, which I think solves the upper bound problem you're outlining?",
              "createdAt": "2021-09-15T19:55:30Z",
              "updatedAt": "2021-09-15T19:55:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs4tER4E",
          "commit": {
            "abbreviatedOid": "da28352"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-09-16T09:53:58Z",
          "updatedAt": "2021-09-16T09:53:58Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "```suggestion\r\nreceived and the previously received packet was not marked CE.\r\n```",
              "createdAt": "2021-09-16T09:53:58Z",
              "updatedAt": "2021-09-16T09:53:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs4tESFy",
          "commit": {
            "abbreviatedOid": "da28352"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-09-16T09:54:55Z",
          "updatedAt": "2021-09-16T09:54:56Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "```suggestion\r\nAn endpount SHOULD also acknowledge packets received with a CE mark as though\r\n```",
              "createdAt": "2021-09-16T09:54:55Z",
              "updatedAt": "2021-09-16T09:54:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs4tESOd",
          "commit": {
            "abbreviatedOid": "9cfd170"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-09-16T09:55:32Z",
          "updatedAt": "2021-09-16T09:55:32Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "```suggestion\r\nfeedback on CE is received in a timely manner when most packets are\r\nnot ack-eliciting.\r\n```",
              "createdAt": "2021-09-16T09:55:32Z",
              "updatedAt": "2021-09-16T09:55:45Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs4tESeg",
          "commit": {
            "abbreviatedOid": "b807548"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-09-16T09:56:33Z",
          "updatedAt": "2021-09-16T09:56:34Z",
          "comments": [
            {
              "originalPosition": 21,
              "body": "```suggestion\r\ncongestion controllers that mark much more frequently than classic ECN {{?RFC3168}}.\r\n```",
              "createdAt": "2021-09-16T09:56:34Z",
              "updatedAt": "2021-09-16T09:56:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs4uPBer",
          "commit": {
            "abbreviatedOid": "bd938a5"
          },
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-10T16:43:10Z",
          "updatedAt": "2021-10-10T16:44:18Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "```suggestion\r\nAn endpoint SHOULD also acknowledge packets received with a CE mark as though\r\n```",
              "createdAt": "2021-10-10T16:43:10Z",
              "updatedAt": "2021-10-10T16:44:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs4uPJ-9",
          "commit": {
            "abbreviatedOid": "f8aa220"
          },
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-10T23:32:55Z",
          "updatedAt": "2021-10-10T23:32:55Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "Please disregard this comment if I'm missing some context, but I'm not sure how doing such thing is going to help.\r\n\r\nIIUC, while it is true that sending an immediate ACK for a CE-marked non-ack-eliciting packet (i.e. packet carrying an ACK) might help the _delivery_ of the signal, doing so does not mitigate the congestion. That is because the receiving such an ACK does not reduce the rate at which endpoints send data.\r\n\r\nTherefore, the only outcome of having this requirement would be increased number of packets, even if we disregard the chance of seeing ping-pong. I'm not sure if that's necessary.",
              "createdAt": "2021-10-10T23:32:55Z",
              "updatedAt": "2021-10-10T23:33:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs4uPKPQ",
          "commit": {
            "abbreviatedOid": "f8aa220"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-10T23:41:37Z",
          "updatedAt": "2021-10-10T23:41:38Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "That's a good point, any thoughts @bbriscoe ?",
              "createdAt": "2021-10-10T23:41:38Z",
              "updatedAt": "2021-10-10T23:41:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs4uTRiE",
          "commit": {
            "abbreviatedOid": "f8aa220"
          },
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-12T01:15:44Z",
          "updatedAt": "2021-10-12T01:18:14Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "I think this needs spelling out -- what about the acknowledging is different if the receiver treats this as ack-eliciting?",
              "createdAt": "2021-10-12T01:15:44Z",
              "updatedAt": "2021-10-12T01:18:14Z"
            },
            {
              "originalPosition": 15,
              "body": "Perhaps I'm missing something, but this is how I see it; please say more if I'm missing the point.\r\n\r\nAt a high level, the idea here is that the ECN machinery in general depends on the receiver of the CE signal relaying it back to the sender (as opposed to the congested switch/router directly sending a CE signal back to the sender, like ICMP Source-Quench). One could argue that the CE marking creates a need for signal delivery back to the sender, therefore making the CE-marked packets effectively ack-eliciting.\r\n\r\nThe value of receiving a CE mark early is so that the sender can take corresponding action in response to it. Receiving the mark sooner means the sender can reduce its sending rate sooner. ECN has a built in ~1RTT delay, so acking immediately is helpful to not increase that delay in the sender's response time.",
              "createdAt": "2021-10-12T01:16:48Z",
              "updatedAt": "2021-10-12T01:18:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs4uTqdJ",
          "commit": {
            "abbreviatedOid": "f8aa220"
          },
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-12T05:42:28Z",
          "updatedAt": "2021-10-12T05:42:29Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "@janaiyengar Let's say that there are two endpoints A and B, where A is sending data and B is acking them.\r\n\r\nThis paragraph is about ack-only packets sent by _B_ being CE-marked, and A sending ACK-of-ACKs at an earlier moment, with the goal being to somehow reduce the number of ack-only packets sent by B.\r\n\r\nWe can handle this type of congestion by possibly doing something like:\r\n* require A to reduce its send rate so that less ACKs would be generated by B, or\r\n* require A to send an ACK_FREQUENCY frame indicating B that ACKs should be sent less frequently, or\r\n* require B to send ACKs less frequently, in contrary to what has been requested by A though the ACK_FREQUENCY frame.\r\n\r\nHowever, we do not have any of these kind of mitigations being stated.\r\n\r\nA will continue sending at the same rate regardless of the proposed mechanism, because packets that were sent by A are not CE marked, and therefore B will continue acking them at the same rate.\r\n\r\nAs you can see, the added mechanism does not change the situation.",
              "createdAt": "2021-10-12T05:42:29Z",
              "updatedAt": "2021-10-12T05:42:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs4uWMGb",
          "commit": {
            "abbreviatedOid": "f8aa220"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-12T15:49:46Z",
          "updatedAt": "2021-10-12T15:49:47Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "I agree with Jana: this change doesn't specify a reaction but the singling is needed to even be able to decide to implement any reaction in future. So I don't think we need to require a specific reaction here but of course we could add some text to give examples on how to react, in order to improve the understanding for the reader.",
              "createdAt": "2021-10-12T15:49:47Z",
              "updatedAt": "2021-10-12T15:49:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs4uXMO1",
          "commit": {
            "abbreviatedOid": "f8aa220"
          },
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-12T20:27:49Z",
          "updatedAt": "2021-10-12T20:27:50Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "Ah, good point, @kazuho. I'll think about this.",
              "createdAt": "2021-10-12T20:27:49Z",
              "updatedAt": "2021-10-12T20:27:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs4uXOh7",
          "commit": {
            "abbreviatedOid": "f8aa220"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-12T20:35:34Z",
          "updatedAt": "2021-10-12T20:35:35Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "```suggestion\r\nDoing this maintains the peer's response time to congestion events, while also\r\n```",
              "createdAt": "2021-10-12T20:35:34Z",
              "updatedAt": "2021-10-12T20:35:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs4uXPNW",
          "commit": {
            "abbreviatedOid": "a8c4cc8"
          },
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-12T20:39:04Z",
          "updatedAt": "2021-10-12T20:39:04Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "```suggestion\r\ncongestion controllers that mark more frequently than classic ECN {{?RFC3168}}.\r\n```",
              "createdAt": "2021-10-12T20:39:04Z",
              "updatedAt": "2021-10-12T20:39:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs4uXVO0",
          "commit": {
            "abbreviatedOid": "c0f542e"
          },
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-12T21:09:52Z",
          "updatedAt": "2021-10-12T21:09:53Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "I know that this paragraph has already been dropped, but FWIW, I'm not sure if I agree that signalling is needed to resolve this problem.\r\n\r\nThe principle that we have in this draft is that senders control how frequently acks are sent. If we are to apply this principle to the problem (ACK-only packets being CE-marked), then the solution would be for the receiver of those packets (A) to send ACK_FREQUENCY packets so that fewer acks would be sent.",
              "createdAt": "2021-10-12T21:09:53Z",
              "updatedAt": "2021-10-12T21:09:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs4uX8CP",
          "commit": {
            "abbreviatedOid": "c0f542e"
          },
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-13T02:16:13Z",
          "updatedAt": "2021-10-13T02:16:13Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "Yes, I agree, we don't need to handle the case of ACK packets carrying CE marks. That is a more complicated case, and one that I am happy to leave out of this draft for now.",
              "createdAt": "2021-10-13T02:16:13Z",
              "updatedAt": "2021-10-13T02:16:13Z"
            }
          ]
        }
      ]
    },
    {
      "number": 69,
      "id": "PR_kwDODddxTs4rz1Xq",
      "title": "Use RFC9000 frame formats",
      "url": "https://github.com/quicwg/ack-frequency/pull/69",
      "state": "MERGED",
      "author": "ianswett",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "Fixes #66",
      "createdAt": "2021-09-16T00:17:58Z",
      "updatedAt": "2025-02-06T13:22:06Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "2653d744076e98d40bf0b6240d82af2e84f0a2c9",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "ianswett-frame-formats",
      "headRefOid": "fd9135603d3f7b6cec1483a2a183b6c8b2d0b598",
      "closedAt": "2021-09-17T21:08:54Z",
      "mergedAt": "2021-09-17T21:08:54Z",
      "mergedBy": "ianswett",
      "mergeCommit": {
        "oid": "7976fcdf42b6c9893e3862e7833a214f93b0cac1"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs4tC3df",
          "commit": {
            "abbreviatedOid": "ba93d90"
          },
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-09-16T00:22:02Z",
          "updatedAt": "2021-09-16T00:22:03Z",
          "comments": [
            {
              "originalPosition": 36,
              "body": "Name typi",
              "createdAt": "2021-09-16T00:22:02Z",
              "updatedAt": "2021-09-16T00:22:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs4tEQ6i",
          "commit": {
            "abbreviatedOid": "ba93d90"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-09-16T09:50:01Z",
          "updatedAt": "2021-09-16T09:50:04Z",
          "comments": [
            {
              "originalPosition": 36,
              "body": "```suggestion\r\nIMMEDIATE_ACK Frame {\r\n```",
              "createdAt": "2021-09-16T09:50:01Z",
              "updatedAt": "2021-09-16T09:50:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs4tK-bR",
          "commit": {
            "abbreviatedOid": "fd91356"
          },
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-09-17T20:54:31Z",
          "updatedAt": "2021-09-17T20:54:31Z",
          "comments": []
        }
      ]
    },
    {
      "number": 75,
      "id": "PR_kwDODddxTs4r99Me",
      "title": "Update draft-ietf-quic-ack-frequency.md",
      "url": "https://github.com/quicwg/ack-frequency/pull/75",
      "state": "CLOSED",
      "author": "gorryfair",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "PR clarifying the consequencies and traedoffs in adjusting the ACK Policy.",
      "createdAt": "2021-09-20T14:58:34Z",
      "updatedAt": "2021-10-25T10:31:57Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "7976fcdf42b6c9893e3862e7833a214f93b0cac1",
      "headRepository": "gorryfair/ack-frequency",
      "headRefName": "patch-1",
      "headRefOid": "5099610ad89c558bc784c17e6ec693ff26010fe4",
      "closedAt": "2021-10-25T10:31:56Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "body": "@gorryfair -- I've carried over some of this and added some other things in #101, which replaces this PR -- please take a look.",
          "createdAt": "2021-10-24T12:59:09Z",
          "updatedAt": "2021-10-24T12:59:09Z"
        },
        {
          "author": "gorryfair",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The changes requested here will not be executed in the way this PR envisaged. However, I'm expecting the new revision to take most of the ideas here in some form or other. So I suggest the best action is that I use this old PR as a checklist for review of the new revision and raise new issues if any are needed.",
          "createdAt": "2021-10-25T10:31:56Z",
          "updatedAt": "2021-10-25T10:31:56Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs4tQkNH",
          "commit": {
            "abbreviatedOid": "714d91b"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "Thanks for the PR!\r\n\r\nI left a few comments, but I'm a bit unclear as to what you're attempting to fix?",
          "createdAt": "2021-09-21T05:36:13Z",
          "updatedAt": "2021-10-10T12:39:46Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "```suggestion\r\n## Congestion Response {#congestion-response}\r\n```",
              "createdAt": "2021-09-21T05:36:13Z",
              "updatedAt": "2021-10-10T00:15:40Z"
            },
            {
              "originalPosition": 15,
              "body": "This is not accurate, expiration of a timer does not cause packet loss in QUIC.",
              "createdAt": "2021-10-10T00:11:30Z",
              "updatedAt": "2021-10-10T00:15:40Z"
            },
            {
              "originalPosition": 64,
              "body": "This depends upon the pacing algorithm, and the recovery draft strongly suggests pacing.",
              "createdAt": "2021-10-10T00:14:54Z",
              "updatedAt": "2021-10-10T00:15:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs4uTQUB",
          "commit": {
            "abbreviatedOid": "714d91b"
          },
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "@gorryfair -- as @ianswett responded, there are issues in the PR. However there are a couple of pieces that are useful ... I'll pull them out in a separate PR.",
          "createdAt": "2021-10-12T01:00:36Z",
          "updatedAt": "2021-10-12T01:03:11Z",
          "comments": [
            {
              "originalPosition": 72,
              "body": "I think the spirit of this can be useful in the draft, but as a suggestion for a sender that does not pace.",
              "createdAt": "2021-10-12T01:00:37Z",
              "updatedAt": "2021-10-12T01:03:11Z"
            },
            {
              "originalPosition": 29,
              "body": "This is useful, but not in the right place.",
              "createdAt": "2021-10-12T01:02:00Z",
              "updatedAt": "2021-10-12T01:03:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs4uUtle",
          "commit": {
            "abbreviatedOid": "714d91b"
          },
          "author": "gorryfair",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-12T10:33:57Z",
          "updatedAt": "2021-10-12T10:33:57Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "This statement was meant to be a good thing to support reducing the ACK Frequency, so I don't understand - To me QUIC uses a method similar to RACK with a probe timeout (PTO),  Section 6.2 of RC9002?",
              "createdAt": "2021-10-12T10:33:57Z",
              "updatedAt": "2021-10-12T10:33:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs4uUu0g",
          "commit": {
            "abbreviatedOid": "5099610"
          },
          "author": "gorryfair",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-12T10:38:15Z",
          "updatedAt": "2021-10-12T10:38:15Z",
          "comments": [
            {
              "originalPosition": 64,
              "body": "I think it is clear that RFC9002 encourages pacing (which is good). This sentence was intended to also encourage some form of pacing if you do have larger jumps in the number of acknowledged bytes. I think other words could say that too.",
              "createdAt": "2021-10-12T10:38:15Z",
              "updatedAt": "2021-10-12T10:38:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs4uUvsi",
          "commit": {
            "abbreviatedOid": "5099610"
          },
          "author": "gorryfair",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-12T10:41:46Z",
          "updatedAt": "2021-10-12T10:41:46Z",
          "comments": [
            {
              "originalPosition": 72,
              "body": "Interested in what you mean: I intended the text to recommend a method that either paces; or limit to IWs; (or both). ",
              "createdAt": "2021-10-12T10:41:46Z",
              "updatedAt": "2021-10-12T10:41:46Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs4uXV8A",
          "commit": {
            "abbreviatedOid": "5099610"
          },
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-12T21:13:50Z",
          "updatedAt": "2021-10-12T21:13:51Z",
          "comments": [
            {
              "originalPosition": 72,
              "body": "Basically, I don't think we should introduce any requirements at the receiver. This extension is designed to make the sender responsible for how frequently it wants to receive acks, and the sender should deal with consequences of making that choice. As such, we can perhaps say again that the sender needs to handle this via pacing or other means.",
              "createdAt": "2021-10-12T21:13:50Z",
              "updatedAt": "2021-10-12T21:13:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs4uXWJ2",
          "commit": {
            "abbreviatedOid": "5099610"
          },
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-12T21:15:04Z",
          "updatedAt": "2021-10-12T21:15:05Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "The PTO triggers a new packet, but does not cause loss detection. QUIC loss detection happens only on receiving an ACK. Doing so allows a QUIC sender to detect unnecessary retransmissions, since the rtxs all have new packet numbers.",
              "createdAt": "2021-10-12T21:15:05Z",
              "updatedAt": "2021-10-12T21:15:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs4uXWvR",
          "commit": {
            "abbreviatedOid": "5099610"
          },
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-12T21:18:23Z",
          "updatedAt": "2021-10-12T21:18:24Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "The point below is not quite accurate. Reducing periodicity of RTT measurements is not necessarily going to postpone any retransmission, since that depends on the network itself and how stationary the RTT distribution is. I understand that there is an interaction between fewer acks being received and loss detection, and that might be worth noting.",
              "createdAt": "2021-10-12T21:18:24Z",
              "updatedAt": "2021-10-12T21:18:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs4uZV6u",
          "commit": {
            "abbreviatedOid": "5099610"
          },
          "author": "gorryfair",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-13T10:39:35Z",
          "updatedAt": "2021-10-13T10:39:35Z",
          "comments": [
            {
              "originalPosition": 72,
              "body": "Then, I think we do not agree. I see this as about how the receiver is required to function (even if the server takes control) - My position is that it does not matter whether this function is controlled by the sender or a part of the receiver spec. \"Pacing\" is likely a good recommendation (sigh... if only it was posisble to make more actionable details of how to pace). Since this can have significant impact on the traffic patterns, we need to say specify something, and I think it is wrong to just say \"or other means\". ",
              "createdAt": "2021-10-13T10:39:35Z",
              "updatedAt": "2021-10-13T10:39:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs4uZX7n",
          "commit": {
            "abbreviatedOid": "5099610"
          },
          "author": "gorryfair",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-13T10:48:26Z",
          "updatedAt": "2021-10-13T10:48:27Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "I think we might be converging: Of course we agree that if the RTT doesn't change, then the RTT frequency doesn't impact retransmission.  OK.  So I see it's valid to say QUIC PTO isn't loss detection - but the reason the timer fires is because the sender expected a response. This sounds like wordsmithing which is worthwhile.\r\nAs a specification for the Internet, we should be assuming that a design needs to be robust to changeable paths - framing it that way would be OK for me.",
              "createdAt": "2021-10-13T10:48:26Z",
              "updatedAt": "2021-10-13T10:48:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs4u8B_h",
          "commit": {
            "abbreviatedOid": "5099610"
          },
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-24T09:23:23Z",
          "updatedAt": "2021-10-24T09:23:23Z",
          "comments": [
            {
              "originalPosition": 72,
              "body": "We're disagreeing about different things :-) My point is about not requiring things at the _receiver_. This choice of ack frequency is entirely a sender decision, and while we can require the sender to do things sensibly, I don't think we want to add requirements at the receiver to second-guess the sender. Especially, since the receiver does not know the sender's congestion window or controller.",
              "createdAt": "2021-10-24T09:23:23Z",
              "updatedAt": "2021-10-24T09:23:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs4u9u91",
          "commit": {
            "abbreviatedOid": "5099610"
          },
          "author": "gorryfair",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-25T10:28:05Z",
          "updatedAt": "2021-10-25T10:28:05Z",
          "comments": [
            {
              "originalPosition": 72,
              "body": "So, I do think we are indeed disagreeing about different things :-). While I talked in terms of what the receiver ought to do, I'd agree that ANY additional requirements or advice on the ACK policy would be requirements or advice for how a SENDER asks the RECEIVER to behave. ",
              "createdAt": "2021-10-25T10:28:05Z",
              "updatedAt": "2021-10-25T10:28:05Z"
            }
          ]
        }
      ]
    },
    {
      "number": 77,
      "id": "PR_kwDODddxTs4sk8YG",
      "title": "Clarify an endpoint can send less ACKs when processing packets in a batch.",
      "url": "https://github.com/quicwg/ack-frequency/pull/77",
      "state": "CLOSED",
      "author": "rpaulo",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes issue #30.",
      "createdAt": "2021-10-01T19:18:25Z",
      "updatedAt": "2021-10-01T20:36:34Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "7976fcdf42b6c9893e3862e7833a214f93b0cac1",
      "headRepository": "rpaulo/ack-frequency",
      "headRefName": "less-acks-batch",
      "headRefOid": "c47a7a74816a4dacf579ef670e0ff592257326e6",
      "closedAt": "2021-10-01T20:36:34Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "rpaulo",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Where does RFC 9000 specifically talk about batching?",
          "createdAt": "2021-10-01T20:27:11Z",
          "updatedAt": "2021-10-01T20:27:11Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "\"A receiver MAY process multiple available packets before determining\r\n whether to send an ACK frame in response.\" from Section 13.2.2: https://datatracker.ietf.org/doc/html/rfc9000#section-13.2.2",
          "createdAt": "2021-10-01T20:29:51Z",
          "updatedAt": "2021-10-01T20:29:51Z"
        },
        {
          "author": "rpaulo",
          "authorAssociation": "CONTRIBUTOR",
          "body": "You added that section in f8fc854dc back in 2019 but I don't think it was clear enough.  @janaiyengar cleared up that section in May (or so) 2020 which was after I wrote issue #30.  I'll close.",
          "createdAt": "2021-10-01T20:36:34Z",
          "updatedAt": "2021-10-01T20:36:34Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs4t2sq2",
          "commit": {
            "abbreviatedOid": "1913ac2"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-01T19:31:31Z",
          "updatedAt": "2021-10-01T19:31:32Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "```suggestion\r\nwait to process all available packets in a batch before sending an\r\nacknowledgement.\r\n```",
              "createdAt": "2021-10-01T19:31:31Z",
              "updatedAt": "2021-10-01T19:31:52Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs4t21fE",
          "commit": {
            "abbreviatedOid": "c47a7a7"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "One question on this PR.  It seems somewhat duplicative of what's in RFC9000.  Can you clarify what's new?",
          "createdAt": "2021-10-01T20:23:55Z",
          "updatedAt": "2021-10-01T20:23:55Z",
          "comments": []
        }
      ]
    },
    {
      "number": 78,
      "id": "PR_kwDODddxTs4slFMO",
      "title": "Improve Ignore Order explanation.",
      "url": "https://github.com/quicwg/ack-frequency/pull/78",
      "state": "MERGED",
      "author": "rpaulo",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes issue #76.",
      "createdAt": "2021-10-01T20:20:54Z",
      "updatedAt": "2021-10-09T22:52:55Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "7976fcdf42b6c9893e3862e7833a214f93b0cac1",
      "headRepository": "rpaulo/ack-frequency",
      "headRefName": "ignore-reorder-wording",
      "headRefOid": "6aaeda11f68f91a3d840bd6512718c859a55e048",
      "closedAt": "2021-10-09T22:52:55Z",
      "mergedAt": "2021-10-09T22:52:55Z",
      "mergedBy": "ianswett",
      "mergeCommit": {
        "oid": "2172c24df098c408456f2f30bba56ba3bf27e2b1"
      },
      "comments": [
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks for the PR!",
          "createdAt": "2021-10-09T22:52:04Z",
          "updatedAt": "2021-10-09T22:52:04Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs4t21Ri",
          "commit": {
            "abbreviatedOid": "956f88f"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-01T20:22:50Z",
          "updatedAt": "2021-10-01T20:22:50Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "```suggestion\r\n: An 8-bit field representing a boolean truth value. This field is\r\n```",
              "createdAt": "2021-10-01T20:22:50Z",
              "updatedAt": "2021-10-01T20:22:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs4uOuwt",
          "commit": {
            "abbreviatedOid": "6aaeda1"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-09T22:51:41Z",
          "updatedAt": "2021-10-09T22:51:41Z",
          "comments": []
        }
      ]
    },
    {
      "number": 81,
      "id": "PR_kwDODddxTs4srXEA",
      "title": "Note update",
      "url": "https://github.com/quicwg/ack-frequency/pull/81",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "You aren't using .note.xml, so remove it.\r\n\r\nI updated the links so that the text rendering doesn't include them twice.\r\n\r\n~~Plus a free closed brace.~~",
      "createdAt": "2021-10-05T06:53:14Z",
      "updatedAt": "2021-10-05T14:55:11Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "7976fcdf42b6c9893e3862e7833a214f93b0cac1",
      "headRepository": "martinthomson/ack-frequency",
      "headRefName": "note-update",
      "headRefOid": "01d178702081619f6937fac25bcef5c08d1622f8",
      "closedAt": "2021-10-05T14:55:11Z",
      "mergedAt": "2021-10-05T14:55:11Z",
      "mergedBy": "ianswett",
      "mergeCommit": {
        "oid": "b2878163d3fad6b5b217f953f542582b0368ffc8"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs4t_STw",
          "commit": {
            "abbreviatedOid": "01d1787"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-05T14:55:06Z",
          "updatedAt": "2021-10-05T14:55:06Z",
          "comments": []
        }
      ]
    },
    {
      "number": 82,
      "id": "PR_kwDODddxTs4srXdk",
      "title": "Section references",
      "url": "https://github.com/quicwg/ack-frequency/pull/82",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Better section references.",
      "createdAt": "2021-10-05T06:56:11Z",
      "updatedAt": "2021-10-05T14:57:48Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "7976fcdf42b6c9893e3862e7833a214f93b0cac1",
      "headRepository": "martinthomson/ack-frequency",
      "headRefName": "section-ref",
      "headRefOid": "93a67267f73667f73e72adb5ce6cb77669b162ac",
      "closedAt": "2021-10-05T14:57:48Z",
      "mergedAt": "2021-10-05T14:57:48Z",
      "mergedBy": "ianswett",
      "mergeCommit": {
        "oid": "5cfcf482a9c0189d0067621b0ae7921714aa3df1"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs4t_TIu",
          "commit": {
            "abbreviatedOid": "93a6726"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-05T14:57:36Z",
          "updatedAt": "2021-10-05T14:57:36Z",
          "comments": []
        }
      ]
    },
    {
      "number": 83,
      "id": "PR_kwDODddxTs4srXoS",
      "title": "Remove travis config",
      "url": "https://github.com/quicwg/ack-frequency/pull/83",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-10-05T06:57:25Z",
      "updatedAt": "2021-10-05T14:56:40Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "7976fcdf42b6c9893e3862e7833a214f93b0cac1",
      "headRepository": "martinthomson/ack-frequency",
      "headRefName": "travis",
      "headRefOid": "2f762a4112fd2fe301e4f289a4717295f020bd0d",
      "closedAt": "2021-10-05T14:56:40Z",
      "mergedAt": "2021-10-05T14:56:40Z",
      "mergedBy": "ianswett",
      "mergeCommit": {
        "oid": "3042b2b6475940a4ccbb4c0742ddaf872a6ee987"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs4t_StH",
          "commit": {
            "abbreviatedOid": "2f762a4"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-05T14:56:17Z",
          "updatedAt": "2021-10-05T14:56:17Z",
          "comments": []
        }
      ]
    },
    {
      "number": 86,
      "id": "PR_kwDODddxTs4s-_uO",
      "title": "Clarify Ack-Eliciting threshold",
      "url": "https://github.com/quicwg/ack-frequency/pull/86",
      "state": "MERGED",
      "author": "ianswett",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "Fixes #85",
      "createdAt": "2021-10-10T14:04:47Z",
      "updatedAt": "2025-02-06T13:22:08Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "2172c24df098c408456f2f30bba56ba3bf27e2b1",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "ianswett-clarify-threshold",
      "headRefOid": "91fb6f0e2579cc85d3493fb029bb5c9d31ea9b67",
      "closedAt": "2021-10-12T10:57:34Z",
      "mergedAt": "2021-10-12T10:57:34Z",
      "mergedBy": "ianswett",
      "mergeCommit": {
        "oid": "3a5e0b41df7515b4984730189f2d648b5443725c"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs4uPL2e",
          "commit": {
            "abbreviatedOid": "ce4656a"
          },
          "author": "martinthomson",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "A good change, not sure about the other part.",
          "createdAt": "2021-10-11T00:28:09Z",
          "updatedAt": "2021-10-11T00:28:22Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "This change is otherwise good, but I wonder if this requirement isn't nonsensical.  It's a 62-bit value that we know can be used by endpoints.  The challenge is that values beyond a certain point are certain to produce bad outcomes; you don't want that, but it seems like you don't want to commit to a specific limit.  I'll open an issue.",
              "createdAt": "2021-10-11T00:28:09Z",
              "updatedAt": "2021-10-11T00:28:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs4uQvKT",
          "commit": {
            "abbreviatedOid": "ce4656a"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-11T11:51:35Z",
          "updatedAt": "2021-10-11T11:51:36Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "This sentence didn't change(ok, I capitalized the E and T of ACK-Eliciting Threshold) FYI",
              "createdAt": "2021-10-11T11:51:35Z",
              "updatedAt": "2021-10-11T11:51:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs4uTOuQ",
          "commit": {
            "abbreviatedOid": "ce4656a"
          },
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-12T00:40:53Z",
          "updatedAt": "2021-10-12T00:42:11Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "```suggestion\r\n  Threshold value that is larger than the maximum value the endpoint can represent, the\r\n```",
              "createdAt": "2021-10-12T00:40:53Z",
              "updatedAt": "2021-10-12T00:42:11Z"
            }
          ]
        }
      ]
    },
    {
      "number": 88,
      "id": "PR_kwDODddxTs4s_CNd",
      "title": "Add an Ignore ECN bool similar to Ignore Order",
      "url": "https://github.com/quicwg/ack-frequency/pull/88",
      "state": "MERGED",
      "author": "ianswett",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "design"
      ],
      "body": "Fixes #87",
      "createdAt": "2021-10-10T15:01:39Z",
      "updatedAt": "2025-02-06T13:22:10Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "02ca7c4b6eb6ca28b356bd72ac347d4020a3f68e",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "ianswett-ignore-ecn",
      "headRefOid": "bbb0840cfbc01acd0b29bd99403d3a0c84228abf",
      "closedAt": "2021-10-21T13:20:55Z",
      "mergedAt": "2021-10-21T13:20:55Z",
      "mergedBy": "janaiyengar",
      "mergeCommit": {
        "oid": "08774467b07c40690921bcbef1b00715b8247383"
      },
      "comments": [
        {
          "author": "goelvidhi",
          "authorAssociation": "NONE",
          "body": "I think we shouldn't make this change until we understand the use case for this field. IMO, it is harmful to the networks.\r\n\r\nHappy to discuss this over slack or at #87 ",
          "createdAt": "2021-10-15T08:25:21Z",
          "updatedAt": "2021-10-15T08:25:21Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs4uWRdG",
          "commit": {
            "abbreviatedOid": "3cdd3d9"
          },
          "author": "rpaulo",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-12T16:08:29Z",
          "updatedAt": "2021-10-12T16:08:29Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "Similarly all other values are `FRAME_ENCODING_ERROR`.",
              "createdAt": "2021-10-12T16:08:29Z",
              "updatedAt": "2021-10-12T16:08:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs4uXTxP",
          "commit": {
            "abbreviatedOid": "3cdd3d9"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-12T21:02:22Z",
          "updatedAt": "2021-10-12T21:02:23Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "It's only a single bit now, so there's no ability to incorrectly encode it.",
              "createdAt": "2021-10-12T21:02:22Z",
              "updatedAt": "2021-10-12T21:02:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs4uXTC-",
          "commit": {
            "abbreviatedOid": "3cdd3d9"
          },
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "This is forward-looking a bit, but I think this is reasonable.",
          "createdAt": "2021-10-12T20:58:47Z",
          "updatedAt": "2021-10-12T21:02:40Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "Add a \"Reserved\" 6-bit field, so that this frame ends on a byte boundary.",
              "createdAt": "2021-10-12T20:58:47Z",
              "updatedAt": "2021-10-12T21:02:40Z"
            },
            {
              "originalPosition": 21,
              "body": "```suggestion\r\n  0 represents 'false' and 1 represents 'true'.\r\n```",
              "createdAt": "2021-10-12T21:01:17Z",
              "updatedAt": "2021-10-12T21:02:40Z"
            },
            {
              "originalPosition": 25,
              "body": "```suggestion\r\n: A single bit field representing a boolean truth value. This field is\r\n```",
              "createdAt": "2021-10-12T21:01:35Z",
              "updatedAt": "2021-10-12T21:02:40Z"
            },
            {
              "originalPosition": 15,
              "body": "```suggestion\r\n: A single bit field representing a boolean truth value. This field is\r\n```",
              "createdAt": "2021-10-12T21:01:43Z",
              "updatedAt": "2021-10-12T21:02:40Z"
            },
            {
              "originalPosition": 27,
              "body": "```suggestion\r\n  acknowledgement when the peer receives CE-marked packets ({{reordering}}).\r\n```",
              "createdAt": "2021-10-12T21:02:02Z",
              "updatedAt": "2021-10-12T21:02:40Z"
            },
            {
              "originalPosition": 23,
              "body": "```suggestion\r\nIgnore CE:\r\n```",
              "createdAt": "2021-10-12T21:02:32Z",
              "updatedAt": "2021-10-12T21:02:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs4uXixO",
          "commit": {
            "abbreviatedOid": "3cdd3d9"
          },
          "author": "martinthomson",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-12T22:26:02Z",
          "updatedAt": "2021-10-12T22:26:02Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "You might want to put that reserved field ahead of these two bits so that these take 0x01 and 0x02 rather than 0x80 and 0x40.",
              "createdAt": "2021-10-12T22:26:02Z",
              "updatedAt": "2021-10-12T22:26:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs4uXnct",
          "commit": {
            "abbreviatedOid": "3cdd3d9"
          },
          "author": "rpaulo",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-12T23:02:38Z",
          "updatedAt": "2021-10-12T23:02:38Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "Sigh. I assumed it was just like the other value. ",
              "createdAt": "2021-10-12T23:02:38Z",
              "updatedAt": "2021-10-12T23:02:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs4ugHh1",
          "commit": {
            "abbreviatedOid": "bfdcbe5"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-14T19:35:00Z",
          "updatedAt": "2021-10-14T19:35:00Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "Thanks, done!",
              "createdAt": "2021-10-14T19:35:00Z",
              "updatedAt": "2021-10-14T19:35:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs4ugcye",
          "commit": {
            "abbreviatedOid": "bfdcbe5"
          },
          "author": "rpaulo",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-14T21:14:56Z",
          "updatedAt": "2021-10-14T21:16:02Z",
          "comments": [
            {
              "originalPosition": 29,
              "body": "```suggestion\n  0 represents 'false' and 1 represents 'true'.\n```\n",
              "createdAt": "2021-10-14T21:14:56Z",
              "updatedAt": "2021-10-14T21:16:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs4u1HHB",
          "commit": {
            "abbreviatedOid": "1f33477"
          },
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-21T13:12:07Z",
          "updatedAt": "2021-10-21T13:13:01Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\n  Ignore CE (1),\r\n```",
              "createdAt": "2021-10-21T13:12:07Z",
              "updatedAt": "2021-10-21T13:13:01Z"
            },
            {
              "originalPosition": 16,
              "body": "```suggestion\r\n: A 1-bit field representing a boolean truth value. This field is\r\n```",
              "createdAt": "2021-10-21T13:12:23Z",
              "updatedAt": "2021-10-21T13:13:01Z"
            },
            {
              "originalPosition": 26,
              "body": "```suggestion\r\n: A 1-bit field representing a boolean truth value. This field is\r\n```",
              "createdAt": "2021-10-21T13:12:38Z",
              "updatedAt": "2021-10-21T13:13:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs4u1J4x",
          "commit": {
            "abbreviatedOid": "bbb0840"
          },
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-21T13:20:48Z",
          "updatedAt": "2021-10-21T13:20:48Z",
          "comments": []
        }
      ]
    },
    {
      "number": 91,
      "id": "PR_kwDODddxTs4tDEg7",
      "title": "Apply 1/2 of  a change that was lost",
      "url": "https://github.com/quicwg/ack-frequency/pull/91",
      "state": "CLOSED",
      "author": "ianswett",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "@rpaulo posted that this change was missed.  This pulls in the first part, and I think the second part has been superceded.\r\n\r\nhttps://github.com/quicwg/ack-frequency/commit/8a87dbd3d38c40507a2ca346f242fbdee3866ec3\r\n\r\nFixes #90 ",
      "createdAt": "2021-10-12T03:18:44Z",
      "updatedAt": "2025-02-06T13:22:07Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "2172c24df098c408456f2f30bba56ba3bf27e2b1",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "ianswett-old-pr",
      "headRefOid": "3814465df669fc1f5f045f78bb4fe2fd7dd7b7fe",
      "closedAt": "2021-10-12T09:57:10Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "rpaulo",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Should be PROTOCOL_VIOLATION since it\u2019s not a TP anymore?",
          "createdAt": "2021-10-12T06:24:35Z",
          "updatedAt": "2021-10-12T06:24:35Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "I realize this wasn't lost, this was superseded by the following paragraph, which says that it can't be larger than the max_ack_delay.\r\n\r\nAs a result, I think I should close this PR and the issue?",
          "createdAt": "2021-10-12T09:51:23Z",
          "updatedAt": "2021-10-12T09:51:23Z"
        },
        {
          "author": "rpaulo",
          "authorAssociation": "CONTRIBUTOR",
          "body": "That doesn\u2019t make sense to me. How come Requested Max Ack Delay can\u2019t be larger than the original Max Ack Delay?",
          "createdAt": "2021-10-12T14:20:46Z",
          "updatedAt": "2021-10-12T14:20:46Z"
        },
        {
          "author": "rpaulo",
          "authorAssociation": "CONTRIBUTOR",
          "body": " Ok I understand now that you only changed min ack delay. However, Why do you think the second part has been superseded?\r\nI was referring to the fact that the text about the request max ack delay in the ack frequency frame doesn\u2019t call out the 2^14 limit. ",
          "createdAt": "2021-10-12T15:22:28Z",
          "updatedAt": "2021-10-12T15:22:28Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 92,
      "id": "PR_kwDODddxTs4tD-iN",
      "title": "Change 'are' to 'can be' undesirable consequences",
      "url": "https://github.com/quicwg/ack-frequency/pull/92",
      "state": "MERGED",
      "author": "ianswett",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #71",
      "createdAt": "2021-10-12T09:59:02Z",
      "updatedAt": "2025-02-06T13:22:07Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "2172c24df098c408456f2f30bba56ba3bf27e2b1",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "ianswett-can-be",
      "headRefOid": "3764886e6b8ce855a3ba952c6eab1f1c0c2f2f71",
      "closedAt": "2021-10-12T18:59:04Z",
      "mergedAt": "2021-10-12T18:59:04Z",
      "mergedBy": "ianswett",
      "mergeCommit": {
        "oid": "4d25d133baebad4173f717177e62dfe93304a1c8"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs4uUsQl",
          "commit": {
            "abbreviatedOid": "3764886"
          },
          "author": "gorryfair",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "This seems an improvement, thanks.",
          "createdAt": "2021-10-12T10:28:14Z",
          "updatedAt": "2021-10-12T10:28:14Z",
          "comments": []
        }
      ]
    },
    {
      "number": 94,
      "id": "PR_kwDODddxTs4tLHiL",
      "title": "Fix whitespace problems from 956f88fd.",
      "url": "https://github.com/quicwg/ack-frequency/pull/94",
      "state": "MERGED",
      "author": "rpaulo",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "```\r\n227:  The value of this field MUST be 0x00 (representing `false`) or 0x01 \r\ndraft-ietf-quic-ack-frequency.md contains trailing whitespace\r\n```",
      "createdAt": "2021-10-14T01:29:14Z",
      "updatedAt": "2021-10-14T08:21:04Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "1fcf6a17e8f9bbfb3a51e9d6f02046bb3401ef5b",
      "headRepository": "rpaulo/ack-frequency",
      "headRefName": "fix-whitespace",
      "headRefOid": "b514c43c2ad5875cece8b8720feec96a74ca3847",
      "closedAt": "2021-10-14T08:21:04Z",
      "mergedAt": "2021-10-14T08:21:04Z",
      "mergedBy": "ianswett",
      "mergeCommit": {
        "oid": "e8a3bc0569dcaec912ab7aaa97b148a9d8ed53dd"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs4udYCt",
          "commit": {
            "abbreviatedOid": "b514c43"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-14T08:20:36Z",
          "updatedAt": "2021-10-14T08:20:36Z",
          "comments": []
        }
      ]
    },
    {
      "number": 95,
      "id": "PR_kwDODddxTs4tLKj6",
      "title": "Implementation considerations for migration and PMTUD",
      "url": "https://github.com/quicwg/ack-frequency/pull/95",
      "state": "MERGED",
      "author": "rpaulo",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "design"
      ],
      "body": "Fixes #79.",
      "createdAt": "2021-10-14T01:55:15Z",
      "updatedAt": "2021-10-21T13:11:05Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "1fcf6a17e8f9bbfb3a51e9d6f02046bb3401ef5b",
      "headRepository": "rpaulo/ack-frequency",
      "headRefName": "migration-and-pmtud",
      "headRefOid": "0c868007cf9d5305882db0a531c841a2b4ef94e6",
      "closedAt": "2021-10-21T13:11:05Z",
      "mergedAt": "2021-10-21T13:11:05Z",
      "mergedBy": "janaiyengar",
      "mergeCommit": {
        "oid": "02ca7c4b6eb6ca28b356bd72ac347d4020a3f68e"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs4udZ0m",
          "commit": {
            "abbreviatedOid": "ce24e45"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "Some small suggestions, but looking good.\r\n\r\nThanks for writing this up, it's very helpful!",
          "createdAt": "2021-10-14T08:27:26Z",
          "updatedAt": "2021-10-14T08:28:45Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "This is a MUST in RFC9000, so I made a suggestion.\r\nhttps://datatracker.ietf.org/doc/html/rfc9000#section-9.4\r\n\r\n```suggestion\r\nafter migration.  The congestion controller and rtt estimator are reset upon migration ({{Section 9.4 of QUIC-TRANSPORT}}), which may lead to\r\n```",
              "createdAt": "2021-10-14T08:27:26Z",
              "updatedAt": "2021-10-14T08:28:27Z"
            },
            {
              "originalPosition": 14,
              "body": "```suggestion\r\nundesirable performance if the acknowledgement behavior isn't updated\r\n```",
              "createdAt": "2021-10-14T08:27:47Z",
              "updatedAt": "2021-10-14T08:28:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs4ugJtD",
          "commit": {
            "abbreviatedOid": "53f95ed"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-14T19:45:36Z",
          "updatedAt": "2021-10-14T19:45:36Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "```suggestion\r\nafter migration.  Once the congestion controller and rtt estimator are reset upon migration ({{Section 9.4 of QUIC-TRANSPORT}}), an updated ACK_FREQUENCY frame SHOULD be sent to reflect the new rtt and congestion control parameters.\r\n```",
              "createdAt": "2021-10-14T19:45:36Z",
              "updatedAt": "2021-10-14T19:45:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs4ugGlj",
          "commit": {
            "abbreviatedOid": "ce24e45"
          },
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "Thanks @rpaulo -- a few suggestions, but thanks for the PR!",
          "createdAt": "2021-10-14T19:30:23Z",
          "updatedAt": "2021-10-14T20:05:26Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\nTo avoid additional delays to connection migration confirmation when using this extension,\r\n```",
              "createdAt": "2021-10-14T19:30:24Z",
              "updatedAt": "2021-10-14T20:05:26Z"
            },
            {
              "originalPosition": 7,
              "body": "```suggestion\r\nframe ({{Section 9.2 of QUIC-TRANSPORT}}) it sends or it can\r\n```",
              "createdAt": "2021-10-14T19:33:24Z",
              "updatedAt": "2021-10-14T20:05:26Z"
            },
            {
              "originalPosition": 12,
              "body": "```suggestion\r\nAn endpoint's congestion controller and RTT estimator are reset upon\r\nconfirmation of migration ({{Section 9.4 of QUIC-TRANSPORT}}), which can have\r\nadverse impact on the number of acknowledgements received after migration. An\r\nendpoint that has sent an ACK_FREQUENCY frame earlier in the connection SHOULD\r\nupdate and send a new ACK_FREQUENCY frame immediately upon confirmation of\r\nconnection migration.\r\n```",
              "createdAt": "2021-10-14T19:57:57Z",
              "updatedAt": "2021-10-14T20:05:26Z"
            },
            {
              "originalPosition": 19,
              "body": "```suggestion\r\nA sender might use timers to detect loss of PMTUD probe packets. A sender\r\nSHOULD bundle an IMMEDIATE_ACK frame with any PTMUD probes to avoid triggering\r\nsuch timers.\r\n```",
              "createdAt": "2021-10-14T20:04:25Z",
              "updatedAt": "2021-10-14T20:05:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs4ugXod",
          "commit": {
            "abbreviatedOid": "4425bdd"
          },
          "author": "rpaulo",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-14T20:52:16Z",
          "updatedAt": "2021-10-14T20:52:16Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "\"clients .... they send or they\"\r\n\"a client ... it sends or it can\"\r\n\r\nPick one ;-) ",
              "createdAt": "2021-10-14T20:52:16Z",
              "updatedAt": "2021-10-14T20:52:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs4ugX0A",
          "commit": {
            "abbreviatedOid": "4425bdd"
          },
          "author": "rpaulo",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-14T20:53:10Z",
          "updatedAt": "2021-10-14T20:53:10Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "This looks good to me.  Since this changes text that @ianswett wrote, I'll let him commit the suggestion.",
              "createdAt": "2021-10-14T20:53:10Z",
              "updatedAt": "2021-10-14T20:53:10Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs4ugYLZ",
          "commit": {
            "abbreviatedOid": "4425bdd"
          },
          "author": "rpaulo",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-14T20:54:56Z",
          "updatedAt": "2021-10-14T20:54:56Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "What I wanted to say is that it's not impossible to come up with an implementation for PMTUD that takes into account the last acknowledged ACK_FREQUENCY and still works correctly, but implementers must tread carefully.  I agree that we should change the latest sentence to a SHOULD.",
              "createdAt": "2021-10-14T20:54:56Z",
              "updatedAt": "2021-10-14T20:54:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs4uiAyR",
          "commit": {
            "abbreviatedOid": "318fa35"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-15T09:57:11Z",
          "updatedAt": "2021-10-15T09:57:11Z",
          "comments": []
        },
        {
          "id": "PRR_kwDODddxTs4ulEkM",
          "commit": {
            "abbreviatedOid": "d9223ac"
          },
          "author": "gorryfair",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "These changes both look good to me.",
          "createdAt": "2021-10-17T16:51:01Z",
          "updatedAt": "2021-10-17T16:51:01Z",
          "comments": []
        },
        {
          "id": "PRR_kwDODddxTs4u1GXF",
          "commit": {
            "abbreviatedOid": "d9223ac"
          },
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-21T13:09:41Z",
          "updatedAt": "2021-10-21T13:10:39Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\nextension, a client can bundle an IMMEDIATE_ACK frame with the first non-probing\r\n```",
              "createdAt": "2021-10-21T13:09:41Z",
              "updatedAt": "2021-10-21T13:10:39Z"
            },
            {
              "originalPosition": 12,
              "body": "```suggestion\r\nconfirmation of migration ({{Section 9.4 of QUIC-TRANSPORT}}), which can\r\nimpact the number of acknowledgements received after migration. An\r\n```",
              "createdAt": "2021-10-21T13:10:13Z",
              "updatedAt": "2021-10-21T13:10:39Z"
            }
          ]
        }
      ]
    },
    {
      "number": 97,
      "id": "PR_kwDODddxTs4tfxzI",
      "title": "Clarify the purpose of min_ack_delay",
      "url": "https://github.com/quicwg/ack-frequency/pull/97",
      "state": "MERGED",
      "author": "ianswett",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "Fixes #80",
      "createdAt": "2021-10-21T13:55:07Z",
      "updatedAt": "2025-02-06T13:22:11Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "08774467b07c40690921bcbef1b00715b8247383",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "ianswett-min-ack-delay",
      "headRefOid": "c13100f17f64cf27d53e48ccef19769e02e74c91",
      "closedAt": "2021-10-21T14:01:23Z",
      "mergedAt": "2021-10-21T14:01:23Z",
      "mergedBy": "janaiyengar",
      "mergeCommit": {
        "oid": "3890d4416135c21d1ec46b1fca2b91078b5bbc46"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 98,
      "id": "PR_kwDODddxTs4tfyGo",
      "title": "Remove MUST for non-conforming implementations",
      "url": "https://github.com/quicwg/ack-frequency/pull/98",
      "state": "MERGED",
      "author": "janaiyengar",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "design"
      ],
      "body": "Closes #89.",
      "createdAt": "2021-10-21T13:56:21Z",
      "updatedAt": "2025-02-06T13:22:12Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "3c31c3043afc5172bc0bd39e89e2d7c2c6017af0",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "jri/lt64",
      "headRefOid": "9f536ae149c43062094765b943e8225070fee661",
      "closedAt": "2021-10-25T11:12:49Z",
      "mergedAt": "2021-10-25T11:12:49Z",
      "mergedBy": "janaiyengar",
      "mergeCommit": {
        "oid": "0df1498cec0db49858234603792b3635268e44b8"
      },
      "comments": [
        {
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "body": "@nibanks -- thoughts?",
          "createdAt": "2021-10-24T09:17:14Z",
          "updatedAt": "2021-10-24T09:17:14Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs4u1cRb",
          "commit": {
            "abbreviatedOid": "0808949"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-21T14:13:44Z",
          "updatedAt": "2021-10-21T14:13:44Z",
          "comments": []
        },
        {
          "id": "PRR_kwDODddxTs4u14D7",
          "commit": {
            "abbreviatedOid": "0808949"
          },
          "author": "martinthomson",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "Silence is golden.",
          "createdAt": "2021-10-21T15:37:28Z",
          "updatedAt": "2021-10-21T15:37:47Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "```suggestion\r\n  an immediate acknowledgement.\r\n```",
              "createdAt": "2021-10-21T15:37:29Z",
              "updatedAt": "2021-10-21T15:37:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs4u2Fsu",
          "commit": {
            "abbreviatedOid": "0808949"
          },
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-21T16:24:18Z",
          "updatedAt": "2021-10-21T16:24:18Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "@martinthomson -- there's at least one implementation that is doing this, and having a recommendation here seems reasonable.",
              "createdAt": "2021-10-21T16:24:18Z",
              "updatedAt": "2021-10-21T16:24:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs4u3iC0",
          "commit": {
            "abbreviatedOid": "0808949"
          },
          "author": "martinthomson",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-22T00:32:04Z",
          "updatedAt": "2021-10-22T00:32:04Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "I don't agree.  This is a pointless optimization (7 bytes at best, and possibly less in practice).  It might be safe to do this, it might even be a good idea, but unless you have a better reason, I would prefer not to formally condone this.",
              "createdAt": "2021-10-22T00:32:04Z",
              "updatedAt": "2021-10-22T00:32:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs4u3n29",
          "commit": {
            "abbreviatedOid": "0808949"
          },
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-22T01:15:23Z",
          "updatedAt": "2021-10-22T01:15:24Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "Yeah I think what we might want to say is that receivers MAY send acks more frequently than what is indicated by the sender, rather than stating one way of _how_ that can happen.",
              "createdAt": "2021-10-22T01:15:23Z",
              "updatedAt": "2021-10-22T01:15:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs4u8GLI",
          "commit": {
            "abbreviatedOid": "0808949"
          },
          "author": "nibanks",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-24T12:22:02Z",
          "updatedAt": "2021-10-24T12:22:02Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "I'm fine with phrasing this that peers might acknowledge earlier.",
              "createdAt": "2021-10-24T12:22:02Z",
              "updatedAt": "2021-10-24T12:22:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs4u8MWW",
          "commit": {
            "abbreviatedOid": "2ec13f0"
          },
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "Ok, I've reworded to simply say that a receiver can ack earlier. PTAL @martinthomson @nibanks @kazuho @ianswett ",
          "createdAt": "2021-10-24T16:34:07Z",
          "updatedAt": "2021-10-24T16:34:07Z",
          "comments": []
        },
        {
          "id": "PRR_kwDODddxTs4u8MYf",
          "commit": {
            "abbreviatedOid": "2ec13f0"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "Good direction, but some small suggestions.",
          "createdAt": "2021-10-24T16:35:51Z",
          "updatedAt": "2021-10-24T16:36:37Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "Q: Why did you change this sentence?  I actually preferred the old text \"An immediate acknowledgement ...\"",
              "createdAt": "2021-10-24T16:35:51Z",
              "updatedAt": "2021-10-24T16:36:37Z"
            },
            {
              "originalPosition": 12,
              "body": "```suggestion\r\n  a receiver immediately acknowledging every ack-eliciting packet.\r\n```",
              "createdAt": "2021-10-24T16:36:24Z",
              "updatedAt": "2021-10-24T16:36:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs4u8NCZ",
          "commit": {
            "abbreviatedOid": "100dc87"
          },
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-24T17:08:28Z",
          "updatedAt": "2021-10-24T17:09:33Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "I've changed two things:\r\n- the first part of the original sentence applies broadly, not just the case of 0, and it is a restating of the first sentence in this para, and I've made that explicit,\r\n- when an endpoint sends an ack, it sends an ack, not an \"immediate ack\". In this context, \"immediate\" is not required, since we are talking about the endpoint doing something (sending an ack) on an event (threshold is exceeded).",
              "createdAt": "2021-10-24T17:08:28Z",
              "updatedAt": "2021-10-24T17:09:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs4u8QAz",
          "commit": {
            "abbreviatedOid": "9f536ae"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-24T19:37:25Z",
          "updatedAt": "2021-10-24T19:37:25Z",
          "comments": []
        },
        {
          "id": "PRR_kwDODddxTs4u8RL6",
          "commit": {
            "abbreviatedOid": "9f536ae"
          },
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-24T20:39:38Z",
          "updatedAt": "2021-10-24T20:39:38Z",
          "comments": []
        },
        {
          "id": "PRR_kwDODddxTs4u8TJ0",
          "commit": {
            "abbreviatedOid": "9f536ae"
          },
          "author": "martinthomson",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "WFM",
          "createdAt": "2021-10-24T22:17:33Z",
          "updatedAt": "2021-10-24T22:17:33Z",
          "comments": []
        },
        {
          "id": "PRR_kwDODddxTs4u8VVw",
          "commit": {
            "abbreviatedOid": "9f536ae"
          },
          "author": "nibanks",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-24T23:42:21Z",
          "updatedAt": "2021-10-24T23:42:21Z",
          "comments": []
        }
      ]
    },
    {
      "number": 99,
      "id": "PR_kwDODddxTs4tin4D",
      "title": "Replace reordering with out of order",
      "url": "https://github.com/quicwg/ack-frequency/pull/99",
      "state": "MERGED",
      "author": "ianswett",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "Fixes #62\r\n\r\n@gloinul tell me if this is sufficient, or if you wanted more references to RFC9000.",
      "createdAt": "2021-10-22T10:07:36Z",
      "updatedAt": "2025-02-06T13:22:12Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "3890d4416135c21d1ec46b1fca2b91078b5bbc46",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "ianswett-out-of-order",
      "headRefOid": "4ce6425837758632fadd46d852adb3cc8c575732",
      "closedAt": "2021-10-24T09:17:33Z",
      "mergedAt": "2021-10-24T09:17:32Z",
      "mergedBy": "janaiyengar",
      "mergeCommit": {
        "oid": "3c31c3043afc5172bc0bd39e89e2d7c2c6017af0"
      },
      "comments": [
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks, I'm open to other suggestions if you have them, but nothing else stuck out at me.  I'm reluctant to repeat the full definition of out of order in this document, given it's well defined in RFC9000.",
          "createdAt": "2021-10-22T13:01:33Z",
          "updatedAt": "2021-10-22T13:01:33Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs4u5csL",
          "commit": {
            "abbreviatedOid": "2165224"
          },
          "author": "gloinul",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "Ok, I think this is truly the bare minimal to resolve my issue. There exist a clearer chain back towards Section 13.2.1 in RFC9000 and I guess that is sufficient. ",
          "createdAt": "2021-10-22T12:56:26Z",
          "updatedAt": "2021-10-22T12:56:26Z",
          "comments": []
        },
        {
          "id": "PRR_kwDODddxTs4u8Bow",
          "commit": {
            "abbreviatedOid": "2165224"
          },
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "A couple of minor edits, but lgtm",
          "createdAt": "2021-10-24T09:06:47Z",
          "updatedAt": "2021-10-24T09:14:58Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "```suggestion\r\npacket, and for every packet that is received out of order (Section\r\n13.2.1 of {{QUIC-TRANSPORT}}). This\r\n```",
              "createdAt": "2021-10-24T09:06:48Z",
              "updatedAt": "2021-10-24T09:14:58Z"
            },
            {
              "originalPosition": 19,
              "body": "```suggestion\r\n  acknowledgement when the peer receives a packet out of order\r\n```",
              "createdAt": "2021-10-24T09:07:03Z",
              "updatedAt": "2021-10-24T09:14:58Z"
            },
            {
              "originalPosition": 45,
              "body": "```suggestion\r\n## Response to Out-of-Order Packets {#out-of-order}\r\n```",
              "createdAt": "2021-10-24T09:07:28Z",
              "updatedAt": "2021-10-24T09:14:58Z"
            }
          ]
        }
      ]
    },
    {
      "number": 100,
      "id": "PR_kwDODddxTs4tislH",
      "title": "Change 'Ignore Order' to 'Reordering Threshold'",
      "url": "https://github.com/quicwg/ack-frequency/pull/100",
      "state": "MERGED",
      "author": "ianswett",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #96 ",
      "createdAt": "2021-10-22T10:32:49Z",
      "updatedAt": "2025-02-06T13:19:41Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "547716fbe31a870f267f89adc1c6d4d033942024",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "ianswett-reordering-threshold",
      "headRefOid": "26df5c7587442bf3332d02749cb094660c474aef",
      "closedAt": "2023-01-24T17:29:00Z",
      "mergedAt": "2023-01-24T17:29:00Z",
      "mergedBy": "ianswett",
      "mergeCommit": {
        "oid": "b880187906d68d03734554128844312ed788443c"
      },
      "comments": [
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "I don't have a strong opinion on a varint vs 7 bits.  I suspect 7 bits is more than enough, but I could go either way.",
          "createdAt": "2021-10-24T19:40:58Z",
          "updatedAt": "2021-10-24T19:40:58Z"
        },
        {
          "author": "gorryfair",
          "authorAssociation": "CONTRIBUTOR",
          "body": "A requirement to send one ACK for at least every hundred data packets (or so) seems to have little impact on the processing cost nor capacity of the flow. I'd be concerned if any receiver did not do this. So, I still 7b think this actually is reasonable size.",
          "createdAt": "2022-07-08T07:10:04Z",
          "updatedAt": "2022-07-08T07:10:04Z"
        },
        {
          "author": "nibanks",
          "authorAssociation": "MEMBER",
          "body": "> A requirement to send one ACK for at least every hundred data packets (or so) seems to have little impact on the processing cost nor capacity of the flow. I'd be concerned if any receiver did not do this. So, I still 7b think this actually is reasonable size.\r\n\r\nI'm not so sure. MsQuic tunes this up to pretty large values for extremely high throughput, low loss scenarios. I'd rather not restrict things unnecessarily, unless you have a clear reason why we must not use a value so high?",
          "createdAt": "2022-07-08T12:58:20Z",
          "updatedAt": "2022-07-08T12:58:20Z"
        },
        {
          "author": "jbeshay",
          "authorAssociation": "NONE",
          "body": "On varint vs. 7-bit, it may be worth using a varint just for consistency and maybe to maintain the ability to completely ignore reordering by just setting a very high number. ",
          "createdAt": "2022-08-11T21:35:00Z",
          "updatedAt": "2022-08-11T21:35:00Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "There's still more work to do on this section, but in the interest of making the change, we're going to merge this and fix it later.",
          "createdAt": "2023-01-24T17:28:51Z",
          "updatedAt": "2023-01-24T17:28:51Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs4u7w_H",
          "commit": {
            "abbreviatedOid": "15c74bd"
          },
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "Thank you for working on this. Looks good.\r\n\r\n* I was a bit surprised to see Reordering Threshold being represented as a 7-bit value. I was expecting an ordinary \"(i)\" value. Though that's a matter of taste. I agree that having 7 bits would be more than enough.\r\n* There's one more mention of \"Ignore Order\" left at the end of the \"Computation of Probe Timeout Period\" section.",
          "createdAt": "2021-10-23T19:36:40Z",
          "updatedAt": "2021-10-23T19:43:59Z",
          "comments": [
            {
              "originalPosition": 33,
              "body": "Maybe revert this change? This sentence is talking about Ignore CE.\r\n\r\nI think you might have edited the wrong place and forgot to revert.",
              "createdAt": "2021-10-23T19:36:40Z",
              "updatedAt": "2021-10-23T19:43:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs4u8QEF",
          "commit": {
            "abbreviatedOid": "96738d2"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-24T19:40:27Z",
          "updatedAt": "2021-10-24T19:40:28Z",
          "comments": [
            {
              "originalPosition": 33,
              "body": "Good catch, reverted.",
              "createdAt": "2021-10-24T19:40:27Z",
              "updatedAt": "2021-10-24T19:40:28Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs4u8RKT",
          "commit": {
            "abbreviatedOid": "4fe56e9"
          },
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-24T20:37:53Z",
          "updatedAt": "2021-10-24T20:37:53Z",
          "comments": []
        },
        {
          "id": "PRR_kwDODddxTs4u8VZB",
          "commit": {
            "abbreviatedOid": "4fe56e9"
          },
          "author": "nibanks",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-24T23:44:22Z",
          "updatedAt": "2021-10-24T23:44:22Z",
          "comments": []
        },
        {
          "id": "PRR_kwDODddxTs49i43K",
          "commit": {
            "abbreviatedOid": "4fe56e9"
          },
          "author": "gloinul",
          "authorAssociation": "NONE",
          "state": "CHANGES_REQUESTED",
          "body": "I think some wording clarifications would improve the text. ",
          "createdAt": "2022-07-08T08:12:51Z",
          "updatedAt": "2022-07-08T08:24:37Z",
          "comments": [
            {
              "originalPosition": 69,
              "body": "I would recommend splitting this sentence, the bolting on of the \"an additional ...\" makes it hard to interpret. If I understand this correctly the main part of the sentence is to send an immediate ack when reordering of the threshold value or greater has been detected. The second part is more a clarification that even if a reordering immediate ack has been sent if a lost packet detected event occurs for the same packet then an another immediate ack would be sent. I think that might be clear to reformulate it.\r\n\r\nIn addition what conditions makes a receiver upgrade a reorder threshold exceeded to lost detected, isn't this the same? I thought in reality the only thing that can occur is that a reorder can go from packet missing (due to reorder) to acknowledged. If it is lost it will never show up and the gap persists.\r\n",
              "createdAt": "2022-07-08T08:12:51Z",
              "updatedAt": "2022-07-08T08:24:37Z"
            },
            {
              "originalPosition": 78,
              "body": "It took me several reads to understand what this was actually saying. I think an \", i.e. gap that are beyond the reordering threshold from latest received but not reported on in last ACK, then send an immediate ACK.\"\r\n\r\nSo If I understand this correctly, the receiver will re-iterate on gaps that are beyond threshold and thus considered lost as soon as they fall outside of the threshold. Thus a sender will not receive an immediate ack when things are actually just re-ordered and arrive to fill the gap as long as that happens within the threshold.  ",
              "createdAt": "2022-07-08T08:24:13Z",
              "updatedAt": "2022-07-08T08:24:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs4-wIPu",
          "commit": {
            "abbreviatedOid": "4fe56e9"
          },
          "author": "gorryfair",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-27T16:30:00Z",
          "updatedAt": "2022-07-27T16:33:28Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "In reordering threshold: /how/ or /how many/ or something else?",
              "createdAt": "2022-07-27T16:30:00Z",
              "updatedAt": "2022-07-27T16:33:28Z"
            },
            {
              "originalPosition": 71,
              "body": "Unsure what is intended by /time threshold loss detection/ refers to? --is this about the time taken for a sender to detect loss?",
              "createdAt": "2022-07-27T16:32:03Z",
              "updatedAt": "2022-07-27T16:33:28Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs4_D2Ib",
          "commit": {
            "abbreviatedOid": "4fe56e9"
          },
          "author": "martinthomson",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "This really, really needs a picture or some examples.",
          "createdAt": "2022-08-01T23:59:36Z",
          "updatedAt": "2022-08-02T00:24:14Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "This needs to be rebased.  I assume that you will go with (i) rather than (7) now.",
              "createdAt": "2022-08-01T23:59:36Z",
              "updatedAt": "2022-08-02T00:24:14Z"
            },
            {
              "originalPosition": 75,
              "body": "```suggestion\r\nvalue (i.e., `largest_acknowledged_sent`).  When a new packet is received in order,\r\n```",
              "createdAt": "2022-08-02T00:01:27Z",
              "updatedAt": "2022-08-02T00:24:14Z"
            },
            {
              "originalPosition": 78,
              "body": "I don't understand this as presented either.  Magnus' description fits better, maybe.\r\n\r\nThat would mean you are referring to the range from the Largest Acknowledged (i.e., the largest value in an ACK frame that has been sent) - Reordering Threshold to the Largest Received (i.e., the largest value in a packet that has been received) - Reordering Threshold.  That is [LA-RT, LR-RT].\r\n\r\nI don't understand why you would look for gaps *before* the Largest Acknowledged here though.  Let's say the threshold is 2.  You receive packet 5 without getting packet 4.  That's a gap that would ordinarily elicit an immediate ACK.  But here you don't because it is newer than the 5-2=3 cutoff.  Then you wait for the time to pass and send an ACK.  Later, you receive packet 6, at which point your [LA-RT, LR-RT] range is [5-2=3, 6-2=4].  Presumably that includes packet 4[^1] so you send an immediate ACK.\r\n\r\nThat seems a bit pointless because you already informed the sender about that gap.  But maybe the sender logic won't detect loss until there are enough packets acknowledged beyond the gap, so this is useful.\r\n\r\nYou might instead want a range of [LA, LR-RT].  In that example, you would send an ACK on delay after packet 5 is received, meaning that the peer knows about the missing packet 4.  Later, when you receive 6, you don't send any more immediate ACKs.\r\n\r\nThe effect of either is that RT=1 has identical handling to RT=0.\r\n\r\n[^1]: I don't know if you intentionally didn't say \"inclusive\", but I'm assuming that is why you are using brackets and not parentheses.  Please try to be explicit.",
              "createdAt": "2022-08-02T00:23:54Z",
              "updatedAt": "2022-08-02T00:24:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5Kvk1T",
          "commit": {
            "abbreviatedOid": "d1fc6af"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-18T17:22:56Z",
          "updatedAt": "2023-01-18T17:22:57Z",
          "comments": [
            {
              "originalPosition": 30,
              "body": "```suggestion\r\n: A variable-length integer representing an unsigned integer that indicates how\r\n  many out of order packets can arrive before eliciting an immediate ACK. If no\r\n```",
              "createdAt": "2023-01-18T17:22:57Z",
              "updatedAt": "2023-01-18T17:22:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5Kvm-8",
          "commit": {
            "abbreviatedOid": "d1fc6af"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-18T17:28:50Z",
          "updatedAt": "2023-01-18T17:28:50Z",
          "comments": [
            {
              "originalPosition": 46,
              "body": "I don't think this sentence is correct anymore. You only should ack if you received more than X packet out of order. given the default value is 3, I guess you have to immediately send an ack if the new value is 1 or 2 and you have re-order packets that have not be ack'ed yet... not sure how to parse that easily.",
              "createdAt": "2023-01-18T17:28:50Z",
              "updatedAt": "2023-01-18T17:28:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5KvrRm",
          "commit": {
            "abbreviatedOid": "d1fc6af"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-18T17:41:10Z",
          "updatedAt": "2023-01-18T17:41:10Z",
          "comments": [
            {
              "originalPosition": 69,
              "body": "Yes, there is not really any loss detection as the receiver side. The only question is when to send an ack. There are two cases: the normal delayed-ack timer or the re-ordering threshold.",
              "createdAt": "2023-01-18T17:41:10Z",
              "updatedAt": "2023-01-18T17:41:10Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5Kvu14",
          "commit": {
            "abbreviatedOid": "d1fc6af"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-18T17:50:16Z",
          "updatedAt": "2023-01-18T17:50:17Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "```suggestion\r\n\r\n```\r\nRemove white space to get it build",
              "createdAt": "2023-01-18T17:50:17Z",
              "updatedAt": "2023-01-18T17:50:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5LKUlv",
          "commit": {
            "abbreviatedOid": "d1fc6af"
          },
          "author": "martinthomson",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-19T01:08:59Z",
          "updatedAt": "2023-01-19T01:09:00Z",
          "comments": [
            {
              "originalPosition": 30,
              "body": "Do we need \"A variable-length integer representing an unsigned integer\" or can we just rely on the fact that variable-length integers are always unsigned and say:\r\n\r\n```suggestion\r\n: A variable-length integer that indicates how many\r\n  out of order packets can arrive before eliciting an immediate ACK. If no\r\n```",
              "createdAt": "2023-01-19T01:08:59Z",
              "updatedAt": "2023-01-19T01:09:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5Lco8P",
          "commit": {
            "abbreviatedOid": "880433a"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-23T15:21:08Z",
          "updatedAt": "2023-01-23T15:21:09Z",
          "comments": [
            {
              "originalPosition": 78,
              "body": "I think this mixes two different mechanism here. The Ack-Eliciting Threshold may trigger an ack independent of the Reordering threshold. For the reordering threshold the only thing that is relevant is the number of packets received after the re-ordering/packet number gap was detected.\r\n\r\nThat means you have to have an internal flags that indicates that a gap was detected and count the number of packet received since. If during this time either the missing packet is received or an ACK is sent due to any other condition, the flag and counter get reset. If the counter becomes larger than the reordering threshold you send an Ack and also reset the flag and counter.",
              "createdAt": "2023-01-23T15:21:08Z",
              "updatedAt": "2023-01-23T15:21:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5Lcss2",
          "commit": {
            "abbreviatedOid": "880433a"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-23T15:28:59Z",
          "updatedAt": "2023-01-23T15:29:00Z",
          "comments": [
            {
              "originalPosition": 40,
              "body": "```suggestion\r\nIf an endpoint has not yet received an ACK_FREQUENCY frame,\r\nthe endpoint immediately acknowledges any subsequent packets that\r\nare received out of order, as specified in {{Section 13.2 of QUIC-TRANSPORT}}.\r\n```",
              "createdAt": "2023-01-23T15:29:00Z",
              "updatedAt": "2023-01-23T15:29:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5Lcunu",
          "commit": {
            "abbreviatedOid": "880433a"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-23T15:33:08Z",
          "updatedAt": "2023-01-23T15:33:09Z",
          "comments": [
            {
              "originalPosition": 69,
              "body": "```suggestion\r\n```\r\nI propose to remove this text for now, merge this PR, and then see if we need an additional PR to clarify implementation.",
              "createdAt": "2023-01-23T15:33:09Z",
              "updatedAt": "2023-01-23T15:33:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5LhwpN",
          "commit": {
            "abbreviatedOid": "880433a"
          },
          "author": "gorryfair",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "This has many improvements, but also many changes. I agree it would be useful to review comments and submit a PR and then ask for further review.",
          "createdAt": "2023-01-24T09:41:35Z",
          "updatedAt": "2023-01-24T09:44:35Z",
          "comments": [
            {
              "originalPosition": 45,
              "body": "Sentence is wobbly, suggest more like:\r\n/An endpoint that receives an ACK_FREQUENCY frame with a `Reordering Threshold` value other than 0x00, MUST immediately send an ACK frame when the number of outstanding unacknowledged packets since the last detected reordering event exceeds the `Reordering Threshold`./\r\n",
              "createdAt": "2023-01-24T09:41:35Z",
              "updatedAt": "2023-01-24T09:44:36Z"
            },
            {
              "originalPosition": 71,
              "body": "Suggest: /This can reduce the time to detect loss and therefore improve the performance of loss recovery./",
              "createdAt": "2023-01-24T09:43:15Z",
              "updatedAt": "2023-01-24T09:44:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5LiFDv",
          "commit": {
            "abbreviatedOid": "880433a"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-24T10:34:24Z",
          "updatedAt": "2023-01-24T10:34:25Z",
          "comments": [
            {
              "originalPosition": 45,
              "body": "```suggestion\r\nAn endpoint, that receives an ACK_FREQUENCY frame with a Reordering\r\nThreshold value other than 0x00, MUST immediately send an ACK frame\r\nwhen the packet number of largest unacknowledged packet since\r\nthe last detected reordering event exceeds the Reordering Threshold.\r\n```",
              "createdAt": "2023-01-24T10:34:25Z",
              "updatedAt": "2023-01-24T17:23:48Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5LiFTn",
          "commit": {
            "abbreviatedOid": "880433a"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-24T10:35:06Z",
          "updatedAt": "2023-01-24T10:35:06Z",
          "comments": [
            {
              "originalPosition": 45,
              "body": "Btw. we might maybe want to discuss if this is really a MUST or just a SHOULD because it's at the end just a request that can't be enforced by the requester.",
              "createdAt": "2023-01-24T10:35:06Z",
              "updatedAt": "2023-01-24T10:35:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5LiFmq",
          "commit": {
            "abbreviatedOid": "880433a"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-24T10:35:54Z",
          "updatedAt": "2023-01-24T10:35:54Z",
          "comments": [
            {
              "originalPosition": 61,
              "body": "```suggestion\r\nlost. This can reduce the time to detect loss and therefore improve the performance of loss\r\n```",
              "createdAt": "2023-01-24T10:35:54Z",
              "updatedAt": "2023-01-24T10:36:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5LiLfF",
          "commit": {
            "abbreviatedOid": "880433a"
          },
          "author": "gorryfair",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-24T10:52:17Z",
          "updatedAt": "2023-01-24T10:52:18Z",
          "comments": [
            {
              "originalPosition": 45,
              "body": "I still think MUST, it's important for proper expected functioning. The word \"immediately\" appears in several IETF specs, and the sentiment is also that this needs to be done as soon as practically. The real sentiment is that this MUST NOT delay transmission of the response to the request.",
              "createdAt": "2023-01-24T10:52:18Z",
              "updatedAt": "2023-01-24T10:52:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5Lk0CT",
          "commit": {
            "abbreviatedOid": "02eb141"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-24T17:26:39Z",
          "updatedAt": "2023-01-24T17:26:40Z",
          "comments": [
            {
              "originalPosition": 75,
              "body": "```suggestion\r\n```",
              "createdAt": "2023-01-24T17:26:40Z",
              "updatedAt": "2023-01-24T17:26:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5Lk0bR",
          "commit": {
            "abbreviatedOid": "2df0c4c"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-24T17:27:40Z",
          "updatedAt": "2023-01-24T17:27:41Z",
          "comments": [
            {
              "originalPosition": 62,
              "body": "```suggestion\r\n```",
              "createdAt": "2023-01-24T17:27:41Z",
              "updatedAt": "2023-01-24T17:27:41Z"
            }
          ]
        }
      ]
    },
    {
      "number": 101,
      "id": "PR_kwDODddxTs4tlvgY",
      "title": "Consolidate congestion and timer requirements of ack frequency",
      "url": "https://github.com/quicwg/ack-frequency/pull/101",
      "state": "MERGED",
      "author": "janaiyengar",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Closes #72.\r\nCloses #73.\r\nCloses #74.\r\nCloses #75.\r\nCloses #93.",
      "createdAt": "2021-10-24T12:57:55Z",
      "updatedAt": "2025-02-06T13:21:03Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "6117149d0d40634b1207a02afb8992d1e2b3ef0f",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "jri/recommend",
      "headRefOid": "871fe58bfe86926f7d6121b0b28509b803594cbf",
      "closedAt": "2021-10-25T17:40:56Z",
      "mergedAt": "2021-10-25T17:40:55Z",
      "mergedBy": "janaiyengar",
      "mergeCommit": {
        "oid": "97d66995edc9ce0109326ad22645e691eabef0f3"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs4u8HVr",
          "commit": {
            "abbreviatedOid": "17aa863"
          },
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-24T13:07:49Z",
          "updatedAt": "2021-10-24T13:07:50Z",
          "comments": [
            {
              "originalPosition": 136,
              "body": "This is just a reflow.",
              "createdAt": "2021-10-24T13:07:50Z",
              "updatedAt": "2021-10-24T13:07:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs4u8OxM",
          "commit": {
            "abbreviatedOid": "17aa863"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-24T18:33:58Z",
          "updatedAt": "2021-10-24T18:39:56Z",
          "comments": [
            {
              "originalPosition": 51,
              "body": "bounds?  Maybe guidance?  There aren't any MUSTs below.",
              "createdAt": "2021-10-24T18:33:58Z",
              "updatedAt": "2021-10-24T18:39:56Z"
            },
            {
              "originalPosition": 59,
              "body": "```suggestion\r\n{{QUIC-RECOVERY}}, rely on receipt of acknowledgments to send additional data into\r\n```",
              "createdAt": "2021-10-24T18:34:35Z",
              "updatedAt": "2021-10-24T18:39:56Z"
            },
            {
              "originalPosition": 64,
              "body": "nit: This is only when there are bytes in flight.  It's not once per RTT regardless of what's being sent.",
              "createdAt": "2021-10-24T18:35:19Z",
              "updatedAt": "2021-10-24T18:39:56Z"
            },
            {
              "originalPosition": 74,
              "body": "Increase from every 2 packets?",
              "createdAt": "2021-10-24T18:36:16Z",
              "updatedAt": "2021-10-24T18:39:56Z"
            },
            {
              "originalPosition": 78,
              "body": "```suggestion\r\nReceiving an acknowledgement an allow a sender to release new packets into\r\n```",
              "createdAt": "2021-10-24T18:36:39Z",
              "updatedAt": "2021-10-24T18:39:56Z"
            },
            {
              "originalPosition": 81,
              "body": "I'm not sure we need a new MUST here, can we just cite the existing MUST in recovery?\r\n```suggestion\r\nbursts of data into the network. A sender needs limit such bursts to the initial congestion window at most In keeping\r\n```",
              "createdAt": "2021-10-24T18:38:06Z",
              "updatedAt": "2021-10-24T18:39:56Z"
            },
            {
              "originalPosition": 88,
              "body": "```suggestion\r\nAcknowledgements are fundamental to reliability in QUIC. Consequently,\r\n```",
              "createdAt": "2021-10-24T18:38:19Z",
              "updatedAt": "2021-10-24T18:39:56Z"
            },
            {
              "originalPosition": 104,
              "body": "You say this above on line 412",
              "createdAt": "2021-10-24T18:39:25Z",
              "updatedAt": "2021-10-24T18:39:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs4u9qsN",
          "commit": {
            "abbreviatedOid": "17aa863"
          },
          "author": "gorryfair",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-25T10:10:19Z",
          "updatedAt": "2021-10-25T10:10:20Z",
          "comments": [
            {
              "originalPosition": 51,
              "body": "Bounds implies numbers to me, or hard constraints. This is at least guidance.",
              "createdAt": "2021-10-25T10:10:20Z",
              "updatedAt": "2021-10-25T10:10:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs4u9r3O",
          "commit": {
            "abbreviatedOid": "17aa863"
          },
          "author": "gorryfair",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-25T10:15:08Z",
          "updatedAt": "2021-10-25T10:15:08Z",
          "comments": [
            {
              "originalPosition": 74,
              "body": "I'd prefer not to be imply a starting position of 1 ACK to 2 Packets. \r\nI'd like to say *why* to provide robustness to loss of an ACK; to enable more accurate tracking of RTT; or whatever.\r\n\r\nPerhaps for me, it would be nice as an example; \"For example, to send an ACK every packet to increase the robustness to loss of an ACK; to enable more accurate tracking of RTT\" ?",
              "createdAt": "2021-10-25T10:15:08Z",
              "updatedAt": "2021-10-25T10:15:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs4u9r-n",
          "commit": {
            "abbreviatedOid": "17aa863"
          },
          "author": "gorryfair",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-25T10:15:35Z",
          "updatedAt": "2021-10-25T10:15:35Z",
          "comments": [
            {
              "originalPosition": 78,
              "body": "allows a sender?",
              "createdAt": "2021-10-25T10:15:35Z",
              "updatedAt": "2021-10-25T10:15:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs4u9sH3",
          "commit": {
            "abbreviatedOid": "17aa863"
          },
          "author": "gorryfair",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-25T10:16:09Z",
          "updatedAt": "2021-10-25T10:16:09Z",
          "comments": [
            {
              "originalPosition": 81,
              "body": "needs to limit ... with a citation of which section in RFC9000?",
              "createdAt": "2021-10-25T10:16:09Z",
              "updatedAt": "2021-10-25T10:16:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs4u9t6a",
          "commit": {
            "abbreviatedOid": "17aa863"
          },
          "author": "gorryfair",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-25T10:23:37Z",
          "updatedAt": "2021-10-25T10:23:37Z",
          "comments": [
            {
              "originalPosition": 50,
              "body": "I don't agree with this text ((If this were EXP then I'd set different expecatations)). My take is that \"Implementers can select an appropriate strategy to meet the needs of their applications and congestion controllers\". The difference is that I don't think a PS should encourage experimentation on the Internet without defining what is safe ... I'd still hope the experiments take place and innovation occurs, and then expect if this differs to what is said here then proposed changes are reported in ICCRG (for example), and after (maybe) the advice in the PS can be updated.",
              "createdAt": "2021-10-25T10:23:37Z",
              "updatedAt": "2021-10-25T10:23:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs4u95kY",
          "commit": {
            "abbreviatedOid": "17aa863"
          },
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "Feedback incorporated",
          "createdAt": "2021-10-25T11:15:12Z",
          "updatedAt": "2021-10-25T11:29:09Z",
          "comments": [
            {
              "originalPosition": 51,
              "body": "changed to guidance",
              "createdAt": "2021-10-25T11:15:12Z",
              "updatedAt": "2021-10-25T11:29:09Z"
            },
            {
              "originalPosition": 74,
              "body": "I've used @gorryfair 's suggestion.",
              "createdAt": "2021-10-25T11:20:40Z",
              "updatedAt": "2021-10-25T11:29:09Z"
            },
            {
              "originalPosition": 78,
              "body": "using `can allow`",
              "createdAt": "2021-10-25T11:21:42Z",
              "updatedAt": "2021-10-25T11:29:10Z"
            },
            {
              "originalPosition": 81,
              "body": "I think this normative is useful here, since these bursts are more than what 9002 can cause... even if the normative in 9002 changes, this applies independently. At the moment, we are using suggestions from there, but the normative is useful.",
              "createdAt": "2021-10-25T11:24:40Z",
              "updatedAt": "2021-10-25T11:29:10Z"
            },
            {
              "originalPosition": 104,
              "body": "Although the recommendations are the same, these are two recommendations for two different reasons. I tried to structure it so it wouldn't repeat, but it just seemed easier and cleaner to repeat the same recommendation twice. Each section here now has a recommendation.",
              "createdAt": "2021-10-25T11:26:47Z",
              "updatedAt": "2021-10-25T11:29:10Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs4u99Bw",
          "commit": {
            "abbreviatedOid": "c68e715"
          },
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-25T11:31:08Z",
          "updatedAt": "2021-10-25T11:31:08Z",
          "comments": [
            {
              "originalPosition": 50,
              "body": "Fair point -- changed to `can` and flipped the order of the sentences.",
              "createdAt": "2021-10-25T11:31:08Z",
              "updatedAt": "2021-10-25T11:31:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs4u99cr",
          "commit": {
            "abbreviatedOid": "4458a28"
          },
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-25T11:33:02Z",
          "updatedAt": "2021-10-25T11:33:03Z",
          "comments": [
            {
              "originalPosition": 50,
              "body": "Sorry, took your better sentence and flipped the order.",
              "createdAt": "2021-10-25T11:33:03Z",
              "updatedAt": "2021-10-25T11:33:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs4u_diR",
          "commit": {
            "abbreviatedOid": "4458a28"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-25T17:00:19Z",
          "updatedAt": "2021-10-25T17:00:20Z",
          "comments": [
            {
              "originalPosition": 85,
              "body": "```suggestion\r\ninto the network. A sender neeeds to limit such bursts as specified in Section 7.7\r\nof {{QUIC-RECOVERY}}.  A sender can either employ pacing or cause a receiver to\r\n```",
              "createdAt": "2021-10-25T17:00:19Z",
              "updatedAt": "2021-10-25T17:00:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs4u_fHQ",
          "commit": {
            "abbreviatedOid": "4458a28"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-25T17:06:52Z",
          "updatedAt": "2021-10-25T17:06:52Z",
          "comments": []
        }
      ]
    },
    {
      "number": 102,
      "id": "PR_kwDODddxTs4tl5Xi",
      "title": "Rework IMMEDIATE_ACK section a bit",
      "url": "https://github.com/quicwg/ack-frequency/pull/102",
      "state": "MERGED",
      "author": "janaiyengar",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Also,\r\nCloses #70.",
      "createdAt": "2021-10-24T16:55:52Z",
      "updatedAt": "2025-02-06T13:22:13Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "3c31c3043afc5172bc0bd39e89e2d7c2c6017af0",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "jri/immediate",
      "headRefOid": "3debcae98b758df606e5c2be3a1b19af79ffc695",
      "closedAt": "2021-10-25T17:37:45Z",
      "mergedAt": "2021-10-25T17:37:45Z",
      "mergedBy": "janaiyengar",
      "mergeCommit": {
        "oid": "6117149d0d40634b1207a02afb8992d1e2b3ef0f"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs4u8N53",
          "commit": {
            "abbreviatedOid": "c6f3dd0"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-24T17:52:48Z",
          "updatedAt": "2021-10-24T17:52:48Z",
          "comments": []
        },
        {
          "id": "PRR_kwDODddxTs4u8Vc7",
          "commit": {
            "abbreviatedOid": "c6f3dd0"
          },
          "author": "nibanks",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-10-24T23:46:46Z",
          "updatedAt": "2021-10-24T23:46:46Z",
          "comments": []
        },
        {
          "id": "PRR_kwDODddxTs4u9xUN",
          "commit": {
            "abbreviatedOid": "c6f3dd0"
          },
          "author": "gorryfair",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "Seems would benefit from a little polish and some improvement in the examples.",
          "createdAt": "2021-10-25T10:38:14Z",
          "updatedAt": "2021-10-25T10:46:03Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "I think there could be more examples: I'd thought one specific use for this was to make an immediate RTT measurement. \r\n\r\n(Side comment: There could even be some cases where a sender might learn more... I'd also speculated there could be useful info gleaned  from taking several RTT samples in direct succession, whether or not that indeed proves useful is something I have yet to learn.)",
              "createdAt": "2021-10-25T10:38:15Z",
              "updatedAt": "2021-10-25T10:46:03Z"
            },
            {
              "originalPosition": 36,
              "body": "/vast majority/majority/  ? (is majority even the correct word... I'd expect that this really should not be set for even half the packets!)",
              "createdAt": "2021-10-25T10:40:23Z",
              "updatedAt": "2021-10-25T10:46:03Z"
            },
            {
              "originalPosition": 22,
              "body": "/hurt/ reduce... or something?",
              "createdAt": "2021-10-25T10:41:18Z",
              "updatedAt": "2021-10-25T10:46:03Z"
            },
            {
              "originalPosition": 23,
              "body": "I fear this suggests \"immediate\" *IS* always useful, and that doesn't seem true. When we look at this sort of mechanism with SCTP, it actually was not normally useful. However, there were corner-cases when this did add benefit - and I think these were mostly focussed on the end of a tail in transmission when the sender knew there would not be a pause in transmission or no more packets following a previous (set of)  packets. ",
              "createdAt": "2021-10-25T10:45:37Z",
              "updatedAt": "2021-10-25T10:46:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs4u-AIt",
          "commit": {
            "abbreviatedOid": "c6f3dd0"
          },
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-25T11:44:46Z",
          "updatedAt": "2021-10-25T11:44:47Z",
          "comments": [
            {
              "originalPosition": 23,
              "body": "I've added the immediate RTT example and also a quick liveness check example. On your second comment -- this frame is different than SCTP, since the context is different. In the case of this draft, a sender deliberately delays acks for longer, and the IMMEDIATE_ACK is primarily an escape hatch when that increased delay hurts.",
              "createdAt": "2021-10-25T11:44:46Z",
              "updatedAt": "2021-10-25T11:44:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs4u-AVV",
          "commit": {
            "abbreviatedOid": "c6f3dd0"
          },
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2021-10-25T11:45:31Z",
          "updatedAt": "2021-10-25T11:45:31Z",
          "comments": [
            {
              "originalPosition": 36,
              "body": "changed to `large number`",
              "createdAt": "2021-10-25T11:45:31Z",
              "updatedAt": "2021-10-25T11:45:31Z"
            }
          ]
        }
      ]
    },
    {
      "number": 108,
      "id": "PR_kwDODddxTs4uGpjV",
      "title": "Remove simply",
      "url": "https://github.com/quicwg/ack-frequency/pull/108",
      "state": "MERGED",
      "author": "ianswett",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "Fixes #105",
      "createdAt": "2021-11-04T16:38:42Z",
      "updatedAt": "2025-02-06T13:21:04Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "97d66995edc9ce0109326ad22645e691eabef0f3",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "ianswett-simply",
      "headRefOid": "74ceabd5c33280f9d5fc3b66ff291e8a21c62c4f",
      "closedAt": "2021-11-04T17:47:53Z",
      "mergedAt": "2021-11-04T17:47:52Z",
      "mergedBy": "janaiyengar",
      "mergeCommit": {
        "oid": "6508bb9ea950acc92295d9333ac178ec1c0f5874"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs4vkVD0",
          "commit": {
            "abbreviatedOid": "74ceabd"
          },
          "author": "gorryfair",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2021-11-04T17:27:14Z",
          "updatedAt": "2021-11-04T17:27:14Z",
          "comments": []
        }
      ]
    },
    {
      "number": 112,
      "id": "PR_kwDODddxTs4uWch5",
      "title": "Remove confusing links",
      "url": "https://github.com/quicwg/ack-frequency/pull/112",
      "state": "MERGED",
      "author": "ianswett",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2021-11-10T14:09:47Z",
      "updatedAt": "2025-02-06T13:21:05Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "6508bb9ea950acc92295d9333ac178ec1c0f5874",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "ianswett-confusing-links",
      "headRefOid": "692f994d662381d50f188063c5e06f9d40742d5d",
      "closedAt": "2022-05-04T19:36:03Z",
      "mergedAt": "2022-05-04T19:36:03Z",
      "mergedBy": "janaiyengar",
      "mergeCommit": {
        "oid": "d0b1eb531424f6668721f21c3e9b4d455e7bf4a0"
      },
      "comments": [
        {
          "author": "gloinul",
          "authorAssociation": "NONE",
          "body": "I think removing the link to https://github.com/quicwg/ack-frequency/blob/main/draft-ietf-quic-ack-frequency.md actually have some down sides as it contains non MD that are easier to read. However, that page is out of date. Which I think can be fixed by running make gh-pages? ",
          "createdAt": "2021-11-10T15:05:15Z",
          "updatedAt": "2021-11-10T15:05:15Z"
        },
        {
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "body": "I'll fix gh-pages later today. In the meantime, merging.",
          "createdAt": "2022-05-04T19:35:58Z",
          "updatedAt": "2022-05-04T19:35:58Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 113,
      "id": "PR_kwDODddxTs42UQpw",
      "title": "Using the same order like the AF Frame",
      "url": "https://github.com/quicwg/ack-frequency/pull/113",
      "state": "MERGED",
      "author": "alagoutte",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "",
      "createdAt": "2022-04-16T14:42:28Z",
      "updatedAt": "2022-04-17T16:10:11Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "7d7421cdfcbffc1beb9c74c4f0b6cb64d00e211a",
      "headRepository": "alagoutte/ack-frequency",
      "headRefName": "patch-1",
      "headRefOid": "9220ec15848370ffdbe63fa94548bfeb051d7c8a",
      "closedAt": "2022-04-17T16:10:11Z",
      "mergedAt": "2022-04-17T16:10:11Z",
      "mergedBy": "ianswett",
      "mergeCommit": {
        "oid": "9cf996e65eff50b6a3dbb27e466a81819f0191b3"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs44QjD0",
          "commit": {
            "abbreviatedOid": "9220ec1"
          },
          "author": "nibanks",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-04-16T15:06:59Z",
          "updatedAt": "2022-04-16T15:06:59Z",
          "comments": []
        },
        {
          "id": "PRR_kwDODddxTs44Q8DL",
          "commit": {
            "abbreviatedOid": "9220ec1"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Thanks for the PR!",
          "createdAt": "2022-04-17T16:09:55Z",
          "updatedAt": "2022-04-17T16:09:55Z",
          "comments": []
        }
      ]
    },
    {
      "number": 114,
      "id": "PR_kwDODddxTs45nqKC",
      "title": "Don't use 'Generally'",
      "url": "https://github.com/quicwg/ack-frequency/pull/114",
      "state": "MERGED",
      "author": "ianswett",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #103",
      "createdAt": "2022-06-14T09:45:31Z",
      "updatedAt": "2025-02-06T13:21:06Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "d0b1eb531424f6668721f21c3e9b4d455e7bf4a0",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "ianswett-generally",
      "headRefOid": "062750b4c856ba6655896fff2537d46d30dd423f",
      "closedAt": "2022-06-26T10:53:42Z",
      "mergedAt": "2022-06-26T10:53:42Z",
      "mergedBy": "ianswett",
      "mergeCommit": {
        "oid": "6d31d7926a4eed1d0a179fb04a12925a1627c6d5"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs478QnD",
          "commit": {
            "abbreviatedOid": "062750b"
          },
          "author": "nibanks",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-06-14T10:55:15Z",
          "updatedAt": "2022-06-14T10:55:15Z",
          "comments": []
        }
      ]
    },
    {
      "number": 115,
      "id": "PR_kwDODddxTs45nyKA",
      "title": "Update Congestion Control section",
      "url": "https://github.com/quicwg/ack-frequency/pull/115",
      "state": "MERGED",
      "author": "ianswett",
      "authorAssociation": "COLLABORATOR",
      "assignees": [
        "mirjak"
      ],
      "labels": [
        "editorial"
      ],
      "body": "Fixes #106\r\n\r\nRemoves the normative SHOULD from: \"a sender SHOULD cause a receiver to send an acknowledgement at least once per RTT if there are unacknowledged ack-eliciting packets in flight\". It may be added back in some form, see issue #147 ",
      "createdAt": "2022-06-14T10:14:25Z",
      "updatedAt": "2025-02-06T13:19:29Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "501d91bb04119b83ab55e33233773ea3c827e24e",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "ianswett-ack-frequency-congestion-control",
      "headRefOid": "47db2c5996ffad47b0f0d973cd3e812da22a4865",
      "closedAt": "2023-02-27T17:08:10Z",
      "mergedAt": "2023-02-27T17:08:10Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "65087aae4ab716aee79f2c03a8714e670ad45a54"
      },
      "comments": [
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "I am sure this PR could be improved upon, but I'm happy enough with it to land it and make future improvements.\r\n\r\nWhat are others thoughts?",
          "createdAt": "2023-02-23T23:53:05Z",
          "updatedAt": "2023-02-23T23:53:05Z"
        },
        {
          "author": "gorryfair",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'm OK to merge the PR, and then to open issues around that - my key issue is that I don't think a single ACK per RTT  is the correct advice for loaded paths (or lossy paths). In the measurements I have seen, several (e.g. 4) per RTT are beneficial to be avoid the effects of path variation and loss on the return path.",
          "createdAt": "2023-02-25T08:14:23Z",
          "updatedAt": "2023-02-25T08:14:23Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs48xDug",
          "commit": {
            "abbreviatedOid": "33f0a0b"
          },
          "author": "martinthomson",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-26T23:45:57Z",
          "updatedAt": "2022-06-26T23:53:47Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "Setting the Ack-Eliciting Threshold has no effect on whether the receiver will acknowledge.  It only works if that many packets are sent, which is something that I don't think you can guarantee when setting the value.",
              "createdAt": "2022-06-26T23:45:57Z",
              "updatedAt": "2022-06-26T23:53:47Z"
            },
            {
              "originalPosition": 17,
              "body": "Why is it the sender's responsibility to ensure that the receiver sends acknowledgments?  I have a fair idea, but it needs a bit of explanation as it is not obvious.\r\n\r\nMy first thought was that maybe the receiver shouldn't accept a delay that exceeded the RTT.  That might still be a good safety measure, even if the view of RTT is subjective and it might disagree with the sender on how that limit applies.",
              "createdAt": "2022-06-26T23:46:53Z",
              "updatedAt": "2022-06-26T23:53:47Z"
            },
            {
              "originalPosition": 28,
              "body": "```suggestion\r\nacknowledgements, such as in slow start ({{Section 7.3.1 of QUIC-RECOVERY}}),\r\n```",
              "createdAt": "2022-06-26T23:48:00Z",
              "updatedAt": "2022-06-26T23:53:47Z"
            },
            {
              "originalPosition": 33,
              "body": "This looks like a repetition of the more precise text in the previous paragraph.",
              "createdAt": "2022-06-26T23:49:44Z",
              "updatedAt": "2022-06-26T23:53:47Z"
            },
            {
              "originalPosition": 27,
              "body": "bandwidth or throughput?",
              "createdAt": "2022-06-26T23:51:05Z",
              "updatedAt": "2022-06-26T23:53:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs49ZBlR",
          "commit": {
            "abbreviatedOid": "b1f63d7"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T11:59:46Z",
          "updatedAt": "2022-07-06T11:59:46Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "There are cases where a delay larger than RTT, at least min RTT could be appropriate.  One example is when RTT << timer granularity, ie: 10 us network latency and 1ms timers in a datacenter.  Now that I think about it, I will call that case out.",
              "createdAt": "2022-07-06T11:59:46Z",
              "updatedAt": "2022-07-06T11:59:46Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs49ZEDT",
          "commit": {
            "abbreviatedOid": "b3dfec9"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T12:08:03Z",
          "updatedAt": "2022-07-06T12:08:04Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "Thanks, throughput.",
              "createdAt": "2022-07-06T12:08:03Z",
              "updatedAt": "2022-07-06T12:08:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs49ZEQV",
          "commit": {
            "abbreviatedOid": "b3dfec9"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T12:08:43Z",
          "updatedAt": "2022-07-06T12:08:43Z",
          "comments": [
            {
              "originalPosition": 32,
              "body": "```suggestion\r\nachieved throughput.  Congestion window growth can also depend upon receiving\r\n```",
              "createdAt": "2022-07-06T12:08:43Z",
              "updatedAt": "2022-07-06T12:08:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs49ZEjm",
          "commit": {
            "abbreviatedOid": "7a8988a"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T12:09:44Z",
          "updatedAt": "2022-07-06T12:09:44Z",
          "comments": [
            {
              "originalPosition": 33,
              "body": "Agreed, it's the leftover text from what I started with.  Should I just delete it?",
              "createdAt": "2022-07-06T12:09:44Z",
              "updatedAt": "2022-07-06T12:09:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs49ZFLV",
          "commit": {
            "abbreviatedOid": "7a8988a"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T12:11:50Z",
          "updatedAt": "2022-07-06T12:11:50Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "Agreed.  I think the most important thing is the congestion controller get feedback for every congestion window of packets, as congestion controllers typically operate on a granularity closer to that than round trip.  As such I wonder if we should just say that instead of talking about RTTs?",
              "createdAt": "2022-07-06T12:11:50Z",
              "updatedAt": "2022-07-06T12:11:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs49ilwX",
          "commit": {
            "abbreviatedOid": "33f0a0b"
          },
          "author": "gorryfair",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-08T06:58:02Z",
          "updatedAt": "2022-07-08T06:58:02Z",
          "comments": [
            {
              "originalPosition": 33,
              "body": "To me though for Internet paths, the key issue is not the \"performance\" reduction, the primary concern of the transport area was the increased congestion risk - especially to other flows that share a common bottleneck along the path.",
              "createdAt": "2022-07-08T06:58:02Z",
              "updatedAt": "2022-07-08T06:58:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs49im_O",
          "commit": {
            "abbreviatedOid": "33f0a0b"
          },
          "author": "gorryfair",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-08T07:03:42Z",
          "updatedAt": "2022-07-08T07:03:43Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "I agree there is a bound on how long the transport should defer reacting when it has sent data - this is a control loop. For an Internet path, to me this is measured in RTTs, or part of an RTT. (I don't know whether we can state the same constraints to apply in both a heterogenous Internet and in a high speed DC). I was pretty sure that previous detailed analysis of feedback systems showed requirements for stable feedback at multiple control signals per RTT, so I'd encourage care here.",
              "createdAt": "2022-07-08T07:03:43Z",
              "updatedAt": "2022-07-08T07:03:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs4-wNGc",
          "commit": {
            "abbreviatedOid": "7a8988a"
          },
          "author": "gorryfair",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-27T16:44:51Z",
          "updatedAt": "2022-07-27T16:55:21Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "I would expect you might do things differently in a DC -  we could declare a minimum here...\r\n\r\n... now noted in issue https://github.com/quicwg/ack-frequency/issues/138",
              "createdAt": "2022-07-27T16:44:52Z",
              "updatedAt": "2023-02-20T17:16:08Z"
            },
            {
              "originalPosition": 20,
              "body": "The /or/ is still problematic - it's not one or the other, because the time is what actually matters for protocol robustness; and the count threshold is really helpful when there are path characteristic changes, because it prevents very large numbers of packets per ACK - or we simply wish to reduce the rate. Perhaps two sentences would be wiser.",
              "createdAt": "2022-07-27T16:44:57Z",
              "updatedAt": "2023-01-23T14:35:38Z"
            },
            {
              "originalPosition": 28,
              "body": "Indeed, deferring loss detection  impacts performance - I think it more important not to delay the congestion response.",
              "createdAt": "2022-07-27T16:48:17Z",
              "updatedAt": "2022-07-27T16:55:21Z"
            },
            {
              "originalPosition": 38,
              "body": "Looking again the two are slightly different  and need to be combined.\r\n\r\nBoth are describing the case when the sender is window-limited - (1) it increases path delay, and hence lowers throughput (2) it delays growth of cwnd, and where performance can be impacted. (and we avoid anyone thinking fewer ACKs always means lower throughput).\r\n",
              "createdAt": "2022-07-27T16:55:12Z",
              "updatedAt": "2022-07-27T16:55:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs4-1T2B",
          "commit": {
            "abbreviatedOid": "7a8988a"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-28T14:08:36Z",
          "updatedAt": "2022-07-28T14:08:37Z",
          "comments": [
            {
              "originalPosition": 33,
              "body": "What increased congestion are you concerned about by excessively delayed acks?",
              "createdAt": "2022-07-28T14:08:36Z",
              "updatedAt": "2022-07-28T14:08:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs4-2sgv",
          "commit": {
            "abbreviatedOid": "33f0a0b"
          },
          "author": "gorryfair",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-28T17:50:31Z",
          "updatedAt": "2022-07-28T17:50:31Z",
          "comments": [
            {
              "originalPosition": 33,
              "body": "What I mean is a sluggish response to congestion when the sender was neither cwnd nor flow credit-limited (i.e. sender can still send without receiving feedback) and the ACK frequency is low (>>IW packets per ACK), where the sender persists sending new data into the network after the congestion event, i.e. CE-mark or loss. ",
              "createdAt": "2022-07-28T17:50:31Z",
              "updatedAt": "2022-07-28T17:50:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs4-22Ey",
          "commit": {
            "abbreviatedOid": "7a8988a"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-28T18:21:04Z",
          "updatedAt": "2022-07-28T18:21:04Z",
          "comments": [
            {
              "originalPosition": 33,
              "body": "This paragraph is talking about the congestion controller potentially being CWND limited and not being able to send.  It's not discussing anything related to congestion (ie: CE or missing packets).",
              "createdAt": "2022-07-28T18:21:04Z",
              "updatedAt": "2022-07-28T18:21:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs4-23Je",
          "commit": {
            "abbreviatedOid": "33f0a0b"
          },
          "author": "gorryfair",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-28T18:25:00Z",
          "updatedAt": "2022-07-28T18:25:00Z",
          "comments": [
            {
              "originalPosition": 33,
              "body": "As long as the ID has the CC issues as well as the performance ones, I'll be happy.",
              "createdAt": "2022-07-28T18:25:00Z",
              "updatedAt": "2022-07-28T18:25:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5KvxY8",
          "commit": {
            "abbreviatedOid": "7a8988a"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-18T17:57:42Z",
          "updatedAt": "2023-01-18T17:57:43Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "Yes, I'm also not sure about this case. Generally I think you should try to at least send one ACK per RTT. If you timer granularity is lower than RTT, you could still use a packet threshold to achieve this.\r\n\r\nIf you want to diverge from this guidance in a DC is something we don't really control. But I think at least once per RTT is the right guidance for the Internet.",
              "createdAt": "2023-01-18T17:57:42Z",
              "updatedAt": "2023-01-18T17:57:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5Kvy1v",
          "commit": {
            "abbreviatedOid": "7a8988a"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-18T18:01:25Z",
          "updatedAt": "2023-01-18T18:01:25Z",
          "comments": [
            {
              "originalPosition": 34,
              "body": "and create bursts if no pacing is used.",
              "createdAt": "2023-01-18T18:01:25Z",
              "updatedAt": "2023-01-20T17:00:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5LcZt7",
          "commit": {
            "abbreviatedOid": "7a8988a"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-23T14:47:42Z",
          "updatedAt": "2023-01-23T14:47:43Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "```suggestion\r\na packet loss or an ECN CE marking. Therefore, {{Section 13.2.2 of QUIC-TRANSPORT}} indicates \"A receiver SHOULD send an ACK frame after receiving at least two ack-eliciting packets\".\r\nThis document overwrites this requirement by providing the sender with a way to signal its preferred\r\nACK frequency to the receiver. To enable a sender to respond to potential\r\nnetwork congestion in a timely fashion, usually at least one acknowledgement\r\nper round-trip time (RTT) is needed if there are unacknowledged ack-eliciting packets in flight.\r\nA sender can accomplish this by sending an IMMEDIATE_ACK frame once per\r\nRTT. Further, a sender SHOULD  NOT set the Ack-Eliciting Threshold and\r\nRequest Max Ack Delay values to be more than a congestion window and an\r\nestimated RTT, respectively.\r\n```",
              "createdAt": "2023-01-23T14:47:42Z",
              "updatedAt": "2023-02-06T14:53:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5LcdIR",
          "commit": {
            "abbreviatedOid": "7a8988a"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-23T14:55:16Z",
          "updatedAt": "2023-01-23T14:55:16Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "```suggestion\r\n'Reordering Threshold' can be harmful, because it delays fast loss detection.\r\n```",
              "createdAt": "2023-01-23T14:55:16Z",
              "updatedAt": "2023-01-23T14:55:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5LcdfZ",
          "commit": {
            "abbreviatedOid": "7a8988a"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-23T14:56:02Z",
          "updatedAt": "2023-01-23T14:56:03Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "I opened issue #138",
              "createdAt": "2023-01-23T14:56:03Z",
              "updatedAt": "2023-01-23T14:56:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5LceM-",
          "commit": {
            "abbreviatedOid": "7a8988a"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-23T14:57:36Z",
          "updatedAt": "2023-01-23T14:57:36Z",
          "comments": [
            {
              "originalPosition": 34,
              "body": "```suggestion\r\nso delaying acknowledgements can delay the increase in congestion window and\r\ncreating packet bursts if pacing is not used.\r\n```",
              "createdAt": "2023-01-23T14:57:36Z",
              "updatedAt": "2023-01-23T14:57:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5Lcfif",
          "commit": {
            "abbreviatedOid": "7a8988a"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-23T15:00:31Z",
          "updatedAt": "2023-01-23T15:00:32Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "I think this is well covered in the previous paragraph.",
              "createdAt": "2023-01-23T15:00:31Z",
              "updatedAt": "2023-01-23T15:00:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5LcfpR",
          "commit": {
            "abbreviatedOid": "7a8988a"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-23T15:00:46Z",
          "updatedAt": "2023-01-23T15:00:46Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "```suggestion\r\n```",
              "createdAt": "2023-01-23T15:00:46Z",
              "updatedAt": "2023-01-23T15:00:46Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5LcgKE",
          "commit": {
            "abbreviatedOid": "7a8988a"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-23T15:01:53Z",
          "updatedAt": "2023-01-23T15:01:54Z",
          "comments": [
            {
              "originalPosition": 33,
              "body": "I think risks about not receiving timely feedback are covered in the initial paragraph of this PR. Let's merge this for now and see if anything is still needed in addition.",
              "createdAt": "2023-01-23T15:01:54Z",
              "updatedAt": "2023-01-23T15:01:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5Lh8B0",
          "commit": {
            "abbreviatedOid": "7a8988a"
          },
          "author": "gorryfair",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-24T10:10:35Z",
          "updatedAt": "2023-01-24T10:18:08Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "I'm not sure why you suggest /one ACK per RTT/ ? In the measurements I have seen, several (e.g. 4) per RTT are beneficial to be avoid the effects of path variation and loss on the return path. But, agree on the backup of using the packet threshold to achieve this, which seems also to work well if the RTT varies.",
              "createdAt": "2023-01-24T10:10:35Z",
              "updatedAt": "2023-01-24T10:18:08Z"
            },
            {
              "originalPosition": 22,
              "body": "/the sender a way to signal/the sender with  a way to signal/\r\n",
              "createdAt": "2023-01-24T10:11:22Z",
              "updatedAt": "2023-01-24T10:18:09Z"
            },
            {
              "originalPosition": 34,
              "body": "I am unsure it is useful to say: /such as in slow start/ ... (isn't it actually any case where the sender is cwnd-limited?)",
              "createdAt": "2023-01-24T10:17:56Z",
              "updatedAt": "2023-01-24T10:18:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5LiJuy",
          "commit": {
            "abbreviatedOid": "7a8988a"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-24T10:47:30Z",
          "updatedAt": "2023-01-24T10:47:30Z",
          "comments": [
            {
              "originalPosition": 34,
              "body": "Kind of but in slow start is actually a noticeable problem because in congestion avoidance you only increase by something small like 1 MSS per RTT and it doesn't matter that much when exactly you increase the congestion window within the RTT.",
              "createdAt": "2023-01-24T10:47:30Z",
              "updatedAt": "2023-01-24T10:47:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5LiMWF",
          "commit": {
            "abbreviatedOid": "7a8988a"
          },
          "author": "gorryfair",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-24T10:54:40Z",
          "updatedAt": "2023-01-24T10:54:40Z",
          "comments": [
            {
              "originalPosition": 34,
              "body": "Sure - if thresh is small then it's noticeable for CA. So, can we write e.g., this can be particularly significant in slow start...",
              "createdAt": "2023-01-24T10:54:40Z",
              "updatedAt": "2023-01-24T10:54:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5LiV_-",
          "commit": {
            "abbreviatedOid": "7a8988a"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-24T11:18:19Z",
          "updatedAt": "2023-01-24T11:18:19Z",
          "comments": [
            {
              "originalPosition": 34,
              "body": "```suggestion\r\nacknowledgements. This can be particularly significant in slow start ({{Section 7.3.1 of QUIC-RECOVERY}}),\r\nas delaying acknowledgements can delay the increase in congestion window and can\r\ncreate larger packet bursts.\r\n```",
              "createdAt": "2023-01-24T11:18:19Z",
              "updatedAt": "2023-02-06T15:29:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5MnxS5",
          "commit": {
            "abbreviatedOid": "7b9a9fc"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-06T15:53:19Z",
          "updatedAt": "2023-02-06T15:53:19Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "Ian and I discussed today about the new \"SHOULD NOT\" in the proposed text. During discussion we reached the conclusion that it's better to not use normative language here. however, the more I think about it, I think it's actually important to make a recommendation about the boundary on how to set the values.\r\n\r\nHowever, maybe this is just not the right place in the document? This paragraph discusses how a data sender can use this extension to ensure that there is at least one ack RTT. However, if we want to have normative language, maybe this should be added to the ACK_FREQUENCY Frame section?",
              "createdAt": "2023-02-06T15:53:19Z",
              "updatedAt": "2023-02-06T15:53:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5MnzNp",
          "commit": {
            "abbreviatedOid": "7b9a9fc"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-06T15:57:39Z",
          "updatedAt": "2023-02-06T15:57:40Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "```suggestion\r\na packet loss or an ECN CE marking. Therefore, {{Section 13.2.2 of QUIC-TRANSPORT}} \r\nindicates \"A receiver SHOULD send an ACK frame after receiving at least two ack-eliciting packets\".\r\nThis document overwrites this requirement by providing the sender with a way to signal its preferred\r\nACK frequency to the receiver. To enable a sender to respond to potential\r\nnetwork congestion in a timely fashion, usually at least one acknowledgement\r\nper round-trip time (RTT) is needed if there are unacknowledged ack-eliciting packets in flight.\r\nA sender can accomplish this by sending an IMMEDIATE_ACK frame once per\r\nRTT. Similarly, setting the Ack-Eliciting Threshold to a lower value than the current congestion window or\r\nthe Request Max Ack to less than the estimated RTT are two options to request at least one ACK frame per RTT.\r\nHowever, the congestion window particularly but also the RTT are dynamic and therefore might require frequent updates if the selected value are close to this limit.\r\n```\r\nThis removes normative language and adds even more explanation... Sorry for making the text longer but given this is a discussion section, maybe more words actually have to make it clearer.",
              "createdAt": "2023-02-06T15:57:39Z",
              "updatedAt": "2023-02-06T15:57:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5OZlKU",
          "commit": {
            "abbreviatedOid": "b7cc0db"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-27T10:44:24Z",
          "updatedAt": "2023-02-27T10:44:25Z",
          "comments": [
            {
              "originalPosition": 24,
              "body": "```suggestion\r\nDelay value to no more than the estimated round trip. Alternatively, a sender can\r\n```",
              "createdAt": "2023-02-27T10:44:25Z",
              "updatedAt": "2023-02-27T10:44:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5OZlhZ",
          "commit": {
            "abbreviatedOid": "b7cc0db"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-27T10:45:17Z",
          "updatedAt": "2023-02-27T10:45:17Z",
          "comments": [
            {
              "originalPosition": 29,
              "body": "```suggestion\r\nNote that it is possible that the RTT is smaller than the receiver's timer granularity,\r\n```",
              "createdAt": "2023-02-27T10:45:17Z",
              "updatedAt": "2023-02-27T10:45:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5OZn-Y",
          "commit": {
            "abbreviatedOid": "b7cc0db"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-27T10:51:37Z",
          "updatedAt": "2023-02-27T10:51:38Z",
          "comments": [
            {
              "originalPosition": 24,
              "body": "I also proposed this sentence based on the discussion. We don't really need it but, I think in this part of the draft a bit of a warning could still be good:\r\n\r\n> However, the congestion window particularly but also the RTT are dynamic and therefore might require frequent updates if the selected value are close to this limit.",
              "createdAt": "2023-02-27T10:51:37Z",
              "updatedAt": "2023-02-27T10:51:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5ObsBt",
          "commit": {
            "abbreviatedOid": "1391df9"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-27T15:53:32Z",
          "updatedAt": "2023-02-27T15:53:32Z",
          "comments": [
            {
              "originalPosition": 24,
              "body": "That's true.  Do you think we need to explicitly say that?",
              "createdAt": "2023-02-27T15:53:32Z",
              "updatedAt": "2023-02-27T15:53:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5Obt0c",
          "commit": {
            "abbreviatedOid": "b7cc0db"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-27T15:57:16Z",
          "updatedAt": "2023-02-27T15:57:16Z",
          "comments": [
            {
              "originalPosition": 24,
              "body": "Given this is a separate section providing additional guidance on congestion control, I think it would be good to say it. But of course we don't need to...",
              "createdAt": "2023-02-27T15:57:16Z",
              "updatedAt": "2023-02-27T15:57:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5OcQLm",
          "commit": {
            "abbreviatedOid": "6199991"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-27T17:06:04Z",
          "updatedAt": "2023-02-27T17:06:05Z",
          "comments": [
            {
              "originalPosition": 24,
              "body": "```suggestion\r\nDelay value to no more than the estimated round trip. Note that the congestion\r\nwindow particularly but also the RTT are dynamic and therefore might require frequent\r\nupdates if the selected value are close to these limits. Alternatively, a sender can\r\n```",
              "createdAt": "2023-02-27T17:06:04Z",
              "updatedAt": "2023-02-27T17:06:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5OcQpi",
          "commit": {
            "abbreviatedOid": "974aa2d"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-27T17:07:16Z",
          "updatedAt": "2023-02-27T17:07:16Z",
          "comments": [
            {
              "originalPosition": 29,
              "body": "```suggestion\r\nwindow particularly but also the RTT are dynamic and therefore might require\r\nfrequent updates if the selected value are close to these limits. Alternatively,\r\na sender can accomplish this by sending an IMMEDIATE_ACK frame once per\r\nround trip, though if the packet containing an IMMEDIATE_ACK is lost,\r\ndetection of that loss will be delayed by the reordering threshold or requested\r\nmax ack delay.\r\n```",
              "createdAt": "2023-02-27T17:07:16Z",
              "updatedAt": "2023-02-27T17:07:17Z"
            }
          ]
        }
      ]
    },
    {
      "number": 116,
      "id": "PR_kwDODddxTs45n6l3",
      "title": "Add normative text for 'Ignore CE'",
      "url": "https://github.com/quicwg/ack-frequency/pull/116",
      "state": "MERGED",
      "author": "ianswett",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "design"
      ],
      "body": "We have normative text for Ignore Order, but none for Ignore CE.\r\n\r\nSHOULD NOT use with ECN(1) marking per L4S or DCTCP.\r\n\r\nFixes #107 \r\nFixes #109",
      "createdAt": "2022-06-14T10:49:05Z",
      "updatedAt": "2025-02-06T13:21:08Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "d0b1eb531424f6668721f21c3e9b4d455e7bf4a0",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "ianswett-ignore-ce",
      "headRefOid": "f1f1613177d3031f0e794b10088110f8ddf49dc0",
      "closedAt": "2022-07-11T23:40:03Z",
      "mergedAt": "2022-07-11T23:40:03Z",
      "mergedBy": "janaiyengar",
      "mergeCommit": {
        "oid": "53e37c3fa07c9a00901a000152ecc25698077b81"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs48BarY",
          "commit": {
            "abbreviatedOid": "6c2d9a5"
          },
          "author": "gloinul",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-15T07:34:06Z",
          "updatedAt": "2022-06-15T07:34:07Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "Is there a need to for any normative statement for when the CE at the latest needs to be reported. I assume it is dependent on when the rules says that the next normal should be sent. Are there configuration combinations that are non suitable to combine with Ignore CE? Is it obvious that you will need to report the CE mark(s) received in the next regular ACK, and the this only turns off the immediate reaction to a CE mark?",
              "createdAt": "2022-06-15T07:34:06Z",
              "updatedAt": "2022-06-15T07:34:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs48wvJB",
          "commit": {
            "abbreviatedOid": "6c2d9a5"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-26T11:18:02Z",
          "updatedAt": "2022-06-26T11:18:02Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "There's a SHOULD send an acknowledgement at least once per RTT in Congestion Control: https://github.com/quicwg/ack-frequency/blob/main/draft-ietf-quic-ack-frequency.md#congestion-control\r\n\r\nThere are unsuitable combinations, but hopefully the once per round trip guidance provides some guardrails.\r\n\r\nI clarified that the CE marks are still reported.",
              "createdAt": "2022-06-26T11:18:02Z",
              "updatedAt": "2022-07-07T09:24:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs49H-uB",
          "commit": {
            "abbreviatedOid": "7ea805f"
          },
          "author": "goelvidhi",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-06-30T21:17:13Z",
          "updatedAt": "2022-06-30T21:47:56Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "`Otherwise` doesn't read well here. I don't know what would work better, probably \"And\"",
              "createdAt": "2022-06-30T21:17:13Z",
              "updatedAt": "2022-06-30T21:47:56Z"
            },
            {
              "originalPosition": 10,
              "body": "Technically ECT(1) is not negotiated, the sender just sends it. It is validated though to check for network and receiver support. Suggestion for text,\r\n```\r\nThe Ignore-CE bit SHOULD NOT be set if the sender sets ECT(1) in its outgoing packets which maybe used with DCTCP {{}} or L4S\r\n``` \r\n\r\nOne question, does DCTCP use ECT(1), I thought it was using ECT(0).",
              "createdAt": "2022-06-30T21:22:29Z",
              "updatedAt": "2022-06-30T21:47:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs49Zt1r",
          "commit": {
            "abbreviatedOid": "7ea805f"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T14:00:42Z",
          "updatedAt": "2022-07-06T14:00:43Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "Agreed, reworded.",
              "createdAt": "2022-07-06T14:00:43Z",
              "updatedAt": "2022-07-06T14:00:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs49ZvL0",
          "commit": {
            "abbreviatedOid": "1897649"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-06T14:03:45Z",
          "updatedAt": "2022-07-06T14:03:45Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "Sorry, it appears you're correct about DCTCP.  I'm going to remove that.",
              "createdAt": "2022-07-06T14:03:45Z",
              "updatedAt": "2022-07-06T14:03:45Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs49d7b5",
          "commit": {
            "abbreviatedOid": "7ea805f"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-07T09:17:29Z",
          "updatedAt": "2022-07-07T09:17:29Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "Removed DCTCP and accepted your suggestion with a minor change.",
              "createdAt": "2022-07-07T09:17:29Z",
              "updatedAt": "2022-07-07T09:17:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs49fUpR",
          "commit": {
            "abbreviatedOid": "19ecf71"
          },
          "author": "nibanks",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-07T13:55:14Z",
          "updatedAt": "2022-07-07T13:55:14Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "```suggestion\r\npacket.  If an immediate acknowledgement is not sent, the CE marks are reported\r\n```",
              "createdAt": "2022-07-07T13:55:14Z",
              "updatedAt": "2022-07-07T13:55:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs49fU6G",
          "commit": {
            "abbreviatedOid": "19ecf71"
          },
          "author": "nibanks",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "Just one nit",
          "createdAt": "2022-07-07T13:55:54Z",
          "updatedAt": "2022-07-07T13:55:54Z",
          "comments": []
        },
        {
          "id": "PRR_kwDODddxTs49hqEL",
          "commit": {
            "abbreviatedOid": "f1f1613"
          },
          "author": "goelvidhi",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-07-07T22:46:02Z",
          "updatedAt": "2022-07-07T22:46:02Z",
          "comments": []
        },
        {
          "id": "PRR_kwDODddxTs49ijzV",
          "commit": {
            "abbreviatedOid": "f1f1613"
          },
          "author": "gorryfair",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-08T06:48:46Z",
          "updatedAt": "2022-07-08T06:48:47Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "This concerns me: If a transport has decided to set ECT ... be it ECT(0) or ECT(1), I would expect it is obliged to respond to CE marks it receives. In what conditions does it become OK for that transport to then say it will not react to CE-marking, and decide it will ignore it?",
              "createdAt": "2022-07-08T06:48:47Z",
              "updatedAt": "2022-07-08T06:48:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs49mdVu",
          "commit": {
            "abbreviatedOid": "f1f1613"
          },
          "author": "goelvidhi",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-09T07:52:31Z",
          "updatedAt": "2022-07-09T07:52:32Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "This issue was discussed in detail here - https://github.com/quicwg/ack-frequency/issues/87\r\n\r\nI don't think it is ok for the sender to not respond to CE marking at all, but it could be that the receiver could send ACKs on transition from ECT to CE or CE to ECT to reduce the number of ACKs. I am not fully convinced with Ignore_CE being sent from the sender as I don't think it conveys the right intention. A better way would be for the receiver to decide when to send ACKs when CE or ECT(0 or 1) are received. ",
              "createdAt": "2022-07-09T07:52:31Z",
              "updatedAt": "2022-07-09T07:53:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs49sbdQ",
          "commit": {
            "abbreviatedOid": "f1f1613"
          },
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-11T23:39:52Z",
          "updatedAt": "2022-07-11T23:39:53Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "@gorryfair -- this isn't saying that the receiver should not respond to CE marks, it is reducing the urgency with which the receiver communicates this information to the sender... I think you might have an issue with having this field in the first place. I would take that up as a separate issue, but I'm happy to weigh in there. I'm personally not strongly attached to this bit.\r\n\r\nI'll merge this PR anyway, since it isn't the thing that there's disagreement on here.",
              "createdAt": "2022-07-11T23:39:53Z",
              "updatedAt": "2022-07-11T23:39:53Z"
            }
          ]
        }
      ]
    },
    {
      "number": 117,
      "id": "PR_kwDODddxTs45oajB",
      "title": "Ignore Order and excluding max_ack_delay",
      "url": "https://github.com/quicwg/ack-frequency/pull/117",
      "state": "MERGED",
      "author": "ianswett",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "design"
      ],
      "body": "Provides more details on why excluding max_ack_delay when Ignore Order is used may cause premature PTOs.\r\n\r\nFixes #110",
      "createdAt": "2022-06-14T12:53:37Z",
      "updatedAt": "2025-02-06T13:21:07Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "d0b1eb531424f6668721f21c3e9b4d455e7bf4a0",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "ianswett-ignore-order-max-ack-delay",
      "headRefOid": "48c006c716711cf2a3c5b2457d15bb666447adac",
      "closedAt": "2022-07-11T23:33:03Z",
      "mergedAt": "2022-07-11T23:33:03Z",
      "mergedBy": "janaiyengar",
      "mergeCommit": {
        "oid": "6082996c1f9c3efa8db53acd205b75a71c93fc37"
      },
      "comments": [
        {
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm merging this -- I think this is good, but if we need to add more cautionary text, we can still do that.",
          "createdAt": "2022-07-11T23:32:57Z",
          "updatedAt": "2022-07-11T23:32:57Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs4798Xg",
          "commit": {
            "abbreviatedOid": "48c006c"
          },
          "author": "gloinul",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-06-14T15:32:56Z",
          "updatedAt": "2022-06-14T15:32:56Z",
          "comments": []
        },
        {
          "id": "PRR_kwDODddxTs49fJDj",
          "commit": {
            "abbreviatedOid": "48c006c"
          },
          "author": "nibanks",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-07-07T13:25:55Z",
          "updatedAt": "2022-07-07T13:25:55Z",
          "comments": []
        },
        {
          "id": "PRR_kwDODddxTs49gVJ3",
          "commit": {
            "abbreviatedOid": "48c006c"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-07-07T16:49:17Z",
          "updatedAt": "2022-07-07T16:49:17Z",
          "comments": []
        },
        {
          "id": "PRR_kwDODddxTs49hpPa",
          "commit": {
            "abbreviatedOid": "48c006c"
          },
          "author": "goelvidhi",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-07-07T22:39:38Z",
          "updatedAt": "2022-07-07T22:39:44Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "The change is good when Ignore Order is used but it makes me think that we are basically delaying loss recovery (if there is real loss) by delaying PTO. I haven't read the most updated draft but I hope we talk about cons of using Ignore Order :-)",
              "createdAt": "2022-07-07T22:39:38Z",
              "updatedAt": "2022-07-07T22:39:44Z"
            }
          ]
        }
      ]
    },
    {
      "number": 120,
      "id": "PR_kwDODddxTs48MI7W",
      "title": "Update Motivation for Asymmetric Paths",
      "url": "https://github.com/quicwg/ack-frequency/pull/120",
      "state": "MERGED",
      "author": "ianswett",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "Closes #51\r\n\r\nI tried to work in what I thought were the important parts of Gorry's suggested text, PTAL if I captured everything.",
      "createdAt": "2022-07-27T15:29:07Z",
      "updatedAt": "2025-02-06T13:21:10Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "53e37c3fa07c9a00901a000152ecc25698077b81",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "ianswett-asymmetric-motivation",
      "headRefOid": "2746c7fc44362859695318f872f5406daa611062",
      "closedAt": "2022-07-27T20:33:05Z",
      "mergedAt": "2022-07-27T20:33:05Z",
      "mergedBy": "ianswett",
      "mergeCommit": {
        "oid": "7d1ae89c3026b4fc78a71e6e6956e184100ad2e1"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs4-vzg_",
          "commit": {
            "abbreviatedOid": "2746c7f"
          },
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-07-27T15:31:38Z",
          "updatedAt": "2022-07-27T15:31:38Z",
          "comments": []
        },
        {
          "id": "PRR_kwDODddxTs4-wHTY",
          "commit": {
            "abbreviatedOid": "2746c7f"
          },
          "author": "gorryfair",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "This is much better.",
          "createdAt": "2022-07-27T16:27:09Z",
          "updatedAt": "2022-07-27T16:27:09Z",
          "comments": []
        }
      ]
    },
    {
      "number": 121,
      "id": "PR_kwDODddxTs48Qm7f",
      "title": "Remove 'Ignore CE'",
      "url": "https://github.com/quicwg/ack-frequency/pull/121",
      "state": "MERGED",
      "author": "ianswett",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #118",
      "createdAt": "2022-07-28T15:25:22Z",
      "updatedAt": "2025-02-06T13:21:10Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "7d1ae89c3026b4fc78a71e6e6956e184100ad2e1",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "ianswett-remove-ignore-ce",
      "headRefOid": "bac95e0ce6866bb2e1463d67ae345563c6843830",
      "closedAt": "2022-07-29T14:49:23Z",
      "mergedAt": "2022-07-29T14:49:23Z",
      "mergedBy": "ianswett",
      "mergeCommit": {
        "oid": "547716fbe31a870f267f89adc1c6d4d033942024"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs4-19_J",
          "commit": {
            "abbreviatedOid": "bac95e0"
          },
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2022-07-28T15:26:51Z",
          "updatedAt": "2022-07-28T15:26:51Z",
          "comments": []
        }
      ]
    },
    {
      "number": 127,
      "id": "PR_kwDODddxTs5DXoZz",
      "title": "Suggested fixes for NITs and issue #125",
      "url": "https://github.com/quicwg/ack-frequency/pull/127",
      "state": "CLOSED",
      "author": "ana-cc",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Pull request comes from Gorry Fairhurst via me, as promised at IETF 115. Antoher PR on the way for issue #53",
      "createdAt": "2022-11-21T15:58:25Z",
      "updatedAt": "2023-01-24T20:54:07Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "b880187906d68d03734554128844312ed788443c",
      "headRepository": "ana-cc/ack-frequency",
      "headRefName": "main",
      "headRefOid": "c2b13d3b5e8583476e22f7102b2ac37439add3cf",
      "closedAt": "2023-01-24T20:53:47Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Closing as this PR is now superseded by #115, #128, #141, and #139.",
          "createdAt": "2023-01-24T20:53:46Z",
          "updatedAt": "2023-01-24T20:54:07Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs5G33Gp",
          "commit": {
            "abbreviatedOid": "98ea8ce"
          },
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2022-11-21T23:11:15Z",
          "updatedAt": "2022-11-21T23:13:22Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\nAn endpoint can send multiple ACK_FREQUENCY frames on the same connection, and each one of them can\r\n```\r\n\r\nNot sure if this is necessary, where else would you send them? Doesn't hurt either though.",
              "createdAt": "2022-11-21T23:11:15Z",
              "updatedAt": "2022-11-21T23:13:22Z"
            },
            {
              "originalPosition": 70,
              "body": "```suggestion\r\ndenial-of-service (DoS) attack. However, a sender has control of many aspects of\r\n```",
              "createdAt": "2022-11-21T23:13:14Z",
              "updatedAt": "2022-11-21T23:13:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5Kv2RM",
          "commit": {
            "abbreviatedOid": "d3183e3"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-18T18:11:58Z",
          "updatedAt": "2023-01-18T18:11:59Z",
          "comments": [
            {
              "originalPosition": 161,
              "body": "This text is a bit confusing in the use of \"sender\". However, I think the real advise is that a host should not just blindly apply the max ack delay value provided by the other end but may use a higher value if the available resources need to be protected. However, each endpoint actually indicates its minimum value in the transport parameter and this should protect this case. But this I guess there can be cases where you want to dynamically adopt, e.g. when you are under DoS...\r\n\r\nThe other side of this is, however, that a host that requests a certain max delay threshold can not rely on the fact that this threshold is always used. Which is probably also something important to note (and raised by Bob in issue #125). However, not sure if this should be in the security considerations section of somewhere else.",
              "createdAt": "2023-01-18T18:11:58Z",
              "updatedAt": "2023-01-18T18:11:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5Ldjb7",
          "commit": {
            "abbreviatedOid": "d3183e3"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-23T17:32:23Z",
          "updatedAt": "2023-01-23T17:32:23Z",
          "comments": [
            {
              "originalPosition": 106,
              "body": "This needs to say in future \"If the Reordering Threshold  is set to 0x00, ...\". However, let's merge this first and first this later!",
              "createdAt": "2023-01-23T17:32:23Z",
              "updatedAt": "2023-01-23T17:32:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5LdltR",
          "commit": {
            "abbreviatedOid": "d3183e3"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-23T17:38:06Z",
          "updatedAt": "2023-01-23T17:38:07Z",
          "comments": [
            {
              "originalPosition": 162,
              "body": "```suggestion\r\nFurther, the information in the ACK_FREQUENCY frame are ultimately only a request\r\nbut do not provide any ability for the requester to enforce a certain behavior\r\non the ACK sender. As such an endpoint can simply not follow the request due to \r\nsecurity concerns or practical limits, especially in situation such as a DDoS \r\nattack or when otherwise under high computational or network load.\r\n```",
              "createdAt": "2023-01-23T17:38:06Z",
              "updatedAt": "2023-01-23T17:38:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5Lh3sa",
          "commit": {
            "abbreviatedOid": "d3183e3"
          },
          "author": "gorryfair",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-24T09:59:10Z",
          "updatedAt": "2023-01-24T09:59:11Z",
          "comments": [
            {
              "originalPosition": 161,
              "body": "/sender/ seems to be the sender of the ACK Frequency Frame.\r\n",
              "createdAt": "2023-01-24T09:59:10Z",
              "updatedAt": "2023-01-24T09:59:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5Lh6I7",
          "commit": {
            "abbreviatedOid": "d3183e3"
          },
          "author": "gorryfair",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-24T10:05:32Z",
          "updatedAt": "2023-01-24T10:05:32Z",
          "comments": [
            {
              "originalPosition": 161,
              "body": "I think there is a possibility that we don't want to say much more: because QUIC frames are already protected from on-path attack. In that case, we are simply talking about a rogue sender of an ACK Frequency Frame to make a receiver do more work,... there are a lot more crazy things a sender of the ACK Frequency Frame and others QUIC Frames **could** do to mess up a receiver as a DoS attack, and it seems to me also there is no additional threat.",
              "createdAt": "2023-01-24T10:05:32Z",
              "updatedAt": "2023-01-24T10:05:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5Lk27n",
          "commit": {
            "abbreviatedOid": "77f0dbd"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-24T17:34:32Z",
          "updatedAt": "2023-01-24T17:34:33Z",
          "comments": [
            {
              "originalPosition": 128,
              "body": "```suggestion\r\n```",
              "createdAt": "2023-01-24T17:34:32Z",
              "updatedAt": "2023-01-24T17:34:33Z"
            }
          ]
        }
      ]
    },
    {
      "number": 128,
      "id": "PR_kwDODddxTs5FT2cf",
      "title": "Context for asymmetric paths",
      "url": "https://github.com/quicwg/ack-frequency/pull/128",
      "state": "CLOSED",
      "author": "ana-cc",
      "authorAssociation": "NONE",
      "assignees": [
        "ianswett"
      ],
      "labels": [],
      "body": "Pull request comes from Gorry Fairhurst via me, as promised at IETF 115.\r\n\r\nThe current text is an excellent start but does not sufficiently address the range of scenarios and reasons why the ACK Frequency Draft is important for networks with different characteristics beyond just asymmetric capacity. We propose to enhance it by adding context, which if merged would address issue https://github.com/quicwg/ack-frequency/issues/53 without having to write an example in the draft.\r\n\r\n",
      "createdAt": "2022-12-13T11:36:46Z",
      "updatedAt": "2023-02-20T16:35:44Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "547716fbe31a870f267f89adc1c6d4d033942024",
      "headRepository": "ana-cc/ack-frequency",
      "headRefName": "asymmetric-path-motivation",
      "headRefOid": "a9434e5ee41fc54fef6c124e58668126cbc72bd4",
      "closedAt": "2023-02-20T16:35:44Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This change is also cover in PR #127, so we can simply close this one.",
          "createdAt": "2023-01-23T17:27:05Z",
          "updatedAt": "2023-01-23T17:27:05Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Fixes #53 \r\n\r\nFinally closed #127 instead. This one is still current.\r\n\r\n",
          "createdAt": "2023-01-24T20:56:10Z",
          "updatedAt": "2023-01-24T20:56:10Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs5LOWJm",
          "commit": {
            "abbreviatedOid": "1a3aaf0"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-01-19T15:37:19Z",
          "updatedAt": "2023-01-19T15:37:19Z",
          "comments": []
        },
        {
          "id": "PRR_kwDODddxTs5LlIEi",
          "commit": {
            "abbreviatedOid": "1a3aaf0"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2023-01-24T18:21:45Z",
          "updatedAt": "2023-01-24T18:22:17Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "```suggestion\r\n      name: IJSCN\r\n```",
              "createdAt": "2023-01-24T18:21:45Z",
              "updatedAt": "2023-01-24T18:22:17Z"
            },
            {
              "originalPosition": 47,
              "body": "```suggestion\r\n  transmission opportunities or battery life. In some cases,\r\n```",
              "createdAt": "2023-01-24T18:22:02Z",
              "updatedAt": "2023-01-24T18:22:17Z"
            },
            {
              "originalPosition": 48,
              "body": "```suggestion\r\nconsumption of link resources can also impact other users that share the link or\r\n```",
              "createdAt": "2023-01-24T18:22:09Z",
              "updatedAt": "2023-01-24T18:22:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5LmC_2",
          "commit": {
            "abbreviatedOid": "38af094"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-24T20:43:41Z",
          "updatedAt": "2023-01-24T20:43:42Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "```suggestion\r\ninformative:\r\n```",
              "createdAt": "2023-01-24T20:43:41Z",
              "updatedAt": "2023-01-24T20:43:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5LmHKB",
          "commit": {
            "abbreviatedOid": "a9434e5"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-01-24T20:54:49Z",
          "updatedAt": "2023-01-24T20:54:49Z",
          "comments": []
        },
        {
          "id": "PRR_kwDODddxTs5N2AqF",
          "commit": {
            "abbreviatedOid": "a9434e5"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-20T15:30:35Z",
          "updatedAt": "2023-02-20T15:30:36Z",
          "comments": [
            {
              "originalPosition": 49,
              "body": "```suggestion\r\n  transmission opportunities or battery life, as well as transmission opportunities available\r\n  to other flows sharing the same link.\r\n```",
              "createdAt": "2023-02-20T15:30:35Z",
              "updatedAt": "2023-02-20T15:30:36Z"
            }
          ]
        }
      ]
    },
    {
      "number": 129,
      "id": "PR_kwDODddxTs5HpleI",
      "title": "Clarify min_ack_delay",
      "url": "https://github.com/quicwg/ack-frequency/pull/129",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "fixes #126 and provides some further clarification as it was easy to wrongly read to which endpoint the min_ack_delay applies to. I guess to avoid confusing this could be even called something like capable_min_ack_delay but not sure if that makes a bug difference.",
      "createdAt": "2023-01-18T18:20:06Z",
      "updatedAt": "2023-01-24T18:09:32Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "547716fbe31a870f267f89adc1c6d4d033942024",
      "headRepository": "mirjak/ack-frequency",
      "headRefName": "patch-1",
      "headRefOid": "d7349a67e7c78268432719b9eedcf9dd86c663de",
      "closedAt": "2023-01-24T18:09:31Z",
      "mergedAt": "2023-01-24T18:09:31Z",
      "mergedBy": "ianswett",
      "mergeCommit": {
        "oid": "4ca0677232614654d7127da7a8edb5bcad738ac6"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs5Lhypy",
          "commit": {
            "abbreviatedOid": "3c95d9f"
          },
          "author": "gorryfair",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "Looks good, with a few minor textual improvements suggested.",
          "createdAt": "2023-01-24T09:46:45Z",
          "updatedAt": "2023-01-24T09:49:13Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "Typo: /value/",
              "createdAt": "2023-01-24T09:46:46Z",
              "updatedAt": "2023-01-24T09:49:13Z"
            },
            {
              "originalPosition": 7,
              "body": "/limit/ ? I suggest /value/\r\n... OR if you prefer /this value could be limited by .../",
              "createdAt": "2023-01-24T09:47:35Z",
              "updatedAt": "2023-01-24T09:49:13Z"
            },
            {
              "originalPosition": 9,
              "body": "/in the ACK_FREQUENCY frame/of an ACK_FREQUENCY frame/ to avoid many /in/.",
              "createdAt": "2023-01-24T09:48:25Z",
              "updatedAt": "2023-01-24T09:49:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5LiGFH",
          "commit": {
            "abbreviatedOid": "3c95d9f"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-24T10:37:09Z",
          "updatedAt": "2023-01-24T10:37:10Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\n  microseconds by which the endpoint that is sending this value is able to\r\n```",
              "createdAt": "2023-01-24T10:37:09Z",
              "updatedAt": "2023-01-24T10:37:10Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5LiGWn",
          "commit": {
            "abbreviatedOid": "eefae7d"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-24T10:37:54Z",
          "updatedAt": "2023-01-24T10:37:54Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "```suggestion\r\n  suitable value in the Request Max Ack Delay field of the ACK_FREQUENCY frame.\r\n```",
              "createdAt": "2023-01-24T10:37:54Z",
              "updatedAt": "2023-01-24T10:37:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5LlCxz",
          "commit": {
            "abbreviatedOid": "f4f43de"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-24T18:07:34Z",
          "updatedAt": "2023-01-24T18:07:35Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "```suggestion\r\n  or timer granularity. 'min_ack_delay' is used by the peer to avoid requesting\r\n  too small a value in the Request Max Ack Delay field of the ACK_FREQUENCY\r\n  frame.\r\n```",
              "createdAt": "2023-01-24T18:07:34Z",
              "updatedAt": "2023-01-24T18:08:45Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5LlDSv",
          "commit": {
            "abbreviatedOid": "d7349a6"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-01-24T18:09:07Z",
          "updatedAt": "2023-01-24T18:09:07Z",
          "comments": []
        }
      ]
    },
    {
      "number": 130,
      "id": "PR_kwDODddxTs5Hprkv",
      "title": "Add IANA considerations",
      "url": "https://github.com/quicwg/ack-frequency/pull/130",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "ready-to-merge"
      ],
      "body": "",
      "createdAt": "2023-01-18T18:34:15Z",
      "updatedAt": "2023-01-24T17:53:51Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "547716fbe31a870f267f89adc1c6d4d033942024",
      "headRepository": "mirjak/ack-frequency",
      "headRefName": "patch-2",
      "headRefOid": "222abec5121c0a25207c403012c473e0fc3a3c7f",
      "closedAt": "2023-01-24T17:53:51Z",
      "mergedAt": "2023-01-24T17:53:51Z",
      "mergedBy": "ianswett",
      "mergeCommit": {
        "oid": "7ea925046ca05e7bb794d8e577a9f53c666313f5"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs5Kv_kN",
          "commit": {
            "abbreviatedOid": "8525824"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-18T18:36:41Z",
          "updatedAt": "2023-01-18T18:36:42Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "```suggestion\r\nby IANQ in the respective \"QUIC Protocol\" registries under\r\n```",
              "createdAt": "2023-01-18T18:36:41Z",
              "updatedAt": "2023-01-18T18:36:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5KwAtT",
          "commit": {
            "abbreviatedOid": "20e67bf"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-18T18:39:46Z",
          "updatedAt": "2023-01-18T18:39:47Z",
          "comments": [
            {
              "originalPosition": 34,
              "body": "```suggestion\r\nValue                        | Parameter Name.   | Specification\r\n-----------------------------|-------------------|-----------------\r\n0xff03de1a                   | min_ack_delay | {{nego}}\r\n```",
              "createdAt": "2023-01-18T18:39:46Z",
              "updatedAt": "2023-01-18T18:39:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5Lk9uS",
          "commit": {
            "abbreviatedOid": "222abec"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-01-24T17:53:46Z",
          "updatedAt": "2023-01-24T17:53:46Z",
          "comments": []
        }
      ]
    },
    {
      "number": 134,
      "id": "PR_kwDODddxTs5IUZWa",
      "title": "Add reference to sec 14 of RFC9000 for PMTU probes",
      "url": "https://github.com/quicwg/ack-frequency/pull/134",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "ready-to-merge"
      ],
      "body": "fixes #104\r\n\r\noriginally created by @gorryfair in https://github.com/gorryfair/ack-frequency/commit/57ae17167548f2f5a550b05ffc2c8d0afaa85bc3 (but not PR was created)",
      "createdAt": "2023-01-23T11:33:13Z",
      "updatedAt": "2025-02-06T13:19:41Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "547716fbe31a870f267f89adc1c6d4d033942024",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "mirjak-patch-1",
      "headRefOid": "e0a4d7b155481cc3b6beee466ae5a49d537b5bfa",
      "closedAt": "2023-01-24T17:52:25Z",
      "mergedAt": "2023-01-24T17:52:25Z",
      "mergedBy": "ianswett",
      "mergeCommit": {
        "oid": "0ab20a15dd230de7597e3e38791290009fd4abdf"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs5Lh1ZJ",
          "commit": {
            "abbreviatedOid": "e0a4d7b"
          },
          "author": "gorryfair",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Looks good as a concrete example of immediately acknowledging.",
          "createdAt": "2023-01-24T09:53:19Z",
          "updatedAt": "2023-01-24T09:53:19Z",
          "comments": []
        },
        {
          "id": "PRR_kwDODddxTs5Lk9NV",
          "commit": {
            "abbreviatedOid": "e0a4d7b"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-01-24T17:52:20Z",
          "updatedAt": "2023-01-24T17:52:20Z",
          "comments": []
        }
      ]
    },
    {
      "number": 135,
      "id": "PR_kwDODddxTs5IUfGM",
      "title": "send IMMEDIATE_ACK before idle period",
      "url": "https://github.com/quicwg/ack-frequency/pull/135",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "mirjak"
      ],
      "labels": [],
      "body": "fixes #111",
      "createdAt": "2023-01-23T11:56:32Z",
      "updatedAt": "2025-02-06T13:19:40Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "547716fbe31a870f267f89adc1c6d4d033942024",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "mirjak-patch-2",
      "headRefOid": "cf9ce73d5013d7f70dbb3902f6c695ea27363711",
      "closedAt": "2023-01-24T18:04:04Z",
      "mergedAt": "2023-01-24T18:04:04Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "3a229a2d6a0576f2ce6b5ad8a0f34f02889feb2e"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs5LbYLV",
          "commit": {
            "abbreviatedOid": "b6db754"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-23T12:02:34Z",
          "updatedAt": "2023-01-23T12:02:34Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\ncongestion window and an estimated RTT, respectively. If the sender is\r\n```",
              "createdAt": "2023-01-23T12:02:34Z",
              "updatedAt": "2023-01-23T12:02:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5Lk_3I",
          "commit": {
            "abbreviatedOid": "e84777e"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-24T17:58:53Z",
          "updatedAt": "2023-01-24T17:58:54Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "```suggestion\r\nsent, a sender might consider to send an IMMEDIATE_ACK frame with the last data\r\n```",
              "createdAt": "2023-01-24T17:58:53Z",
              "updatedAt": "2023-01-24T17:58:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5LlAHr",
          "commit": {
            "abbreviatedOid": "63ebdee"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-24T17:59:39Z",
          "updatedAt": "2023-01-24T17:59:39Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "```suggestion\r\nunnecessarily before idle periods. Therefore if no further data is buffered to be\r\n```",
              "createdAt": "2023-01-24T17:59:39Z",
              "updatedAt": "2023-01-24T17:59:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5LlAtT",
          "commit": {
            "abbreviatedOid": "c8a4f61"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-24T18:01:24Z",
          "updatedAt": "2023-01-24T18:01:24Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "```suggestion\r\napplication-limited, a large ack delay can delay acknowledgement information\r\nunnecessarily when entering idle periods. Therefore, if no further data is buffered to be\r\nsent, a sender can send an IMMEDIATE_ACK frame with the last data\r\npacket before an idle period to avoid waiting the for ack delay.\r\n```",
              "createdAt": "2023-01-24T18:01:24Z",
              "updatedAt": "2023-01-24T18:01:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5LlBU3",
          "commit": {
            "abbreviatedOid": "0890147"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-24T18:03:12Z",
          "updatedAt": "2023-01-24T18:03:13Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "```suggestion\r\npacket before an idle period to avoid waiting for the ack delay.\r\n```",
              "createdAt": "2023-01-24T18:03:13Z",
              "updatedAt": "2023-01-24T18:03:13Z"
            }
          ]
        }
      ]
    },
    {
      "number": 136,
      "id": "PR_kwDODddxTs5IU9vR",
      "title": "Clarify retransmission of frames",
      "url": "https://github.com/quicwg/ack-frequency/pull/136",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "mirjak"
      ],
      "labels": [],
      "body": "fixes #122",
      "createdAt": "2023-01-23T13:31:29Z",
      "updatedAt": "2025-02-06T13:19:37Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "547716fbe31a870f267f89adc1c6d4d033942024",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "mirjak-patch-3",
      "headRefOid": "093d48a012e265e9ec44772ac9bfd58109fe1e57",
      "closedAt": "2023-02-13T16:16:40Z",
      "mergedAt": "2023-02-13T16:16:39Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "003e01f04a4013d8e792a1679b23157aa1efa2a3"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs5LcHUR",
          "commit": {
            "abbreviatedOid": "87c2b59"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-23T14:07:00Z",
          "updatedAt": "2023-01-23T14:07:01Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "```suggestion\r\nBy definition IMMEDIATE_ACK frames are ack-eliciting.\r\n```",
              "createdAt": "2023-01-23T14:07:00Z",
              "updatedAt": "2023-01-23T14:07:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5LfrHb",
          "commit": {
            "abbreviatedOid": "9973af3"
          },
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-23T23:33:32Z",
          "updatedAt": "2023-01-23T23:34:23Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "I am not sure if we want a SHOULD here.\r\n\r\nDesign of ACK_FREQUENCY follows that of MAX frames defined in RFC 9000; when the MAX frames are deemed lost, we say that the sender to send update values but also note that they might retransmit old values, without using an upper-case verb. See [RFC 9000 section 13.3](https://quicwg.org/base-drafts/rfc9000.html#name-retransmission-of-informati).\r\n\r\nIf we want to be clear, it might be a good idea to add a link to that section.",
              "createdAt": "2023-01-23T23:33:32Z",
              "updatedAt": "2023-01-23T23:34:23Z"
            },
            {
              "originalPosition": 18,
              "body": ":+1: to clarifying this.",
              "createdAt": "2023-01-23T23:34:01Z",
              "updatedAt": "2023-01-23T23:34:23Z"
            },
            {
              "originalPosition": 30,
              "body": "Please see my comment above regarding retransmission suggestions.",
              "createdAt": "2023-01-23T23:34:20Z",
              "updatedAt": "2023-01-23T23:34:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5LgEtd",
          "commit": {
            "abbreviatedOid": "9973af3"
          },
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-24T01:59:27Z",
          "updatedAt": "2023-01-24T01:59:27Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "```suggestion\r\nACK_FREQUENCY frames are ack-eliciting. When an ACK_FREQUENCY frame is lost,\r\na sender is encouraged to send a new ACK_FREQUENCY frame with a larger Sequence\r\nNumber value and potentially updated information. However, it is not forbidden to retransmit\r\nframes being lost as-is; see Section 13.3 of {{QUIC-TRANSPORT}.\r\n```",
              "createdAt": "2023-01-24T01:59:27Z",
              "updatedAt": "2023-01-24T01:59:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5Moe0M",
          "commit": {
            "abbreviatedOid": "b96e793"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-06T17:36:02Z",
          "updatedAt": "2023-02-06T17:36:02Z",
          "comments": [
            {
              "originalPosition": 30,
              "body": "```suggestion\r\nIMMEDIATE_ACK frames do not need to be retransmitted. If loss is detected, based\r\non the receipt of an ACK frames, there is usually no need to immediately request another ack.\r\nIf data, that was previously send together with an IMMEDIATE_ACK frame, is detected as lost\r\nand retransmitted, that does not necessarily mean that the retransmission also has to be\r\nsend together with an IMMEDIATE_ACK frame. \r\n```\r\nThis proposed new text now doesn't provide any guidance if retransmitted data that was sent with an IMMEDIATE_ACK frame, should be retransmitted with an IMMEDIATE_ACK frame not. I guess there are cases where it actually makes sense to do so, e.g. if the last packet of a transmission is lost. However, if you always just retransmit the whole datagram that can also lead to unnecessary additional immediate ACKs, so I think should by default be rather not recommended. However, I'm actually not sure what really the right advise it. So either we don't say more than now proposed in this commit or we maybe need to add a bit more discussion...",
              "createdAt": "2023-02-06T17:36:02Z",
              "updatedAt": "2023-02-13T15:52:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5MoshZ",
          "commit": {
            "abbreviatedOid": "b96e793"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-06T17:59:26Z",
          "updatedAt": "2023-02-06T17:59:27Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "```suggestion\r\nACK_FREQUENCY frames are ack-eliciting. If an ACK_FREQUENCY frame is detected as lost\r\nand no ACK_FREQUENCY frame with a larger Sequence Number value has been sent, the sender \r\nis encouraged to send an ACK_FREQUENCY frame, usually with a larger Sequence\r\nNumber value and potentially updated information. If an ACK_FREQUENCY frame with a\r\nlarger Sequence Number value has already been sent, the is no need for a retransmission. \r\nHowever, it is not forbidden to retransmit the lost frame (see Section 13.3 of {{QUIC-TRANSPORT}),\r\nas the receiver will ignore duplicate or out-of-order ACK_FREQUENCY frames\r\nbased on the Sequence Number.\r\n```",
              "createdAt": "2023-02-06T17:59:26Z",
              "updatedAt": "2023-02-06T17:59:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5NPrsW",
          "commit": {
            "abbreviatedOid": "b96e793"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-13T15:58:20Z",
          "updatedAt": "2023-02-13T15:58:21Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "```suggestion\r\nIMMEDIATE_ACK frames do not need to be retransmitted. If loss is detected, based\r\n```",
              "createdAt": "2023-02-13T15:58:20Z",
              "updatedAt": "2023-02-13T15:58:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5NPs83",
          "commit": {
            "abbreviatedOid": "e448b94"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-13T16:00:50Z",
          "updatedAt": "2023-02-13T16:00:51Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "```suggestion\r\na sender is encouraged to send a new ACK_FREQUENCY frame unless another ACK_FREQUENCY\r\nframe is still in flight, to ensure the new parameters are received.  If there are updated ack frequency parameters to transmit, the ACK_FREQUENCY frame contains a larger Sequence\r\nNumber value as well as the updated parameters.\r\nHowever, it is not forbidden to retransmit the lost frame; see Section 13.3 of {{QUIC-TRANSPORT}.\r\n```",
              "createdAt": "2023-02-13T16:00:50Z",
              "updatedAt": "2023-02-13T16:08:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5NPw1v",
          "commit": {
            "abbreviatedOid": "e448b94"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-13T16:09:15Z",
          "updatedAt": "2023-02-13T16:09:15Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "```suggestion\r\nis encouraged to send an ACK_FREQUENCY frame, unless an ACK_FREQUENCY frame with a\r\nlarger Sequence Number value has already been sent.\r\nHowever, it is not forbidden to retransmit the lost frame (see Section 13.3 of {{QUIC-TRANSPORT}),\r\nas the receiver will ignore duplicate or out-of-order ACK_FREQUENCY frames\r\nbased on the Sequence Number.\r\n```",
              "createdAt": "2023-02-13T16:09:15Z",
              "updatedAt": "2023-02-13T16:09:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5NPyrc",
          "commit": {
            "abbreviatedOid": "29c099b"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-13T16:13:18Z",
          "updatedAt": "2023-02-13T16:13:18Z",
          "comments": [
            {
              "originalPosition": 31,
              "body": "```suggestion\r\ntime-out, the sender might send the retransmitted data again together with an\r\n```",
              "createdAt": "2023-02-13T16:13:18Z",
              "updatedAt": "2023-02-13T16:13:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5NPzVs",
          "commit": {
            "abbreviatedOid": "29c099b"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-13T16:14:40Z",
          "updatedAt": "2023-02-13T16:14:41Z",
          "comments": [
            {
              "originalPosition": 32,
              "body": "```suggestion\r\nIMMEDIATE_ACK frames do not need to be retransmitted.\r\n```",
              "createdAt": "2023-02-13T16:14:40Z",
              "updatedAt": "2023-02-13T16:14:41Z"
            }
          ]
        }
      ]
    },
    {
      "number": 137,
      "id": "PR_kwDODddxTs5IVOcG",
      "title": "Clarify use with PING frames",
      "url": "https://github.com/quicwg/ack-frequency/pull/137",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "fixes #133",
      "createdAt": "2023-01-23T14:19:23Z",
      "updatedAt": "2025-02-06T13:19:40Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "547716fbe31a870f267f89adc1c6d4d033942024",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "mirjak-patch-4",
      "headRefOid": "8a3c8e0b5e0d8c6ca235b0b924cc9609f9f87587",
      "closedAt": "2023-01-24T17:52:54Z",
      "mergedAt": "2023-01-24T17:52:54Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "cc3c58dd6fb8af8f34d314ae06608470beafe580"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs5LfsHX",
          "commit": {
            "abbreviatedOid": "51be3d7"
          },
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-23T23:39:25Z",
          "updatedAt": "2023-01-23T23:43:23Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "```suggestion\r\nit can be sent as an alternative of a PING frame\r\n(Section 19.2 of {{QUIC-TRANSPORT}}) if a sender wants an immediate RTT\r\nmeasurement or if a sender wants to establish receiver liveness as quickly\r\nas possible. PING frames are ack-eliciting but\r\nthe receiver might not immediately send an ACK based\r\non it local ACK strategy.\r\n```\r\n\r\nMaybe state that IMMEDIATE_ACK frames can be used as an alternative? I think that was the point of @neild.",
              "createdAt": "2023-01-23T23:39:25Z",
              "updatedAt": "2023-01-23T23:43:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5Lk5kc",
          "commit": {
            "abbreviatedOid": "51be3d7"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-24T17:41:48Z",
          "updatedAt": "2023-01-24T17:41:49Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "```suggestion\r\nif a sender wants an immediate RTT\r\n```",
              "createdAt": "2023-01-24T17:41:48Z",
              "updatedAt": "2023-01-24T17:41:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5Lk7gl",
          "commit": {
            "abbreviatedOid": "d814b43"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-24T17:47:26Z",
          "updatedAt": "2023-01-24T17:47:26Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "```suggestion\r\nas possible. PING frames (Section 19.2 of {{QUIC-TRANSPORT}}) are ack-eliciting but if a PING frame is sent without\r\n```",
              "createdAt": "2023-01-24T17:47:26Z",
              "updatedAt": "2023-01-24T17:47:26Z"
            }
          ]
        }
      ]
    },
    {
      "number": 139,
      "id": "PR_kwDODddxTs5Ic37z",
      "title": "Text for security considerations",
      "url": "https://github.com/quicwg/ack-frequency/pull/139",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "fixes #125 ",
      "createdAt": "2023-01-24T18:21:05Z",
      "updatedAt": "2025-02-06T13:19:34Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "4ca0677232614654d7127da7a8edb5bcad738ac6",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "mirjak-patch-5",
      "headRefOid": "db0e2ffa57ed1ddda279efa63da1eb7362807f29",
      "closedAt": "2023-02-20T19:34:00Z",
      "mergedAt": "2023-02-20T19:34:00Z",
      "mergedBy": "janaiyengar",
      "mergeCommit": {
        "oid": "501d91bb04119b83ab55e33233773ea3c827e24e"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs5LmeUg",
          "commit": {
            "abbreviatedOid": "7cc24c1"
          },
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-24T21:40:54Z",
          "updatedAt": "2023-01-24T21:40:58Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "It's a MUST earlier in the text though:\r\n> On receiving an ACK_FREQUENCY frame and updating its recorded max_ack_delay and Ack-Eliciting Threshold values ({{multiple-frames}}), the endpoint MUST send an acknowledgement when one of the following conditions are met:\r\n> \r\n> * Since the last acknowledgement was sent, the number of received ack-eliciting packets is greater than or equal to the recorded Ack-Eliciting Threshold.\r\n\r\nDo we need to weaken that language a bit to allow the receiver more flexibility?",
              "createdAt": "2023-01-24T21:40:54Z",
              "updatedAt": "2023-01-24T21:40:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5LydTr",
          "commit": {
            "abbreviatedOid": "7cc24c1"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-01-26T17:49:59Z",
          "updatedAt": "2023-01-26T17:49:59Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "I was wondering about this as well. I will open a separate issue!",
              "createdAt": "2023-01-26T17:49:59Z",
              "updatedAt": "2023-01-26T17:49:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5MngLS",
          "commit": {
            "abbreviatedOid": "7cc24c1"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-06T15:21:23Z",
          "updatedAt": "2023-02-06T15:21:24Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "Issue #144 ",
              "createdAt": "2023-02-06T15:21:23Z",
              "updatedAt": "2023-02-06T15:21:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5N2fe4",
          "commit": {
            "abbreviatedOid": "7cc24c1"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-20T16:56:16Z",
          "updatedAt": "2023-02-20T16:56:17Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "```suggestion\r\nreceivers to consume all available resources sending acknowledgements,\r\nthus causing a denial-of-service (DoS) attack. However, a sender has control of\r\n```",
              "createdAt": "2023-02-20T16:56:16Z",
              "updatedAt": "2023-02-20T16:56:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5N2-O7",
          "commit": {
            "abbreviatedOid": "d0de0d2"
          },
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-02-20T19:27:32Z",
          "updatedAt": "2023-02-20T19:27:32Z",
          "comments": []
        },
        {
          "id": "PRR_kwDODddxTs5N2-bK",
          "commit": {
            "abbreviatedOid": "d0de0d2"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-20T19:28:48Z",
          "updatedAt": "2023-02-20T19:28:48Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "```suggestion\r\ndata is received. Second, ACK_FREQUENCY and IMMEDIATE_ACK frames can only request an increase in\r\nthe acknowledgment rate, but cannot force it.\r\n```",
              "createdAt": "2023-02-20T19:28:48Z",
              "updatedAt": "2023-02-20T19:28:48Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5N2-gP",
          "commit": {
            "abbreviatedOid": "d0de0d2"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-20T19:29:19Z",
          "updatedAt": "2023-02-20T19:29:20Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "```suggestion\r\ndata receiver to acknowledge more frequently than its available resources\r\n```",
              "createdAt": "2023-02-20T19:29:19Z",
              "updatedAt": "2023-02-20T19:29:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5N2_Is",
          "commit": {
            "abbreviatedOid": "db0e2ff"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-02-20T19:33:39Z",
          "updatedAt": "2023-02-20T19:33:39Z",
          "comments": []
        },
        {
          "id": "PRR_kwDODddxTs5N2_Ix",
          "commit": {
            "abbreviatedOid": "db0e2ff"
          },
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-02-20T19:33:39Z",
          "updatedAt": "2023-02-20T19:33:39Z",
          "comments": []
        }
      ]
    },
    {
      "number": 141,
      "id": "PR_kwDODddxTs5IdgAM",
      "title": "ECN references",
      "url": "https://github.com/quicwg/ack-frequency/pull/141",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-01-24T20:50:30Z",
      "updatedAt": "2025-02-06T13:19:38Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "89af2b887e96d5559eadf2f6a2c7a95d586c54b9",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "mirjak-patch-6",
      "headRefOid": "460ead8a40b0afb29ae95c3bfa0d43bc43913a36",
      "closedAt": "2023-02-06T14:48:18Z",
      "mergedAt": "2023-02-06T14:48:18Z",
      "mergedBy": "ianswett",
      "mergeCommit": {
        "oid": "10cda18c47a44f224d7f279fd3b9eeb83f2774bd"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs5MnNSr",
          "commit": {
            "abbreviatedOid": "460ead8"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-02-06T14:47:55Z",
          "updatedAt": "2023-02-06T14:47:55Z",
          "comments": []
        }
      ]
    },
    {
      "number": 143,
      "id": "PR_kwDODddxTs5Iia4U",
      "title": "Explain how to use the Reordering threshold",
      "url": "https://github.com/quicwg/ack-frequency/pull/143",
      "state": "CLOSED",
      "author": "mirjak",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [
        "ianswett"
      ],
      "labels": [],
      "body": "fixes #140\r\n\r\nPrevious attempts to describe the use of the Reordering threshold, tried to specify a continuous range where this condition would be true (e.g. if gaps are in the  range [Last_Acked, Last_Received - Reorder_Threshold]. This means that you would keep sending ACKs for each packet as long as the re-ordering/loss event is on-going. I don't think this should be the intention. Instead my understanding would be that you send one additional ack and then go back to your usual ack strategy. This is what this PR tries to explain.\r\n\r\nThis is also inline with the behaviour in RFC9000:\r\n> when the packet has a packet number larger than the highest-numbered ack-eliciting packet that has been received and there are missing packets between that packet and this packet.\r\n\r\nThis mean in RFC9000 you send an ACK when a gap is detected but as soon as you have send the ACK, the highest-numbered ack-eliciting packet is after the gap and you don't send any additional ACKs for this gap.\r\n\r\nI think any other behaviour would actually be problematic as the sender can send packets with gaps in the packet number space without a loss, which means the gap would also never be closed.",
      "createdAt": "2023-01-25T18:45:39Z",
      "updatedAt": "2025-02-06T13:19:30Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "89af2b887e96d5559eadf2f6a2c7a95d586c54b9",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "mirjak-patch-7",
      "headRefOid": "a92ac686a8a62232f41b40465534b1142b35242d",
      "closedAt": "2023-02-27T16:39:05Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs5OIREO",
          "commit": {
            "abbreviatedOid": "3ed4beb"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-23T08:22:09Z",
          "updatedAt": "2023-02-23T08:22:10Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "```suggestion\r\nMore concretely, this means if a gap in the packet number is\r\n```",
              "createdAt": "2023-02-23T08:22:09Z",
              "updatedAt": "2023-02-23T08:22:10Z"
            }
          ]
        }
      ]
    },
    {
      "number": 145,
      "id": "PR_kwDODddxTs5IrGey",
      "title": "Clarify default reordering threshold and provide further recommendation",
      "url": "https://github.com/quicwg/ack-frequency/pull/145",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "design"
      ],
      "body": "fixes #142",
      "createdAt": "2023-01-27T12:34:40Z",
      "updatedAt": "2025-02-06T13:19:38Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "89af2b887e96d5559eadf2f6a2c7a95d586c54b9",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "mirjak-patch-8",
      "headRefOid": "9cac40d380c4564805bf36b9b43ec21c7cbc11e5",
      "closedAt": "2023-02-06T15:17:29Z",
      "mergedAt": "2023-02-06T15:17:29Z",
      "mergedBy": "ianswett",
      "mergeCommit": {
        "oid": "f769755a3145dd69566d4578756018d7efa3f297"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs5MnePg",
          "commit": {
            "abbreviatedOid": "9cac40d"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "This PR adds a SHOULD NOT, but it seems sensible.",
          "createdAt": "2023-02-06T15:17:21Z",
          "updatedAt": "2023-02-06T15:17:21Z",
          "comments": []
        }
      ]
    },
    {
      "number": 146,
      "id": "PR_kwDODddxTs5JWn8d",
      "title": "Remove 'bundle'",
      "url": "https://github.com/quicwg/ack-frequency/pull/146",
      "state": "MERGED",
      "author": "ianswett",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "Also moves text about batch processing of packets into an existing section.\r\n\r\nFixes #132",
      "createdAt": "2023-02-06T16:00:11Z",
      "updatedAt": "2025-02-06T13:21:11Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "f769755a3145dd69566d4578756018d7efa3f297",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "ianswett-remove-bundle",
      "headRefOid": "aa6e3f30b24e9cf05d884c95dfc5d36cd65c903a",
      "closedAt": "2023-02-06T22:37:44Z",
      "mergedAt": "2023-02-06T22:37:44Z",
      "mergedBy": "ianswett",
      "mergeCommit": {
        "oid": "069c64673887e6b333cfc851111e0eaa05d6c3b3"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs5MoRMX",
          "commit": {
            "abbreviatedOid": "aa6e3f3"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-02-06T17:01:17Z",
          "updatedAt": "2023-02-06T17:01:17Z",
          "comments": []
        }
      ]
    },
    {
      "number": 148,
      "id": "PR_kwDODddxTs5JYZEB",
      "title": "Remove most of the MUSTs from multiple-frames section",
      "url": "https://github.com/quicwg/ack-frequency/pull/148",
      "state": "CLOSED",
      "author": "mirjak",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "fixes #131 \r\n\r\nI guess this text could be further simplified but this PR is mainly to trying to address \"invalid\" MUSTs as well as repeated MUSTs (about the statement that is normatively specified in the section about sending acks and only should be normatively stated there)",
      "createdAt": "2023-02-06T22:01:41Z",
      "updatedAt": "2025-02-06T13:19:36Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "f769755a3145dd69566d4578756018d7efa3f297",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "mirjak-patch-9",
      "headRefOid": "892b7baaf137bb8600f455346c804e28aff49a73",
      "closedAt": "2023-02-20T17:26:20Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "See alternative much shorter proposal in #149 ",
          "createdAt": "2023-02-13T16:49:12Z",
          "updatedAt": "2023-02-13T16:49:12Z"
        },
        {
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "body": "Closed by #149 ",
          "createdAt": "2023-02-20T17:26:20Z",
          "updatedAt": "2023-02-20T17:26:20Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs5NP7mR",
          "commit": {
            "abbreviatedOid": "cda3860"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-13T16:32:50Z",
          "updatedAt": "2023-02-13T16:32:51Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "```suggestion\r\nIn this case it needs to check the Sequence Number and only process the other fields\r\nif the Sequence Number is larger than the last processed Sequence Number.\r\nIn detail this means the following process is applied:\r\n\r\nOn the first received ACK_FREQUENCY frame in a connection, an endpoint records\r\nall values from the frame. The sequence number of the this first frame\r\nis recorded as the largest seen sequence number. From now on, the Ack-Eliciting\r\nThreshold and Request Max Ack Delay values are used for delaying\r\n```",
              "createdAt": "2023-02-13T16:32:50Z",
              "updatedAt": "2023-02-13T16:32:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5NP7vE",
          "commit": {
            "abbreviatedOid": "11ffd16"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-13T16:33:09Z",
          "updatedAt": "2023-02-13T16:33:09Z",
          "comments": [
            {
              "originalPosition": 35,
              "body": "```suggestion\r\n  in this frame, including the recorded Sequence Number.\r\n```",
              "createdAt": "2023-02-13T16:33:09Z",
              "updatedAt": "2023-02-13T16:33:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5NP8Ge",
          "commit": {
            "abbreviatedOid": "b0f6850"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-13T16:34:00Z",
          "updatedAt": "2023-02-13T16:34:01Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "```suggestion\r\nIn this case it needs to only process the other fields\r\n```",
              "createdAt": "2023-02-13T16:34:00Z",
              "updatedAt": "2023-02-13T16:34:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5NP9c1",
          "commit": {
            "abbreviatedOid": "5694d0d"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-13T16:37:11Z",
          "updatedAt": "2023-02-13T16:37:11Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "```suggestion\r\n- If the frame's Sequence Number is not greater than the largest one seen so\r\n```",
              "createdAt": "2023-02-13T16:37:11Z",
              "updatedAt": "2023-02-13T16:37:11Z"
            }
          ]
        }
      ]
    },
    {
      "number": 149,
      "id": "PR_kwDODddxTs5J3kgr",
      "title": "Alternative PR to add MUSTs in multiple-frame section",
      "url": "https://github.com/quicwg/ack-frequency/pull/149",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "design"
      ],
      "body": "This PR makes the text shorter and tightens the normative requirements around handling of multple ACK_FREQUENCY frames. This PR makes one normative change: Sequence Number value is no longer required to start at zero.",
      "createdAt": "2023-02-13T16:46:00Z",
      "updatedAt": "2025-02-06T13:19:35Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "003e01f04a4013d8e792a1679b23157aa1efa2a3",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "mirjak-patch-10",
      "headRefOid": "7d2ede7fd06f04cc34e917671a701feccfdcbc4b",
      "closedAt": "2023-02-20T17:24:10Z",
      "mergedAt": "2023-02-20T17:24:10Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "c5e5f793cbb83086ba0736c5a9102e8afa9c8d5e"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs5NQB8w",
          "commit": {
            "abbreviatedOid": "72c415f"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-13T16:47:48Z",
          "updatedAt": "2023-02-13T16:47:49Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "```suggestion\r\nThe endpoint MUST ignore the frame if the Sequence Number is smaller than the last processed Sequence Number.\r\n```",
              "createdAt": "2023-02-13T16:47:48Z",
              "updatedAt": "2023-02-13T16:47:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5NQCHk",
          "commit": {
            "abbreviatedOid": "8b91364"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-13T16:48:11Z",
          "updatedAt": "2023-02-13T16:48:12Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "To make it even shorter we could just remove the last sentence here or use this sentence instead:\r\n```suggestion\r\nThe endpoint MUST only process the other fields\r\n if the Sequence Number is larger than the last processed Sequence Number.\r\n```\r\nHowever, \"MUST only\" is probably not great to use for normative requirements....",
              "createdAt": "2023-02-13T16:48:12Z",
              "updatedAt": "2023-02-13T16:48:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5NQC0X",
          "commit": {
            "abbreviatedOid": "8b91364"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-13T16:49:51Z",
          "updatedAt": "2023-02-13T16:49:51Z",
          "comments": [
            {
              "originalPosition": 25,
              "body": "```suggestion\r\nAn endpoint might receive an ACK_FREQUENCY frame out of order\r\n(see {{Section 13.3 of QUIC-TRANSPORT}}).\r\n```",
              "createdAt": "2023-02-13T16:49:51Z",
              "updatedAt": "2023-02-13T16:49:52Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5NQIBN",
          "commit": {
            "abbreviatedOid": "beab585"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-13T16:57:59Z",
          "updatedAt": "2023-02-13T16:57:59Z",
          "comments": [
            {
              "originalPosition": 26,
              "body": "```suggestion\r\nThe endpoint MUST ignore the frame if the Sequence Number is not larger than the last processed Sequence Number.\r\n```",
              "createdAt": "2023-02-13T16:57:59Z",
              "updatedAt": "2023-02-13T16:57:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5NQJfq",
          "commit": {
            "abbreviatedOid": "beab585"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-13T17:00:20Z",
          "updatedAt": "2023-02-13T17:00:21Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "```suggestion\r\nIf the Sequence number is larger, the endpoint MUST update its state with values received\r\n```",
              "createdAt": "2023-02-13T17:00:20Z",
              "updatedAt": "2023-02-13T17:00:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5NQj0i",
          "commit": {
            "abbreviatedOid": "beab585"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-13T18:02:23Z",
          "updatedAt": "2023-02-13T18:02:24Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "How about \"MUST process the other fields if and only if the Sequence Number is larger than the last and largest processed Sequence Number.\"",
              "createdAt": "2023-02-13T18:02:23Z",
              "updatedAt": "2023-02-13T18:02:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5N2S_1",
          "commit": {
            "abbreviatedOid": "beab585"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-20T16:19:18Z",
          "updatedAt": "2023-02-20T16:19:19Z",
          "comments": [
            {
              "originalPosition": 2,
              "body": "```suggestion\r\nincreasing value thereafter.  The sequence number allows reordered ACK_FREQUENCY frames to be received and processed, see {{Section 13.3 of QUIC-TRANSPORT}}.\r\n```",
              "createdAt": "2023-02-20T16:19:18Z",
              "updatedAt": "2023-02-20T16:19:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5N2ZEZ",
          "commit": {
            "abbreviatedOid": "beab585"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-20T16:38:03Z",
          "updatedAt": "2023-02-20T16:38:04Z",
          "comments": [
            {
              "originalPosition": 25,
              "body": "```suggestion\r\n```",
              "createdAt": "2023-02-20T16:38:03Z",
              "updatedAt": "2023-02-20T16:38:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5N2hOT",
          "commit": {
            "abbreviatedOid": "7fde192"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-20T17:02:36Z",
          "updatedAt": "2023-02-20T17:02:37Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "```suggestion\r\nconnection. The Sequence Number field allows reordered ACK_FREQUENCY frames\r\nto be received and processed in the intended order, see {{Section 13.3 of QUIC-TRANSPORT}}. A sending\r\n```",
              "createdAt": "2023-02-20T17:02:36Z",
              "updatedAt": "2023-02-20T17:02:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5N2h9n",
          "commit": {
            "abbreviatedOid": "ffca73c"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-20T17:05:29Z",
          "updatedAt": "2023-02-20T17:05:29Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "```suggestion\r\nvalue is not greater than the largest processed thus far.\r\n```",
              "createdAt": "2023-02-20T17:05:29Z",
              "updatedAt": "2023-02-20T17:05:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5N2kMZ",
          "commit": {
            "abbreviatedOid": "35d0248"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-02-20T17:13:48Z",
          "updatedAt": "2023-02-20T17:13:48Z",
          "comments": []
        },
        {
          "id": "PRR_kwDODddxTs5N2auz",
          "commit": {
            "abbreviatedOid": "c78b791"
          },
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-02-20T16:43:28Z",
          "updatedAt": "2023-02-20T17:18:33Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "```suggestion\r\nThe endpoint MUST ignore the frame if a received sequence number is not larger than the last processed Sequence Number.\r\n```",
              "createdAt": "2023-02-20T16:43:28Z",
              "updatedAt": "2023-02-20T17:18:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5N2mkJ",
          "commit": {
            "abbreviatedOid": "7d2ede7"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-02-20T17:24:02Z",
          "updatedAt": "2023-02-20T17:24:02Z",
          "comments": []
        }
      ]
    },
    {
      "number": 150,
      "id": "PR_kwDODddxTs5KW9Mo",
      "title": "Add references to RFC 3449 and an Ack Frequency study",
      "url": "https://github.com/quicwg/ack-frequency/pull/150",
      "state": "MERGED",
      "author": "ianswett",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "This is an alternative to #128 with the intent of fixing #53\r\n\r\nCloses #128 ",
      "createdAt": "2023-02-20T16:03:10Z",
      "updatedAt": "2025-02-06T13:21:11Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "003e01f04a4013d8e792a1679b23157aa1efa2a3",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "ianswett-background",
      "headRefOid": "354b2ecc486a2969f5ba67f64bb60d13bef617e1",
      "closedAt": "2023-02-20T16:35:42Z",
      "mergedAt": "2023-02-20T16:35:42Z",
      "mergedBy": "ianswett",
      "mergeCommit": {
        "oid": "386158429baea1668925c22db3b7ec21721eaf57"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs5N2Xn-",
          "commit": {
            "abbreviatedOid": "354b2ec"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-02-20T16:33:29Z",
          "updatedAt": "2023-02-20T16:33:29Z",
          "comments": []
        },
        {
          "id": "PRR_kwDODddxTs5N2YVq",
          "commit": {
            "abbreviatedOid": "354b2ec"
          },
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-02-20T16:35:45Z",
          "updatedAt": "2023-02-20T16:35:45Z",
          "comments": []
        }
      ]
    },
    {
      "number": 151,
      "id": "PR_kwDODddxTs5KXZrR",
      "title": "SHOULD instead of MUST use values of ACK_FREQUENCY",
      "url": "https://github.com/quicwg/ack-frequency/pull/151",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "design"
      ],
      "body": "fixes #144",
      "createdAt": "2023-02-20T17:42:00Z",
      "updatedAt": "2025-02-06T13:19:35Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "c5e5f793cbb83086ba0736c5a9102e8afa9c8d5e",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "mirjak-patch-11",
      "headRefOid": "1db624307f3817ce5fd5efd2fc10a34745b1f309",
      "closedAt": "2023-02-20T19:27:11Z",
      "mergedAt": "2023-02-20T19:27:11Z",
      "mergedBy": "janaiyengar",
      "mergeCommit": {
        "oid": "1695ed1cf4d80fc185813aba8e98e22ef24c5b95"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs5N2qtE",
          "commit": {
            "abbreviatedOid": "bab0909"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-20T17:43:55Z",
          "updatedAt": "2023-02-20T17:43:56Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\nacknowledgments. When the endpoint receives an ACK_FREQUENCY frame, it MUST\r\n```",
              "createdAt": "2023-02-20T17:43:56Z",
              "updatedAt": "2023-02-20T17:43:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5N2sg1",
          "commit": {
            "abbreviatedOid": "d05bf23"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-20T17:53:20Z",
          "updatedAt": "2023-02-20T17:53:21Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\nand `Ack-Eliciting Threshold` values ({{ack-frequency-frame}}), the endpoint sends an\r\n```",
              "createdAt": "2023-02-20T17:53:20Z",
              "updatedAt": "2023-02-20T17:53:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5N2-IA",
          "commit": {
            "abbreviatedOid": "1db6243"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-02-20T19:26:48Z",
          "updatedAt": "2023-02-20T19:26:48Z",
          "comments": []
        },
        {
          "id": "PRR_kwDODddxTs5N2-KQ",
          "commit": {
            "abbreviatedOid": "1db6243"
          },
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-02-20T19:27:01Z",
          "updatedAt": "2023-02-20T19:27:01Z",
          "comments": []
        }
      ]
    },
    {
      "number": 152,
      "id": "PR_kwDODddxTs5KXmtZ",
      "title": "Unify normative language on Reordering Threshold",
      "url": "https://github.com/quicwg/ack-frequency/pull/152",
      "state": "MERGED",
      "author": "ianswett",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "MUSTs become SHOULD to align better with ACK behavior test in RFC9000.",
      "createdAt": "2023-02-20T18:45:23Z",
      "updatedAt": "2025-02-06T13:21:12Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "c5e5f793cbb83086ba0736c5a9102e8afa9c8d5e",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "ianswett-reordering-threshold-cleanup",
      "headRefOid": "1603f7c441def1cfaa300333c3650f4a0b080b99",
      "closedAt": "2023-02-20T19:24:36Z",
      "mergedAt": "2023-02-20T19:24:36Z",
      "mergedBy": "ianswett",
      "mergeCommit": {
        "oid": "53d28d91c7ccd461d73da89daec86588586fb204"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 155,
      "id": "PR_kwDODddxTs5KjPLH",
      "title": "Rewrite 'Response to Out-of-Order Packets'",
      "url": "https://github.com/quicwg/ack-frequency/pull/155",
      "state": "MERGED",
      "author": "ianswett",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #140 and provides two simple examples\r\n\r\nWritten as an alternative to #143",
      "createdAt": "2023-02-22T20:39:09Z",
      "updatedAt": "2025-02-06T13:19:27Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "501d91bb04119b83ab55e33233773ea3c827e24e",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "ianswett-redo-reordering-threshold",
      "headRefOid": "854e2dc2d1fae1c663cfbb5e26b25ce0dd817bdb",
      "closedAt": "2023-03-01T23:44:45Z",
      "mergedAt": "2023-03-01T23:44:45Z",
      "mergedBy": "ianswett",
      "mergeCommit": {
        "oid": "b1c8f6db9cb65f57dc1c5d951a7b57025d967119"
      },
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This PR still does not clarify if the re-ordering threshold only sends one additional ACK (and only if the there was no earlier ACK send because of other thresholds or timers) or if the intention is to frequently send ACK as long as the re-ordering exists. I believe the former would be in line with RFC9000. Let discuss this first in issue #140 and then make sure this is clear in the PR.",
          "createdAt": "2023-02-23T08:27:38Z",
          "updatedAt": "2023-02-23T08:27:38Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "The intent is to send at most one extra ACK for each missing packet, but let me know if I've made a mistake.",
          "createdAt": "2023-02-23T21:40:47Z",
          "updatedAt": "2023-02-23T21:40:47Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "I just added another example for a reordering threshold of 5 in case that helps clarify.",
          "createdAt": "2023-02-23T21:48:01Z",
          "updatedAt": "2023-02-23T21:48:01Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs5OGmrY",
          "commit": {
            "abbreviatedOid": "d680b61"
          },
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-02-22T22:13:16Z",
          "updatedAt": "2023-02-22T22:17:00Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\npacket. This extension modifies that behavior when an ACK_FREQUENCY frame with\r\n```",
              "createdAt": "2023-02-22T22:13:16Z",
              "updatedAt": "2023-02-22T22:17:00Z"
            },
            {
              "originalPosition": 19,
              "body": "```suggestion\r\nAn endpoint that receives an ACK_FREQUENCY frame with a non-zero Reordering\r\nThreshold value SHOULD send an immediate ACK when the gap\r\n```",
              "createdAt": "2023-02-22T22:14:36Z",
              "updatedAt": "2023-02-22T22:17:00Z"
            },
            {
              "originalPosition": 39,
              "body": "```suggestion\r\nThreshold` value of 0, the endpoint SHOULD NOT send an immediate\r\n```",
              "createdAt": "2023-02-22T22:15:11Z",
              "updatedAt": "2023-02-22T22:17:00Z"
            },
            {
              "originalPosition": 12,
              "body": "```suggestion\r\n: The Largest Acknowledged value sent in an ACK frame.\r\n```",
              "createdAt": "2023-02-22T22:16:08Z",
              "updatedAt": "2023-02-22T22:17:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5Ob9-3",
          "commit": {
            "abbreviatedOid": "7a0e940"
          },
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-02-27T16:25:54Z",
          "updatedAt": "2023-02-27T16:28:20Z",
          "comments": [
            {
              "originalPosition": 47,
              "body": "```suggestion\r\nand there is a missing packet,\r\n```",
              "createdAt": "2023-02-27T16:25:54Z",
              "updatedAt": "2023-02-27T16:28:20Z"
            },
            {
              "originalPosition": 51,
              "body": "```suggestion\r\nIf the reordering theshold is 3 and assuming that packets are received close enough\r\nin time to not exceed max_ack_delay:\r\n```",
              "createdAt": "2023-02-27T16:27:21Z",
              "updatedAt": "2023-02-27T16:28:20Z"
            },
            {
              "originalPosition": 61,
              "body": "```suggestion\r\nIf the reordering threshold is 5 and assuming that packets are received close enough\r\nin time to not exceed max_ack_delay:\r\n```",
              "createdAt": "2023-02-27T16:27:59Z",
              "updatedAt": "2023-02-27T16:28:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5OcCCR",
          "commit": {
            "abbreviatedOid": "3cca652"
          },
          "author": "janaiyengar",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-27T16:33:46Z",
          "updatedAt": "2023-02-27T16:33:47Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "```suggestion\r\n: The largest packet number among all received ack-eliciting packets so far.\r\n```",
              "createdAt": "2023-02-27T16:33:46Z",
              "updatedAt": "2023-02-27T16:33:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5OcFk3",
          "commit": {
            "abbreviatedOid": "99dd692"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-27T16:41:42Z",
          "updatedAt": "2023-02-27T16:41:42Z",
          "comments": [
            {
              "originalPosition": 58,
              "body": "```suggestion\r\n  Receive 1\r\n  Receive 3 -> 2 Missing\r\n  Receive 4 -> 2 Missing\r\n  Receive 5 -> Send ACK because of 2\r\n  Receive 8 -> 6,7 Missing\r\n  Receive 9 -> Send ACK because of 6, 7 Missing\r\n  Receive 10 -> Send ACK because of 7\r\n```",
              "createdAt": "2023-02-27T16:41:42Z",
              "updatedAt": "2023-02-27T16:41:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5OcGDO",
          "commit": {
            "abbreviatedOid": "7a0e940"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-27T16:42:46Z",
          "updatedAt": "2023-02-27T16:42:47Z",
          "comments": [
            {
              "originalPosition": 51,
              "body": "ACKs could be sent due to packet threshold as well, so I reverted this after accepting it.",
              "createdAt": "2023-02-27T16:42:47Z",
              "updatedAt": "2023-02-27T16:42:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5OcGJ1",
          "commit": {
            "abbreviatedOid": "99dd692"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-27T16:43:00Z",
          "updatedAt": "2023-02-27T16:43:01Z",
          "comments": [
            {
              "originalPosition": 69,
              "body": "```suggestion\r\n  Receive 1\r\n  Receive 3 -> 2 Missing\r\n  Receive 5 -> 2 Missing, 4 Missing\r\n  Receive 6 -> 2 Missing, 4 Missing\r\n  Receive 7 -> Send ACK because of 2, 4 Missing\r\n  Receive 8 -> 4 Missing\r\n  Receive 9 -> Send ACK because of 4\r\n```",
              "createdAt": "2023-02-27T16:43:01Z",
              "updatedAt": "2023-02-27T16:43:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5OcH6-",
          "commit": {
            "abbreviatedOid": "99dd692"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-27T16:47:00Z",
          "updatedAt": "2023-02-27T16:47:19Z",
          "comments": [
            {
              "originalPosition": 24,
              "body": "Actually this doesn't seem fully write. It should not be larger but also not smaller because you need it exactly at the same value as the re-ordering threshold. Maybe having a too small value is even worse because this makes the mechanism useless.",
              "createdAt": "2023-02-27T16:47:01Z",
              "updatedAt": "2023-02-27T16:47:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5OcJtF",
          "commit": {
            "abbreviatedOid": "12ab797"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-27T16:51:06Z",
          "updatedAt": "2023-02-27T16:51:07Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "```suggestion\r\n\r\nThis will ensure that an ACK is sent at exactly the point when loss can be detected by the peer without delays. Sending this ACK will reset the ACK timer or counter as any ACK would do.\r\n```",
              "createdAt": "2023-02-27T16:51:06Z",
              "updatedAt": "2023-02-27T16:51:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5OcKmQ",
          "commit": {
            "abbreviatedOid": "c6e8b73"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-27T16:53:09Z",
          "updatedAt": "2023-02-27T16:53:10Z",
          "comments": [
            {
              "originalPosition": 24,
              "body": "```suggestion\r\nin the ACK_FREQUENCY frame need to match the re-ordering threshold\r\n```",
              "createdAt": "2023-02-27T16:53:09Z",
              "updatedAt": "2023-02-27T16:53:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5OctxN",
          "commit": {
            "abbreviatedOid": "c5ca78c"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-27T18:04:45Z",
          "updatedAt": "2023-02-27T18:04:46Z",
          "comments": [
            {
              "originalPosition": 35,
              "body": "```suggestion\r\nIn order to ensure timely loss detection, it is optimal to send a Reordering Threshold value of 1 less than\r\nthe packet threshold used by the data sender for loss detection.\r\nIf the threshold is smaller, the additional ACK does not provide input to\r\nthe loss detection. If the value is larger, it creates unnecessary delays.\r\n({{Section 18.2 of QUIC-RECOVERY}}) recommends a default packet threshold for\r\nloss detection of 3, equivalent to a Reordering Threshold of 2.\r\n\r\n```",
              "createdAt": "2023-02-27T18:04:45Z",
              "updatedAt": "2023-02-27T18:04:46Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5OuZRQ",
          "commit": {
            "abbreviatedOid": "036e633"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-01T23:20:28Z",
          "updatedAt": "2023-03-01T23:20:28Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "```suggestion\r\n: The largest packet number among all received ack-eliciting packets.\r\n```",
              "createdAt": "2023-03-01T23:20:28Z",
              "updatedAt": "2023-03-01T23:20:28Z"
            }
          ]
        }
      ]
    },
    {
      "number": 156,
      "id": "PR_kwDODddxTs5Kpht7",
      "title": "Burst mitigation doesn't change",
      "url": "https://github.com/quicwg/ack-frequency/pull/156",
      "state": "CLOSED",
      "author": "ianswett",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #154 \r\n\r\nI'm not sure this section is even necessary, but I shortened it to focus on the important parts.",
      "createdAt": "2023-02-23T23:27:41Z",
      "updatedAt": "2025-02-06T13:21:12Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "501d91bb04119b83ab55e33233773ea3c827e24e",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "ianswett-burst-mitigation",
      "headRefOid": "1d3d2a2f3ca1cd1b6f7b160e8e8d66c087366af4",
      "closedAt": "2023-02-27T16:35:16Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "Superceded by #157 ",
          "createdAt": "2023-02-27T16:35:35Z",
          "updatedAt": "2023-02-27T16:35:35Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs5OZixz",
          "commit": {
            "abbreviatedOid": "db57049"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-27T10:38:24Z",
          "updatedAt": "2023-02-27T10:38:25Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "I still don't think this needs normative language at all. We also don't say. You MUST implement RFC9000 before you implement this spec.",
              "createdAt": "2023-02-27T10:38:25Z",
              "updatedAt": "2023-02-27T10:38:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5Obn_w",
          "commit": {
            "abbreviatedOid": "db57049"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-27T15:45:29Z",
          "updatedAt": "2023-02-27T15:45:29Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "```suggestion\r\nof packets into the network. Senders continue to follow Section 7.7\r\n```",
              "createdAt": "2023-02-27T15:45:29Z",
              "updatedAt": "2023-02-27T15:45:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5OboKJ",
          "commit": {
            "abbreviatedOid": "db57049"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-27T15:45:48Z",
          "updatedAt": "2023-02-27T15:45:49Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "I removed the MUST.",
              "createdAt": "2023-02-27T15:45:48Z",
              "updatedAt": "2023-02-27T15:45:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5Obs0G",
          "commit": {
            "abbreviatedOid": "1d3d2a2"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-02-27T15:55:10Z",
          "updatedAt": "2023-02-27T15:55:10Z",
          "comments": []
        },
        {
          "id": "PRR_kwDODddxTs5Ob1oF",
          "commit": {
            "abbreviatedOid": "1d3d2a2"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-02-27T16:12:56Z",
          "updatedAt": "2023-02-27T16:12:57Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "```suggestion\r\nof {{QUIC-RECOVERY}} and either employ pacing or limit bursts to the\r\ninitial congestion window.  Not employing pacing makes it more likely a\r\nsender is limited by the initial congestion window, so becomes more\r\nimportant with this extension.\r\n```",
              "createdAt": "2023-02-27T16:12:57Z",
              "updatedAt": "2023-02-27T16:12:57Z"
            }
          ]
        }
      ]
    },
    {
      "number": 157,
      "id": "PR_kwDODddxTs5K2YY_",
      "title": "Burst Mitigation v2",
      "url": "https://github.com/quicwg/ack-frequency/pull/157",
      "state": "MERGED",
      "author": "ianswett",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Another attempt to fix #154 \r\n\r\nRemoves an unnecessary MUST.",
      "createdAt": "2023-02-27T16:23:51Z",
      "updatedAt": "2025-02-06T13:21:14Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "501d91bb04119b83ab55e33233773ea3c827e24e",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "ianswett-burst-mitigation2",
      "headRefOid": "2cee54d49e205c3793345f66c0c72c19d3bf5031",
      "closedAt": "2023-02-27T16:34:59Z",
      "mergedAt": "2023-02-27T16:34:59Z",
      "mergedBy": "ianswett",
      "mergeCommit": {
        "oid": "2371d65866b7b35a9911cabe4f63d4bb714075f3"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 158,
      "id": "PR_kwDODddxTs5LFZT2",
      "title": "Editorial pass v1",
      "url": "https://github.com/quicwg/ack-frequency/pull/158",
      "state": "MERGED",
      "author": "ianswett",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "A few editorial suggestions in the first part of the document.",
      "createdAt": "2023-03-02T01:29:10Z",
      "updatedAt": "2025-02-06T13:21:15Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "b1c8f6db9cb65f57dc1c5d951a7b57025d967119",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "ianswett-editorial-v1",
      "headRefOid": "c47d5df5cf4245331d53839a40184d4ed9dc6f43",
      "closedAt": "2023-03-06T17:03:09Z",
      "mergedAt": "2023-03-06T17:03:09Z",
      "mergedBy": "ianswett",
      "mergeCommit": {
        "oid": "35af2e27e040d43d4653014e6a08fa7dc7c30df7"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs5Oxh1F",
          "commit": {
            "abbreviatedOid": "3998ee9"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-02T11:09:32Z",
          "updatedAt": "2023-03-02T11:09:33Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "Why did you remove \"data\"? Think this saying data sender is more clear.",
              "createdAt": "2023-03-02T11:09:33Z",
              "updatedAt": "2023-03-02T11:09:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5OxizX",
          "commit": {
            "abbreviatedOid": "3998ee9"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-02T11:10:55Z",
          "updatedAt": "2023-03-02T11:10:56Z",
          "comments": [
            {
              "originalPosition": 21,
              "body": "```suggestion\r\n  the number of ACK-only packets reduces the CPU consumed at a data\r\n```\r\nOr maybe even \"packets only carrying an acknowledgement frame\"? Not sure we defined \"ACK-only\" anywhere?",
              "createdAt": "2023-03-02T11:10:56Z",
              "updatedAt": "2023-03-02T11:10:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5O1D6f",
          "commit": {
            "abbreviatedOid": "3998ee9"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-02T20:05:06Z",
          "updatedAt": "2023-03-02T20:05:07Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "A sender sends ACK eliciting frames besides data, but I can revert this part of the PR if you want.",
              "createdAt": "2023-03-02T20:05:06Z",
              "updatedAt": "2023-03-02T20:05:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5O1EBB",
          "commit": {
            "abbreviatedOid": "3998ee9"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-02T20:05:26Z",
          "updatedAt": "2023-03-02T20:05:27Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "```suggestion\r\nsender, and CPU utilization at both a data sender and a data receiver.\r\n```",
              "createdAt": "2023-03-02T20:05:26Z",
              "updatedAt": "2023-03-02T20:05:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5O1FBR",
          "commit": {
            "abbreviatedOid": "7714876"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-02T20:08:42Z",
          "updatedAt": "2023-03-02T20:08:43Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "```suggestion\r\nthroughput, loss detection and congestion controller performance at a data\r\n```",
              "createdAt": "2023-03-02T20:08:42Z",
              "updatedAt": "2023-03-02T20:08:43Z"
            }
          ]
        }
      ]
    },
    {
      "number": 159,
      "id": "PR_kwDODddxTs5LHjss",
      "title": "Clarification on ACK sending after an reordering ACK was sent",
      "url": "https://github.com/quicwg/ack-frequency/pull/159",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This clarification is not necessarily needed but I think it would help me. Just a proposal...",
      "createdAt": "2023-03-02T11:08:21Z",
      "updatedAt": "2025-02-06T13:19:27Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "b1c8f6db9cb65f57dc1c5d951a7b57025d967119",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "mirjak-patch-12",
      "headRefOid": "2b7b78c400e1e9d09f8ccb492854327ae654a424",
      "closedAt": "2023-03-06T17:00:34Z",
      "mergedAt": "2023-03-06T17:00:34Z",
      "mergedBy": "ianswett",
      "mergeCommit": {
        "oid": "1d7c446061ffb407d9dbe4fb13315ac13b943756"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs5O-vDp",
          "commit": {
            "abbreviatedOid": "2b7b78c"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "I'm not sure this is necessary, but it's definitely accurate, so I am fine with including it if you think it helps.",
          "createdAt": "2023-03-04T16:49:55Z",
          "updatedAt": "2023-03-04T16:49:55Z",
          "comments": []
        },
        {
          "id": "PRR_kwDODddxTs5PFOH2",
          "commit": {
            "abbreviatedOid": "2b7b78c"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-03-06T17:00:28Z",
          "updatedAt": "2023-03-06T17:00:28Z",
          "comments": []
        }
      ]
    },
    {
      "number": 160,
      "id": "PR_kwDODddxTs5LRnhi",
      "title": "Editorial pass v2",
      "url": "https://github.com/quicwg/ack-frequency/pull/160",
      "state": "MERGED",
      "author": "ianswett",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-03-04T03:31:11Z",
      "updatedAt": "2025-02-06T13:19:26Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "b1c8f6db9cb65f57dc1c5d951a7b57025d967119",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "ianswett-editorial2-1",
      "headRefOid": "eee26ca003b76abe419759154d57a60448abf0e5",
      "closedAt": "2023-03-06T16:59:36Z",
      "mergedAt": "2023-03-06T16:59:36Z",
      "mergedBy": "ianswett",
      "mergeCommit": {
        "oid": "5d755a068a5ece570ce91f64ad1c80d8b1a2aa0c"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs5O-YoW",
          "commit": {
            "abbreviatedOid": "660cecf"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-04T09:18:15Z",
          "updatedAt": "2023-03-04T09:18:15Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\n: A variable-length integer that indicates how\r\n```",
              "createdAt": "2023-03-04T09:18:15Z",
              "updatedAt": "2023-03-04T09:18:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5O-Yp5",
          "commit": {
            "abbreviatedOid": "6740a5f"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-04T09:19:18Z",
          "updatedAt": "2023-03-04T09:20:35Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "I think we need the \"many\" here, no?",
              "createdAt": "2023-03-04T09:19:18Z",
              "updatedAt": "2023-03-04T09:20:35Z"
            },
            {
              "originalPosition": 17,
              "body": "\"recommended\" is also a RFC2119 keyword which I think we tried to avoid.",
              "createdAt": "2023-03-04T09:20:01Z",
              "updatedAt": "2023-03-04T09:20:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5O-lzp",
          "commit": {
            "abbreviatedOid": "6740a5f"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-04T13:27:49Z",
          "updatedAt": "2023-03-04T13:27:50Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "It's not about the number of packets, but the amount of reordering.  There's probably a clearer way to say that, though?",
              "createdAt": "2023-03-04T13:27:49Z",
              "updatedAt": "2023-03-04T13:27:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5O-l1P",
          "commit": {
            "abbreviatedOid": "6740a5f"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-04T13:28:33Z",
          "updatedAt": "2023-03-04T13:28:34Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "```suggestion\r\nit is encouraged to send another ACK_FREQUENCY frame, unless an ACK_FREQUENCY\r\n```",
              "createdAt": "2023-03-04T13:28:33Z",
              "updatedAt": "2023-03-04T13:28:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5O-l1_",
          "commit": {
            "abbreviatedOid": "6740a5f"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-04T13:28:54Z",
          "updatedAt": "2023-03-04T13:28:54Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "Agreed.  Changed back to encouraged.",
              "createdAt": "2023-03-04T13:28:54Z",
              "updatedAt": "2023-03-04T13:28:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5O-mRK",
          "commit": {
            "abbreviatedOid": "d7dd7fa"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-04T13:45:52Z",
          "updatedAt": "2023-03-04T13:45:52Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "right... something like \"indicates the maximum packet number gap before eliciting an immediate ACK\"",
              "createdAt": "2023-03-04T13:45:52Z",
              "updatedAt": "2023-03-04T13:46:02Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5O_f8K",
          "commit": {
            "abbreviatedOid": "6740a5f"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-05T19:53:36Z",
          "updatedAt": "2023-03-05T19:53:36Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Thanks, that's good.  The word cap could be confusing, so I went for \"maximum amount of packet reordering before eliciting an immediate ACK.\"  I think that's conceptually correct?",
              "createdAt": "2023-03-05T19:53:36Z",
              "updatedAt": "2023-03-05T19:53:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5PCUXz",
          "commit": {
            "abbreviatedOid": "eee26ca"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-03-06T11:24:19Z",
          "updatedAt": "2023-03-06T11:24:19Z",
          "comments": []
        }
      ]
    },
    {
      "number": 161,
      "id": "PR_kwDODddxTs5Lk1e2",
      "title": "Add Mirja as author",
      "url": "https://github.com/quicwg/ack-frequency/pull/161",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I'm assuming I should add myself as author. If you think that not warrantable, that's fine as well. Just let me know.",
      "createdAt": "2023-03-08T14:16:57Z",
      "updatedAt": "2025-02-06T13:19:25Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "35af2e27e040d43d4653014e6a08fa7dc7c30df7",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "mirjak-patch-13",
      "headRefOid": "b6495e8b9e07b0ee1f3425f0fd992bc89a3db604",
      "closedAt": "2023-03-10T15:07:32Z",
      "mergedAt": "2023-03-10T15:07:32Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "dbceed5b7ba1e593b6533c16375f7d71682cb35e"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 169,
      "id": "PR_kwDODddxTs5L6vBg",
      "title": "colons",
      "url": "https://github.com/quicwg/ack-frequency/pull/169",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "fixes #164",
      "createdAt": "2023-03-13T17:27:05Z",
      "updatedAt": "2025-02-06T13:20:18Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "dbceed5b7ba1e593b6533c16375f7d71682cb35e",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "mirjak-patch-14",
      "headRefOid": "30e5a78662cf47048dfe017adb778f80cca525fb",
      "closedAt": "2023-03-27T03:05:22Z",
      "mergedAt": "2023-03-27T03:05:22Z",
      "mergedBy": "ianswett",
      "mergeCommit": {
        "oid": "0ecdeb6bd8d1b2b773827140b044a706cc2447db"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs5Pun1G",
          "commit": {
            "abbreviatedOid": "30e5a78"
          },
          "author": "gorryfair",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "Looks better to me.",
          "createdAt": "2023-03-13T17:38:40Z",
          "updatedAt": "2023-03-13T17:38:40Z",
          "comments": []
        },
        {
          "id": "PRR_kwDODddxTs5Q8Mmq",
          "commit": {
            "abbreviatedOid": "30e5a78"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-26T06:52:37Z",
          "updatedAt": "2023-03-26T06:52:38Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Maybe it'd be best to use a definition list style here?\r\n\r\nUnless the rich diff is misleading, you now have two colons before the definition.",
              "createdAt": "2023-03-26T06:52:38Z",
              "updatedAt": "2023-03-26T06:52:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5Q9Wdj",
          "commit": {
            "abbreviatedOid": "30e5a78"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-03-27T03:05:12Z",
          "updatedAt": "2023-03-27T03:05:12Z",
          "comments": []
        }
      ]
    },
    {
      "number": 170,
      "id": "PR_kwDODddxTs5L6wwc",
      "title": "wait for ack of frame",
      "url": "https://github.com/quicwg/ack-frequency/pull/170",
      "state": "CLOSED",
      "author": "mirjak",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "fixes #166 \r\n\r\nremoves MUST and applies wording proposed by Gorry",
      "createdAt": "2023-03-13T17:33:23Z",
      "updatedAt": "2025-02-06T13:20:17Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "dbceed5b7ba1e593b6533c16375f7d71682cb35e",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "mirjak-patch-15",
      "headRefOid": "b06fac2eec572ad840f75f44991cbfed049df708",
      "closedAt": "2023-03-27T03:03:01Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "applied #174 instead",
          "createdAt": "2023-03-27T03:03:01Z",
          "updatedAt": "2023-03-27T03:03:01Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 171,
      "id": "PR_kwDODddxTs5L60GN",
      "title": "size of IW",
      "url": "https://github.com/quicwg/ack-frequency/pull/171",
      "state": "CLOSED",
      "author": "mirjak",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "fixes #167",
      "createdAt": "2023-03-13T17:44:23Z",
      "updatedAt": "2025-02-06T13:20:16Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "dbceed5b7ba1e593b6533c16375f7d71682cb35e",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "mirjak-patch-16",
      "headRefOid": "8595ad1bb68bb7710f4a777c5332ffc3e5508178",
      "closedAt": "2023-03-28T08:56:29Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "In RFC 9002, we say \"Senders SHOULD limit bursts to the initial congestion window\", so the existing text is in line with that and I'd prefer to close this issue with no change.",
          "createdAt": "2023-03-26T06:40:12Z",
          "updatedAt": "2023-03-26T06:40:12Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 172,
      "id": "PR_kwDODddxTs5M5xNJ",
      "title": "Fix formatting of Examples",
      "url": "https://github.com/quicwg/ack-frequency/pull/172",
      "state": "MERGED",
      "author": "ianswett",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "The examples are unclear, because they're not on separate lines.",
      "createdAt": "2023-03-26T03:13:19Z",
      "updatedAt": "2025-02-06T13:21:16Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "dbceed5b7ba1e593b6533c16375f7d71682cb35e",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "ianswett-example-format",
      "headRefOid": "ab1390514afc626fb0e41dedb42d141a556f4b07",
      "closedAt": "2023-03-26T03:38:26Z",
      "mergedAt": "2023-03-26T03:38:26Z",
      "mergedBy": "ianswett",
      "mergeCommit": {
        "oid": "ab6c0cc83a727e602b2a8392b0a45b58e0e802b4"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs5Q8Gej",
          "commit": {
            "abbreviatedOid": "ab13905"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-03-26T03:16:46Z",
          "updatedAt": "2023-03-26T03:16:46Z",
          "comments": []
        }
      ]
    },
    {
      "number": 173,
      "id": "PR_kwDODddxTs5M52n1",
      "title": "Update the transport param codepoint",
      "url": "https://github.com/quicwg/ack-frequency/pull/173",
      "state": "MERGED",
      "author": "ianswett",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "design"
      ],
      "body": "The wire format changed to include a new Reordering Threshold field.\r\n\r\nIn order for different draft versions to coexist, we should change the Transport Param codepoint for min_ack_delay\r\n\r\nFixes #162 ",
      "createdAt": "2023-03-26T04:50:36Z",
      "updatedAt": "2025-02-06T13:21:17Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "ab6c0cc83a727e602b2a8392b0a45b58e0e802b4",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "ianswett-minackdelay-codepoint",
      "headRefOid": "d62a61966a979f5760f7aaad55c863f9eca73a85",
      "closedAt": "2023-03-27T03:00:35Z",
      "mergedAt": "2023-03-27T03:00:35Z",
      "mergedBy": "ianswett",
      "mergeCommit": {
        "oid": "27fa5f8778b628399c6078c3c98a10dd0a2c40ea"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs5Q8Ji8",
          "commit": {
            "abbreviatedOid": "d62a619"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-03-26T04:56:19Z",
          "updatedAt": "2023-03-26T04:56:19Z",
          "comments": []
        },
        {
          "id": "PRR_kwDODddxTs5Q8JpY",
          "commit": {
            "abbreviatedOid": "d62a619"
          },
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-03-26T05:00:07Z",
          "updatedAt": "2023-03-26T05:00:07Z",
          "comments": []
        }
      ]
    },
    {
      "number": 174,
      "id": "PR_kwDODddxTs5M57PF",
      "title": "Remove an unnecessary sentence and MUST",
      "url": "https://github.com/quicwg/ack-frequency/pull/174",
      "state": "MERGED",
      "author": "ianswett",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #166\r\n\r\nCloses #170 ",
      "createdAt": "2023-03-26T06:45:42Z",
      "updatedAt": "2025-02-06T13:21:18Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "ab6c0cc83a727e602b2a8392b0a45b58e0e802b4",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "ianswett-remove-must",
      "headRefOid": "ef50741afe7859e51ed2c390244550f6555e1675",
      "closedAt": "2023-03-27T03:03:06Z",
      "mergedAt": "2023-03-27T03:03:06Z",
      "mergedBy": "ianswett",
      "mergeCommit": {
        "oid": "318c65b2fe786c6dfe6e9777519cbdd0c3052658"
      },
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Not sure I fully understand why this is unnecessary.",
          "createdAt": "2023-03-27T01:55:51Z",
          "updatedAt": "2023-03-27T01:55:51Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "The following paragraph has a MUST that I believe makes this one redundant.  Thoughts?",
          "createdAt": "2023-03-27T01:57:55Z",
          "updatedAt": "2023-03-27T01:57:55Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Ah, maybe.",
          "createdAt": "2023-03-27T02:00:42Z",
          "updatedAt": "2023-03-27T02:00:42Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 175,
      "id": "PR_kwDODddxTs5M59bV",
      "title": "Clarify 'it'",
      "url": "https://github.com/quicwg/ack-frequency/pull/175",
      "state": "MERGED",
      "author": "ianswett",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "design"
      ],
      "body": "Fixes #163\r\n\r\nThis adds a SHOULD, but it seems sensible given the implications on PTO.",
      "createdAt": "2023-03-26T07:35:25Z",
      "updatedAt": "2025-02-06T13:21:19Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "ab6c0cc83a727e602b2a8392b0a45b58e0e802b4",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "ianswett-clarify-it",
      "headRefOid": "41d1d3639f1335e914ac5e2aba1c1c7d4a9a751b",
      "closedAt": "2023-03-27T02:55:27Z",
      "mergedAt": "2023-03-27T02:55:27Z",
      "mergedBy": "ianswett",
      "mergeCommit": {
        "oid": "ceb7617859ed72b4fcf11dcd34d761b9b5e93b38"
      },
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I thought we purposefully decided to not use normative language here.",
          "createdAt": "2023-03-27T01:56:45Z",
          "updatedAt": "2023-03-27T01:56:45Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "I think we were trying to avoid normative language, though I can't remember why?\r\n\r\nBut in practice, it probably doesn't matter, so I can remove the SHOULD.",
          "createdAt": "2023-03-27T02:01:00Z",
          "updatedAt": "2023-03-27T02:01:00Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs5Q8OcS",
          "commit": {
            "abbreviatedOid": "cc74072"
          },
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-03-26T07:46:07Z",
          "updatedAt": "2023-03-26T07:46:07Z",
          "comments": []
        },
        {
          "id": "PRR_kwDODddxTs5Q9UvJ",
          "commit": {
            "abbreviatedOid": "8b3a33c"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-27T02:53:51Z",
          "updatedAt": "2023-03-27T02:53:51Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "```suggestion\r\nthe sender is encouraged to send another ACK_FREQUENCY frame, unless an\r\n```",
              "createdAt": "2023-03-27T02:53:51Z",
              "updatedAt": "2023-03-27T02:53:51Z"
            }
          ]
        }
      ]
    },
    {
      "number": 176,
      "id": "PR_kwDODddxTs5M5_TB",
      "title": "Delete unnecessary paragraph about batching ACKs",
      "url": "https://github.com/quicwg/ack-frequency/pull/176",
      "state": "MERGED",
      "author": "ianswett",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Defer to RFC9000.  Fixes #165",
      "createdAt": "2023-03-26T08:12:26Z",
      "updatedAt": "2025-02-06T13:21:18Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "ab6c0cc83a727e602b2a8392b0a45b58e0e802b4",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "ianswett-batch-acks",
      "headRefOid": "71e0a7ca738e666ddf75e600ad235eea288da7a6",
      "closedAt": "2023-03-27T02:54:57Z",
      "mergedAt": "2023-03-27T02:54:57Z",
      "mergedBy": "ianswett",
      "mergeCommit": {
        "oid": "b398fbea4ac0870bb2a1b9a45ab3b305104d97a2"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs5Q9LVp",
          "commit": {
            "abbreviatedOid": "71e0a7c"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-03-27T01:58:06Z",
          "updatedAt": "2023-03-27T01:58:06Z",
          "comments": []
        }
      ]
    },
    {
      "number": 177,
      "id": "PR_kwDODddxTs5M7snX",
      "title": "Examples formatting still broken...",
      "url": "https://github.com/quicwg/ack-frequency/pull/177",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-03-27T04:33:20Z",
      "updatedAt": "2025-02-06T13:20:16Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "0ecdeb6bd8d1b2b773827140b044a706cc2447db",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "mirjak-patch-17",
      "headRefOid": "96eaf1ee93c29f2973c774c48575fb17cf1963ca",
      "closedAt": "2023-03-28T08:55:16Z",
      "mergedAt": "2023-03-28T08:55:16Z",
      "mergedBy": "ianswett",
      "mergeCommit": {
        "oid": "0ea1d0b4b42ef8ed4ec35ae82a1caa3677f4b984"
      },
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "apparently not...",
          "createdAt": "2023-03-27T05:01:06Z",
          "updatedAt": "2023-03-27T05:01:06Z"
        },
        {
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "body": "Yeah unfortunately this ain't regular markdown, tilde is needed to instruct the RFC tooling of the correct artwork type (which, FYI, you can theoretically tweak with additional labels but that you shouldn't need here).",
          "createdAt": "2023-03-27T05:03:13Z",
          "updatedAt": "2023-03-27T05:03:13Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs5Q9mbH",
          "commit": {
            "abbreviatedOid": "96eaf1e"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Aren't backticks and tildes equivalent?  Either way, this looks fine.",
          "createdAt": "2023-03-27T04:56:40Z",
          "updatedAt": "2023-03-27T04:56:40Z",
          "comments": []
        }
      ]
    },
    {
      "number": 178,
      "id": "PR_kwDODddxTs5NBG23",
      "title": "Editorial Pass on Congestion Control and Loss Detection",
      "url": "https://github.com/quicwg/ack-frequency/pull/178",
      "state": "MERGED",
      "author": "ianswett",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "We had similar text in the two sections, and the latter one was where the SHOULD was, so this consolidates the duplicate text into the Congestion Control section.\r\n\r\nThis is intended as an editorial cleanup prior the the PR for #168 ",
      "createdAt": "2023-03-27T23:19:05Z",
      "updatedAt": "2025-02-06T13:21:20Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "0ecdeb6bd8d1b2b773827140b044a706cc2447db",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "ianswett-cc-editorial",
      "headRefOid": "2e83a6f9ae3127e9340d5d9eb48965cb3380bd39",
      "closedAt": "2023-03-29T08:18:49Z",
      "mergedAt": "2023-03-29T08:18:49Z",
      "mergedBy": "ianswett",
      "mergeCommit": {
        "oid": "a20ee9f7b3f8e0c020376695b85dfabcca55d5ae"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs5RIs9H",
          "commit": {
            "abbreviatedOid": "472993d"
          },
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-03-28T14:25:48Z",
          "updatedAt": "2023-03-28T14:27:22Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "That also applies to packet number threshold loss detection.",
              "createdAt": "2023-03-28T14:25:48Z",
              "updatedAt": "2023-03-28T14:27:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5RIynE",
          "commit": {
            "abbreviatedOid": "472993d"
          },
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-03-28T14:35:52Z",
          "updatedAt": "2023-03-29T01:43:23Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "```suggestion\r\na packet loss or an ECN CE marking. Decreasing the acknowledgement frequency\r\n```",
              "createdAt": "2023-03-28T14:35:52Z",
              "updatedAt": "2023-03-29T01:43:23Z"
            },
            {
              "originalPosition": 28,
              "body": "```suggestion\r\nNote that the size of the congestion window and the RTT are dynamic and therefore might require\r\n```",
              "createdAt": "2023-03-28T14:52:50Z",
              "updatedAt": "2023-03-29T01:43:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5RMI_j",
          "commit": {
            "abbreviatedOid": "472993d"
          },
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-29T01:46:08Z",
          "updatedAt": "2023-03-29T01:46:09Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "Honestly I do not understand what the last sentence is trying to argue, regardless of the mechanism being packet number threshold or time threshold. It seems to me that it is unspecific to the condition being mentioned at the beginning of this paragraph, but rather a general downside of the Ack Frequency extension.\r\n\r\nThat said, I understand that this is a rewrite of an existing sentence and that this PR is meant to be editorial.",
              "createdAt": "2023-03-29T01:46:08Z",
              "updatedAt": "2023-03-29T01:47:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5RMbUh",
          "commit": {
            "abbreviatedOid": "1a76638"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-29T03:52:41Z",
          "updatedAt": "2023-03-29T03:52:42Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "The idea is that if min_ack_delay is larger than RTT, it'll can more than an RTT to receive a delayed ACK.\r\n\r\nI updated the text to clarify what the purpose of the sentence is.",
              "createdAt": "2023-03-29T03:52:41Z",
              "updatedAt": "2023-03-29T03:52:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5RMbYn",
          "commit": {
            "abbreviatedOid": "1a76638"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-29T03:53:09Z",
          "updatedAt": "2023-03-29T03:53:10Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "```suggestion\r\ncan be harmful, because it can delay loss detection more than an RTT.\r\n```",
              "createdAt": "2023-03-29T03:53:09Z",
              "updatedAt": "2023-03-29T03:53:10Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5RMbxS",
          "commit": {
            "abbreviatedOid": "2e83a6f"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-29T03:55:58Z",
          "updatedAt": "2023-03-29T03:55:58Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "In RFC9002, we don't use 'size of the congestion window', and instead use 'congestion window', so I'd like to stick with that for this draft.",
              "createdAt": "2023-03-29T03:55:58Z",
              "updatedAt": "2023-03-29T03:55:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5RNU4G",
          "commit": {
            "abbreviatedOid": "472993d"
          },
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-03-29T07:46:57Z",
          "updatedAt": "2023-03-29T07:46:58Z",
          "comments": [
            {
              "originalPosition": 38,
              "body": "Thank you. I think what the text says makes sense.",
              "createdAt": "2023-03-29T07:46:58Z",
              "updatedAt": "2023-03-29T07:46:58Z"
            }
          ]
        }
      ]
    },
    {
      "number": 180,
      "id": "PR_kwDODddxTs5NN64c",
      "title": "not a sentence",
      "url": "https://github.com/quicwg/ack-frequency/pull/180",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-03-30T01:39:50Z",
      "updatedAt": "2023-03-30T02:24:26Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "a20ee9f7b3f8e0c020376695b85dfabcca55d5ae",
      "headRepository": "martinthomson/ack-frequency",
      "headRefName": "patch-1",
      "headRefOid": "d7f38ba38aa9460b14f970c1cbd03a9606ae2fc6",
      "closedAt": "2023-03-30T02:24:25Z",
      "mergedAt": "2023-03-30T02:24:25Z",
      "mergedBy": "ianswett",
      "mergeCommit": {
        "oid": "d65d4932ed05e33a32cd47678695f0cee48ace10"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs5RUB50",
          "commit": {
            "abbreviatedOid": "d7f38ba"
          },
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-03-30T01:41:12Z",
          "updatedAt": "2023-03-30T01:41:12Z",
          "comments": []
        },
        {
          "id": "PRR_kwDODddxTs5RUFsQ",
          "commit": {
            "abbreviatedOid": "d7f38ba"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-03-30T02:08:09Z",
          "updatedAt": "2023-03-30T02:08:09Z",
          "comments": []
        }
      ]
    },
    {
      "number": 182,
      "id": "PR_kwDODddxTs5OjvAO",
      "title": "Fix typo",
      "url": "https://github.com/quicwg/ack-frequency/pull/182",
      "state": "MERGED",
      "author": "aochagavia",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Came across this while reading the draft.\r\n\r\nBtw are you interested in \"editorial\" PRs? I am implementing the draft for [Quinn](https://github.com/quinn-rs/quinn) and could attempt to reword some paragraphs I found confusing.",
      "createdAt": "2023-04-18T09:33:52Z",
      "updatedAt": "2023-05-04T07:31:22Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "d65d4932ed05e33a32cd47678695f0cee48ace10",
      "headRepository": "aochagavia/ack-frequency",
      "headRefName": "patch-1",
      "headRefOid": "596f2a6007675c71aafaa4813dda214a1f394c69",
      "closedAt": "2023-05-03T20:29:09Z",
      "mergedAt": "2023-05-03T20:29:09Z",
      "mergedBy": "ianswett",
      "mergeCommit": {
        "oid": "80630c9412c17cfac4fc32752251b25cf48d09b9"
      },
      "comments": [
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "Yes, we're definitely interested in editorial PRs which improve the clarity of the text.  Thanks for you help!",
          "createdAt": "2023-05-03T20:28:42Z",
          "updatedAt": "2023-05-03T20:28:42Z"
        },
        {
          "author": "aochagavia",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Great! I created #183 for one of the sections that IMO need clarification. I'll gladly contribute with a PR once someone points out which way the ambiguity should be resolved.",
          "createdAt": "2023-05-04T07:31:22Z",
          "updatedAt": "2023-05-04T07:31:22Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 184,
      "id": "PR_kwDODddxTs5QXyiH",
      "title": "NiT resulotion suggestions for draft-ietf-quic-ack-frequency.md",
      "url": "https://github.com/quicwg/ack-frequency/pull/184",
      "state": "MERGED",
      "author": "gorryfair",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This seeks to address NiTs in the current revision, see related PR.",
      "createdAt": "2023-05-12T09:53:49Z",
      "updatedAt": "2023-07-10T15:18:02Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "1fce19c872909adc1f909945a960aa1194e16405",
      "headRepository": "gorryfair/ack-frequency",
      "headRefName": "patch-7",
      "headRefOid": "cf4d400f359fddcb092459dd2a6b1e333f8094cd",
      "closedAt": "2023-07-10T15:18:02Z",
      "mergedAt": "2023-07-10T15:18:02Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "393d440affe2b8febdbb19a9d7c789e84e0db411"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs5ail3h",
          "commit": {
            "abbreviatedOid": "3daba8b"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-07-07T14:13:13Z",
          "updatedAt": "2023-07-07T14:13:13Z",
          "comments": []
        },
        {
          "id": "PRR_kwDODddxTs5apS71",
          "commit": {
            "abbreviatedOid": "3daba8b"
          },
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-07-08T19:42:35Z",
          "updatedAt": "2023-07-08T19:42:41Z",
          "comments": [
            {
              "originalPosition": 68,
              "body": "```suggestion\r\nNote that the congestion window and the RTT are dynamic (can change over the lifetime of a connection) and therefore might require\r\n```",
              "createdAt": "2023-07-08T19:42:35Z",
              "updatedAt": "2023-07-08T19:42:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5avOHX",
          "commit": {
            "abbreviatedOid": "32d4eeb"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-10T15:13:29Z",
          "updatedAt": "2023-07-10T15:13:30Z",
          "comments": [
            {
              "originalPosition": 39,
              "body": "```suggestion\r\nloss. Sending an IMMEDIATE_ACK can help to mitigate this problem.\r\n```",
              "createdAt": "2023-07-10T15:13:30Z",
              "updatedAt": "2023-07-10T15:13:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5avOWZ",
          "commit": {
            "abbreviatedOid": "32d4eeb"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-10T15:13:59Z",
          "updatedAt": "2023-07-10T15:13:59Z",
          "comments": [
            {
              "originalPosition": 68,
              "body": "```suggestion\r\nNote that the congestion window and the RTT are dynamic (can change over the\r\nlifetime of a connection) and therefore might require\r\n```",
              "createdAt": "2023-07-10T15:13:59Z",
              "updatedAt": "2023-07-10T15:13:59Z"
            }
          ]
        }
      ]
    },
    {
      "number": 191,
      "id": "PR_kwDODddxTs5QZOWZ",
      "title": "Required behaviour after migration",
      "url": "https://github.com/quicwg/ack-frequency/pull/191",
      "state": "MERGED",
      "author": "gorryfair",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "fixes #189\r\n\r\nThis is in response to #189, which says that an endpoint ought to restore the state for a new path, rather than an RFC2119 recommendation, motivated because the decision to restore depends on whether the path is actually the same.",
      "createdAt": "2023-05-12T14:34:25Z",
      "updatedAt": "2023-07-24T01:37:48Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "80630c9412c17cfac4fc32752251b25cf48d09b9",
      "headRepository": "gorryfair/ack-frequency",
      "headRefName": "patch-8",
      "headRefOid": "d9c0671ebc4317ef526098bad62b490c1d838ed7",
      "closedAt": "2023-07-10T15:19:18Z",
      "mergedAt": "2023-07-10T15:19:18Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "f6a9cfd4a5f6eddc3602f50c90ba751416435f16"
      },
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I don't think this PR is correct. The initial text meant to say that the RTT might change after migration and therefore you might also want to update you ack-frequency info. Not sure what you mean by \"restores the default delay of acknowledgements\", however, the intention is not that any previously provided information in the ack-frequency frame is reset.",
          "createdAt": "2023-07-03T14:54:53Z",
          "updatedAt": "2023-07-03T14:54:53Z"
        },
        {
          "author": "gorryfair",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Please see if the updated text is more suitable. The original text speaks of the number of ACKs, which doesn't seem correct either.",
          "createdAt": "2023-07-03T17:34:00Z",
          "updatedAt": "2023-07-03T17:34:00Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs5Z3AdD",
          "commit": {
            "abbreviatedOid": "9e3f770"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-06-30T17:22:48Z",
          "updatedAt": "2023-06-30T17:22:49Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "```suggestion\r\nconnection ought to send a new ACK_FREQUENCY frame upon confirmation of\r\n```",
              "createdAt": "2023-06-30T17:22:49Z",
              "updatedAt": "2023-06-30T17:22:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5aLrUU",
          "commit": {
            "abbreviatedOid": "82708b6"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-04T14:29:18Z",
          "updatedAt": "2023-07-04T14:29:18Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "I think the term \"restore\" is a bit confusing here. Maybe just this:\r\n\r\n```suggestion\r\nconnection migration with updated information, e.g. to consider the new RTT estimate.\r\n```",
              "createdAt": "2023-07-04T14:29:18Z",
              "updatedAt": "2023-07-04T14:29:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5aimMi",
          "commit": {
            "abbreviatedOid": "8cd7698"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-07-07T14:13:43Z",
          "updatedAt": "2023-07-07T14:13:43Z",
          "comments": []
        },
        {
          "id": "PRR_kwDODddxTs5avQAb",
          "commit": {
            "abbreviatedOid": "8cd7698"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-10T15:17:32Z",
          "updatedAt": "2023-07-10T15:17:32Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "```suggestion\r\nconfirmation of migration (Section 9.4 of [QUIC-TRANSPORT]);\r\n```",
              "createdAt": "2023-07-10T15:17:32Z",
              "updatedAt": "2023-07-10T15:17:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5axgWG",
          "commit": {
            "abbreviatedOid": "d9c0671"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-10T19:56:18Z",
          "updatedAt": "2023-07-24T01:37:47Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "This is discussing the congestion controller resetting and that affecting the pattern of ACKs, but isn't the pattern the same, it's the RTT and amount of data sent that changes?",
              "createdAt": "2023-07-10T19:56:18Z",
              "updatedAt": "2023-07-24T01:37:47Z"
            },
            {
              "originalPosition": 13,
              "body": "I wonder if we should say that the ACK behavior resets on new paths as well when the RTT estimator and congestion controller are reset?  Or is the issue that there could be a disagreement about what type of path change it is (ie: NAT rebind or not)?",
              "createdAt": "2023-07-10T19:57:07Z",
              "updatedAt": "2023-07-24T01:37:47Z"
            }
          ]
        }
      ]
    },
    {
      "number": 192,
      "id": "PR_kwDODddxTs5QZPWT",
      "title": "PMTU can use PING?",
      "url": "https://github.com/quicwg/ack-frequency/pull/192",
      "state": "MERGED",
      "author": "gorryfair",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "fixes #190\r\n\r\nDPLPMTUD would sometimes use ping frames. So, if I understand,  a method using PING frames does not need the immediate ACK function, either one or the other is sufficient.",
      "createdAt": "2023-05-12T14:37:43Z",
      "updatedAt": "2023-07-10T15:30:19Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "80630c9412c17cfac4fc32752251b25cf48d09b9",
      "headRepository": "gorryfair/ack-frequency",
      "headRefName": "patch-9",
      "headRefOid": "8fd0e6fe66d229cbf9e05f8a2767f4e067c77970",
      "closedAt": "2023-07-10T15:30:19Z",
      "mergedAt": "2023-07-10T15:30:19Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "36fe36324c517f52cbc022b62c70cf746102bc46"
      },
      "comments": [
        {
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Acknowledgement of PING frames is not immediate, but can be delayed by up to max_ack_delay. It makes sense to use an IMMEDIATE_ACK frame, so the sender can switch to using the larger MTU as early as possible.",
          "createdAt": "2023-07-01T21:20:22Z",
          "updatedAt": "2023-07-01T21:20:22Z"
        },
        {
          "author": "gorryfair",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I'm less sure, this is always a real advantage, the method would work with PING frames. I expect in most cases the important goal is to avoid black-holing traffic that has too large a size, not saving a fraction of an RTT. I think the PR should allow use with or without IMMEDIATE_ACK frame.",
          "createdAt": "2023-07-02T07:29:14Z",
          "updatedAt": "2023-07-02T07:29:14Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "While potentially a PING frame could be used, it seems a bit out of scope for this document. However, maybe we should change the SHOULD to a MAY then?",
          "createdAt": "2023-07-04T14:48:49Z",
          "updatedAt": "2023-07-04T14:48:49Z"
        },
        {
          "author": "gorryfair",
          "authorAssociation": "CONTRIBUTOR",
          "body": " MAY would also work - it would alert readers to this possibly being a problem and let them decide. I'm happy for this to be resolved as you see fit.",
          "createdAt": "2023-07-04T15:07:01Z",
          "updatedAt": "2023-07-04T15:07:01Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs5ainQj",
          "commit": {
            "abbreviatedOid": "2917f28"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-07T14:15:20Z",
          "updatedAt": "2023-07-07T14:15:20Z",
          "comments": [
            {
              "originalPosition": 3,
              "body": "```suggestion\r\n({{Section 14 of QUIC-TRANSPORT}}). A sender MAY\r\n```",
              "createdAt": "2023-07-07T14:15:20Z",
              "updatedAt": "2023-07-07T14:15:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5ainoy",
          "commit": {
            "abbreviatedOid": "2917f28"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-07T14:15:54Z",
          "updatedAt": "2023-07-07T14:15:55Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\nbundle an IMMEDIATE_ACK frame with any PMTU probes to avoid triggering such\r\n```",
              "createdAt": "2023-07-07T14:15:55Z",
              "updatedAt": "2023-07-07T14:15:55Z"
            }
          ]
        }
      ]
    },
    {
      "number": 193,
      "id": "PR_kwDODddxTs5QZTVz",
      "title": "Avoid conflating credit to move window and CC",
      "url": "https://github.com/quicwg/ack-frequency/pull/193",
      "state": "MERGED",
      "author": "gorryfair",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "fixes #194 ",
      "createdAt": "2023-05-12T14:49:51Z",
      "updatedAt": "2023-07-10T15:20:54Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "80630c9412c17cfac4fc32752251b25cf48d09b9",
      "headRepository": "gorryfair/ack-frequency",
      "headRefName": "patch-10",
      "headRefOid": "450e7f683cc7e3c44f9f20265c28699fc6cd1cef",
      "closedAt": "2023-07-10T15:20:53Z",
      "mergedAt": "2023-07-10T15:20:53Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "b62a3960246beee1a7a2bad788404d0f59a005ae"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs5XkHlm",
          "commit": {
            "abbreviatedOid": "c6f7cf1"
          },
          "author": "gorryfair",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "LGTM",
          "createdAt": "2023-06-08T06:24:46Z",
          "updatedAt": "2023-06-08T06:24:46Z",
          "comments": []
        },
        {
          "id": "PRR_kwDODddxTs5aFYzw",
          "commit": {
            "abbreviatedOid": "c6f7cf1"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-03T14:58:12Z",
          "updatedAt": "2023-07-03T14:58:12Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "```suggestion\r\nA sender can accomplish this by setting the Request Max Ack\r\n```",
              "createdAt": "2023-07-03T14:58:12Z",
              "updatedAt": "2023-07-03T14:58:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5aFZDl",
          "commit": {
            "abbreviatedOid": "3cbe092"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-03T14:58:52Z",
          "updatedAt": "2023-07-03T14:58:52Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "```suggestion\r\nA sender can accomplish this by setting the Request Max Ack\r\nDelay value to no more than the estimated round trip time.\r\nThe sender can also improve feedback and robustness to\r\nvariation in the path RTT by setting the Ack-Eliciting Threshold\r\nto a value no larger than the current congestion window. Alternatively,\r\n```",
              "createdAt": "2023-07-03T14:58:52Z",
              "updatedAt": "2023-07-03T14:58:52Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5ain7E",
          "commit": {
            "abbreviatedOid": "ca965d0"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-07-07T14:16:20Z",
          "updatedAt": "2023-07-07T14:16:20Z",
          "comments": []
        },
        {
          "id": "PRR_kwDODddxTs5apS93",
          "commit": {
            "abbreviatedOid": "ca965d0"
          },
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-08T19:44:34Z",
          "updatedAt": "2023-07-08T19:44:37Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "What is the \"application-limited period\"? I assume you mean when transitioning from the application-limited to the cwnd-limited state?",
              "createdAt": "2023-07-08T19:44:34Z",
              "updatedAt": "2023-07-08T19:44:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5auE4e",
          "commit": {
            "abbreviatedOid": "ca965d0"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-10T12:58:52Z",
          "updatedAt": "2023-07-10T12:58:53Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "Actually, good point. Do we need this addition? Even in an application-limited period, you should send on ack per RTT. Why is this needed? Or do you mean idle period @gorryfair ?",
              "createdAt": "2023-07-10T12:58:53Z",
              "updatedAt": "2023-07-10T12:58:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5auYt7",
          "commit": {
            "abbreviatedOid": "ca965d0"
          },
          "author": "gorryfair",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-10T13:36:12Z",
          "updatedAt": "2023-07-10T13:36:12Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "(This could potentially be confusing as an \"application period\" since \"period of time\" could infer periodicity - English can be used in multiple ways.) \r\n\r\nThat aside, the guidance in the application-limited case ought to be to send an ACK at least once per RTT while there is data outstanding... It's a small additional tweak to request an Immediate ACK as soon as the sender transitions from being application-limited to become cwnd-limited, so that the window is released promptly, rather than delayed by upto an RTT.\r\n\r\nObviously (to me) that when idle, you don't request periodic ACKs....",
              "createdAt": "2023-07-10T13:36:12Z",
              "updatedAt": "2023-07-10T13:36:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5aucNL",
          "commit": {
            "abbreviatedOid": "ca965d0"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-10T13:42:47Z",
          "updatedAt": "2023-07-10T13:42:47Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "```suggestion\r\nround trip time, although if the packet containing an IMMEDIATE_ACK is lost,\r\n```\r\nActually this seems like a separate point. Therefore I would suggest removing it here for now and open a separate issue to add a separate sentence with a reference to RFC7661 potential. Btw where in RFC7661 is that recommendation?\r\n\r\n```suggestion\r\nround trip time or after each application-limited period, although if the packet containing an IMMEDIATE_ACK is lost,\r\n```",
              "createdAt": "2023-07-10T13:42:47Z",
              "updatedAt": "2023-07-10T13:42:48Z"
            }
          ]
        }
      ]
    },
    {
      "number": 196,
      "id": "PR_kwDODddxTs5QZWh8",
      "title": "Add subsection to highlight application-limited cases",
      "url": "https://github.com/quicwg/ack-frequency/pull/196",
      "state": "MERGED",
      "author": "gorryfair",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "fixes #197 ",
      "createdAt": "2023-05-12T14:58:35Z",
      "updatedAt": "2023-07-10T15:21:43Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "80630c9412c17cfac4fc32752251b25cf48d09b9",
      "headRepository": "gorryfair/ack-frequency",
      "headRefName": "patch-11",
      "headRefOid": "ee96547cd7d2ef134b6d01a7ed182d0c061e6ada",
      "closedAt": "2023-07-10T15:21:42Z",
      "mergedAt": "2023-07-10T15:21:42Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "52ee11450b79269f9541e2b6bef39dc4b7f6af47"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs5Xefkk",
          "commit": {
            "abbreviatedOid": "ee96547"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-06-07T13:06:17Z",
          "updatedAt": "2023-06-07T13:06:17Z",
          "comments": []
        },
        {
          "id": "PRR_kwDODddxTs5Z8xNz",
          "commit": {
            "abbreviatedOid": "ee96547"
          },
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-07-01T21:34:29Z",
          "updatedAt": "2023-07-01T21:34:29Z",
          "comments": []
        }
      ]
    },
    {
      "number": 201,
      "id": "PR_kwDODddxTs5SCEt4",
      "title": "Proposed text for reordering threshold.",
      "url": "https://github.com/quicwg/ack-frequency/pull/201",
      "state": "CLOSED",
      "author": "huitema",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "fixes #200 \r\n\r\nMy attempt at resolving issue #200",
      "createdAt": "2023-06-02T20:03:24Z",
      "updatedAt": "2023-07-10T19:55:11Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "d83ce9cc92250eb2ccdeda1a42fdb61f27b6d457",
      "headRepository": "huitema/ack-frequency",
      "headRefName": "reorder-threshold-text",
      "headRefOid": "fcd1b3149d358c221ca771d0e1fc47a508144f76",
      "closedAt": "2023-07-10T19:55:11Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@huitema there is duplicated text in your PR. I tried to resolve it but I don't think the text is fully correct yet. So I think you have to take another look yourself, please!",
          "createdAt": "2023-07-03T14:49:45Z",
          "updatedAt": "2023-07-03T14:49:45Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "NONE",
          "body": "@mirjak I fixed a Kramdown XML issue (missing curly bracket) in an unrelated part, then verified the text output. I do not see duplicated text. Is this some kind of merge conflict?",
          "createdAt": "2023-07-07T14:48:34Z",
          "updatedAt": "2023-07-07T14:48:34Z"
        },
        {
          "author": "huitema",
          "authorAssociation": "NONE",
          "body": "Closing this PR are superceded by #208. Opened issue #213 for tracking the remaining corner case.",
          "createdAt": "2023-07-10T19:55:03Z",
          "updatedAt": "2023-07-10T19:55:03Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs5app7H",
          "commit": {
            "abbreviatedOid": "bc22f87"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-09T08:48:24Z",
          "updatedAt": "2023-07-09T08:48:24Z",
          "comments": [
            {
              "originalPosition": 67,
              "body": "I think this is already true in RFC9000 and I don't think we were intending to change that.",
              "createdAt": "2023-07-09T08:48:24Z",
              "updatedAt": "2023-07-09T08:48:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5app8b",
          "commit": {
            "abbreviatedOid": "bc22f87"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-09T08:49:06Z",
          "updatedAt": "2023-07-09T08:49:06Z",
          "comments": [
            {
              "originalPosition": 59,
              "body": "```suggestion\r\n  Unacked is greater than or equal to the Reordering Threshold.\r\n```",
              "createdAt": "2023-07-09T08:49:06Z",
              "updatedAt": "2023-07-09T08:49:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5app-Y",
          "commit": {
            "abbreviatedOid": "bc22f87"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-09T08:49:54Z",
          "updatedAt": "2023-07-09T08:49:55Z",
          "comments": [
            {
              "originalPosition": 70,
              "body": "I don't think this is needed as it should be covered by case 1",
              "createdAt": "2023-07-09T08:49:54Z",
              "updatedAt": "2023-07-09T08:49:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5ap3_I",
          "commit": {
            "abbreviatedOid": "bc22f87"
          },
          "author": "huitema",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-09T15:45:38Z",
          "updatedAt": "2023-07-09T15:45:38Z",
          "comments": [
            {
              "originalPosition": 70,
              "body": "The case I am addressing there is:\r\n\r\n* threshold is 2.\r\n* the endpoint receives packet 1, no ACK yet because delays. Highest unacked is 1.\r\n* the endpoint receives  packet 3, no ACK yet because the gap to 1 is only one packet.  Highest unacked is 3.\r\n* the endpoint receives packet 5. There is just a one-packet gap to 3, so according to the first rule, no ACK yet. But there are no two holes, 2 and 4, so the endpoint should send an ACK.",
              "createdAt": "2023-07-09T15:45:38Z",
              "updatedAt": "2023-07-09T15:45:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5ap4AE",
          "commit": {
            "abbreviatedOid": "bc22f87"
          },
          "author": "huitema",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-09T15:46:10Z",
          "updatedAt": "2023-07-09T15:46:10Z",
          "comments": [
            {
              "originalPosition": 67,
              "body": "OK. I can remove this note.",
              "createdAt": "2023-07-09T15:46:10Z",
              "updatedAt": "2023-07-09T15:46:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5ap4Jy",
          "commit": {
            "abbreviatedOid": "bc22f87"
          },
          "author": "huitema",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-09T15:52:06Z",
          "updatedAt": "2023-07-09T15:52:06Z",
          "comments": [
            {
              "originalPosition": 70,
              "body": "Come to think of it, we could simplify the specification a lot by just counting the number of unreported missing packets, because rule #3 subsumes rule #1.",
              "createdAt": "2023-07-09T15:52:06Z",
              "updatedAt": "2023-07-09T15:52:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5ap_b5",
          "commit": {
            "abbreviatedOid": "bc22f87"
          },
          "author": "huitema",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-09T21:02:13Z",
          "updatedAt": "2023-07-09T21:02:13Z",
          "comments": [
            {
              "originalPosition": 70,
              "body": "But then, I don't know whether that's what we actually want to say. Starting from the explanation, we want to send an ACK as soon as we detect a condition that cause the missing packet to be repeated. That condition is \"The packet was sent kPacketThreshold packets before an acknowledged packet\". That means the endpoint should track the lowest number missing packet number after the highest acked packet, and compare it to the highest unacked. If the difference is larger or equal to the threshold, it should send an acknowledgement. But the text does not say that.",
              "createdAt": "2023-07-09T21:02:13Z",
              "updatedAt": "2023-07-09T21:02:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5atAEX",
          "commit": {
            "abbreviatedOid": "bc22f87"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-10T10:16:55Z",
          "updatedAt": "2023-07-10T10:16:55Z",
          "comments": [
            {
              "originalPosition": 70,
              "body": "Yes, this is actually what the texts tries to say. It's not about the number of missing packets but the only the gap between the last in-order packet and the last to-be-acked packet. The number of missing packet is not important, just the distance.\r\n\r\nSo in your example above, packet 5 should trigger an ack but also if packet 4 would have arrived in order it should trigger an ack. \r\n\r\nHowever, assuming your case where packet 4 is missing, you send an ACK when packet 5 arrives because of missing packet 2 (which then is a reported missing packet and does not count for future ack decision anymore). However, as soon as packet 6 arrives, you will send another ack to report of missing packet number 4.",
              "createdAt": "2023-07-10T10:16:55Z",
              "updatedAt": "2023-07-10T10:16:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5awNRA",
          "commit": {
            "abbreviatedOid": "fcd1b31"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-10T17:15:15Z",
          "updatedAt": "2023-07-10T17:15:15Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "I think this is redundant to the first bullet if I am reasoning about it correctly?  If there were this many unreported missing packets, wouldn't the first condition be met?",
              "createdAt": "2023-07-10T17:15:15Z",
              "updatedAt": "2023-07-10T17:15:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5aw2gl",
          "commit": {
            "abbreviatedOid": "fcd1b31"
          },
          "author": "huitema",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-10T19:11:22Z",
          "updatedAt": "2023-07-10T19:11:23Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "Check comment above, the case I am addressing there is:\r\n\r\n- threshold is 2.\r\n- the endpoint receives packet 1, no ACK yet because delays. Highest unacked is 1.\r\n- the endpoint receives packet 3, no ACK yet because the gap to 1 is only one packet. Highest unacked is 3.\r\n- the endpoint receives packet 5. There is just a one-packet gap to 3, so according to the first rule, no ACK yet. But there are no two holes, 2 and 4, so the endpoint should send an ACK.\r\n\r\nBut I agree that's still not right. Consider:\r\n\r\n- threshold is 2.\r\n- the endpoint receives packet 1, no ACK yet because delays. Highest unacked is 1.\r\n- the endpoint receives packet 3, no ACK yet because the gap to 1 is only one packet. Highest unacked is 3.\r\n- the endpoint receives packet 4, 5, 6, 7, 8, 9, 10.\r\n\r\nThey are all in sequence, so the \"out of order\" rule does not kick in. Also, there is only one hole, so the \"number of holes\" rule does not kick in either. Yet, if the endpoint acknowledged packet 6, the peer would immediately resend packet 2, because of the number gap rule in RFC 9002. If our goal is to somehow synchronize the sending of ACK with loss detection, then the text ought to focus on the distance between \"lowest missing packet number\" and \"highest unacked\".\r\n\r\nBut then we also need a definition of \"lowest missing packet number\", and that definition has to consider the \"highest number acked\". The easiest implementation is to define that as \"lowest missing packet number among those larger than largest acknowledged number.\" That will cover the example above, but there will be corner cases:\r\n\r\n- threshold is 2.\r\n- the endpoint receives packet 1, no ACK yet because delays. Highest unacked is 1.\r\n- the endpoint receives packet 3, the endpoint send ACK 1, 3, because of ack delay.\r\n- the endpoint receives packet 4, 5, 6, 7, 8, 9, 10.\r\n\r\nAgain, if the endpoint sent ACK 1,3-10, then the peer would immediately repeat packet 2 because of the number rule. So maybe the definition should be \"lowest missing packet number among those larger than largest acknowledged number minus threshold + 1.\"\r\n\r\n\r\n\r\n\r\n",
              "createdAt": "2023-07-10T19:11:22Z",
              "updatedAt": "2023-07-10T19:11:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5axYSJ",
          "commit": {
            "abbreviatedOid": "fcd1b31"
          },
          "author": "huitema",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-10T19:42:42Z",
          "updatedAt": "2023-07-10T19:42:42Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "The first part is actually fixed in PR #208, which includes the correct test on the \"lowest missing number\". I will open a new issue for the corner case using the discussion above, and then close this PR.",
              "createdAt": "2023-07-10T19:42:42Z",
              "updatedAt": "2023-07-10T19:42:42Z"
            }
          ]
        }
      ]
    },
    {
      "number": 202,
      "id": "PR_kwDODddxTs5SabKG",
      "title": "ACK packet carrying frame",
      "url": "https://github.com/quicwg/ack-frequency/pull/202",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "fixes #199",
      "createdAt": "2023-06-07T13:15:13Z",
      "updatedAt": "2025-02-06T13:20:15Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "80630c9412c17cfac4fc32752251b25cf48d09b9",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "mirjak-patch-18",
      "headRefOid": "b807c3a51628d455122874754c55a2bffed22c96",
      "closedAt": "2023-07-10T15:22:16Z",
      "mergedAt": "2023-07-10T15:22:16Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "4127a603cd96b1bc83c2b822c32447b1debfef27"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs5Z6uSd",
          "commit": {
            "abbreviatedOid": "b807c3a"
          },
          "author": "gorryfair",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Looks fine.",
          "createdAt": "2023-07-01T11:24:38Z",
          "updatedAt": "2023-07-01T11:24:38Z",
          "comments": []
        },
        {
          "id": "PRR_kwDODddxTs5Z8rNp",
          "commit": {
            "abbreviatedOid": "b807c3a"
          },
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "I don't think this is necessary, there are many occurrences in RFC 9000 where we talk about the acknowledgement of frames. But it doesn't hurt either.",
          "createdAt": "2023-07-01T21:17:12Z",
          "updatedAt": "2023-07-01T21:17:12Z",
          "comments": []
        }
      ]
    },
    {
      "number": 203,
      "id": "PR_kwDODddxTs5SabpF",
      "title": "Change heading to ECN",
      "url": "https://github.com/quicwg/ack-frequency/pull/203",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "fixes #187",
      "createdAt": "2023-06-07T13:16:24Z",
      "updatedAt": "2025-02-06T13:20:14Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "80630c9412c17cfac4fc32752251b25cf48d09b9",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "mirjak-patch-19",
      "headRefOid": "b3934d07d17567faf7ba09e88be5d28e86dae2f9",
      "closedAt": "2023-07-10T15:22:45Z",
      "mergedAt": "2023-07-10T15:22:44Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "0cf815fc458c9b84339e2ad33fbda4acf4626851"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs5XkNVm",
          "commit": {
            "abbreviatedOid": "b3934d0"
          },
          "author": "gorryfair",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "LGTM",
          "createdAt": "2023-06-08T06:42:13Z",
          "updatedAt": "2023-06-08T06:42:13Z",
          "comments": []
        },
        {
          "id": "PRR_kwDODddxTs5XkNV3",
          "commit": {
            "abbreviatedOid": "b3934d0"
          },
          "author": "gorryfair",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "LGTM",
          "createdAt": "2023-06-08T06:42:14Z",
          "updatedAt": "2023-06-08T06:42:14Z",
          "comments": []
        },
        {
          "id": "PRR_kwDODddxTs5Z8rWf",
          "commit": {
            "abbreviatedOid": "b3934d0"
          },
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-07-01T21:17:40Z",
          "updatedAt": "2023-07-01T21:17:40Z",
          "comments": []
        }
      ]
    },
    {
      "number": 204,
      "id": "PR_kwDODddxTs5Sagnc",
      "title": "Nits Gorry",
      "url": "https://github.com/quicwg/ack-frequency/pull/204",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "fixes #185",
      "createdAt": "2023-06-07T13:23:48Z",
      "updatedAt": "2025-02-06T13:20:14Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "80630c9412c17cfac4fc32752251b25cf48d09b9",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "mirjak-patch-20",
      "headRefOid": "297bd2ba855e3149709d72ff04ea51f8996f1c33",
      "closedAt": "2023-07-10T15:15:01Z",
      "mergedAt": "2023-07-10T15:15:00Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "1fce19c872909adc1f909945a960aa1194e16405"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs5XkN09",
          "commit": {
            "abbreviatedOid": "297bd2b"
          },
          "author": "gorryfair",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "LGTM",
          "createdAt": "2023-06-08T06:43:54Z",
          "updatedAt": "2023-06-08T06:43:54Z",
          "comments": []
        }
      ]
    },
    {
      "number": 206,
      "id": "PR_kwDODddxTs5U7GjG",
      "title": "Remove harmful for reordering threshold > 1",
      "url": "https://github.com/quicwg/ack-frequency/pull/206",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "fixes #195",
      "createdAt": "2023-07-07T14:35:40Z",
      "updatedAt": "2025-02-06T13:20:13Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "80630c9412c17cfac4fc32752251b25cf48d09b9",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "mirjak-patch-21",
      "headRefOid": "797787e9bc25d3c6f1fc5213768931f486494e9e",
      "closedAt": "2023-07-10T15:23:06Z",
      "mergedAt": "2023-07-10T15:23:06Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "a737d51f3fff1aa2d0d7de11449881a31094c1ab"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 207,
      "id": "PR_kwDODddxTs5U7PDJ",
      "title": "change error code to TRANSPORT_PARAMETER_ERROR",
      "url": "https://github.com/quicwg/ack-frequency/pull/207",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "fixes #179",
      "createdAt": "2023-07-07T15:00:58Z",
      "updatedAt": "2025-02-06T13:20:12Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "80630c9412c17cfac4fc32752251b25cf48d09b9",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "mirjak-patch-22",
      "headRefOid": "a68f01054025f8e0a96a745f371d627083d2583d",
      "closedAt": "2023-07-10T15:23:23Z",
      "mergedAt": "2023-07-10T15:23:23Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "0f5dfc9b9b05efaea5f7ffc76dd288296ef7ef7d"
      },
      "comments": [
        {
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Actually, PROTOCOL_VIOLATION is correct here. TRANSPORT_PARAMETER_ERROR should only be used if the error can be detected by a (stateless) frame parser.",
          "createdAt": "2023-07-08T19:36:51Z",
          "updatedAt": "2023-07-08T19:36:51Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Why \"frame\" parser? This is about transport parameter...?",
          "createdAt": "2023-07-09T08:51:09Z",
          "updatedAt": "2023-07-09T08:51:09Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Also note that this check is stateless as it only depends on another transport parameter, namely min_ack_delay, which should be present in the same packet.",
          "createdAt": "2023-07-10T10:53:13Z",
          "updatedAt": "2023-07-10T10:53:13Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "This seems like the correct change to me, but @marten-seemann do you think this is correctly resolved, or should this issue be re-opened?",
          "createdAt": "2023-07-10T19:42:30Z",
          "updatedAt": "2023-07-10T19:42:30Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 208,
      "id": "PR_kwDODddxTs5VErjD",
      "title": "Editorial proposals by @huitema",
      "url": "https://github.com/quicwg/ack-frequency/pull/208",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This PR takes on the editorial changes from PR #201. The actual definition part of the recording threshold might need further discussion and clarification.",
      "createdAt": "2023-07-10T11:02:59Z",
      "updatedAt": "2025-02-06T13:20:11Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "0f5dfc9b9b05efaea5f7ffc76dd288296ef7ef7d",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "mirjak-patch-23",
      "headRefOid": "c144269e10ed9979833f4452c37bdbd306da16f5",
      "closedAt": "2023-07-10T15:30:52Z",
      "mergedAt": "2023-07-10T15:30:52Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "d83ce9cc92250eb2ccdeda1a42fdb61f27b6d457"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 210,
      "id": "PR_kwDODddxTs5VGkFM",
      "title": "Remove SHOULD for 1 ACK/RTT recommendation",
      "url": "https://github.com/quicwg/ack-frequency/pull/210",
      "state": "CLOSED",
      "author": "mirjak",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This PR is basically reverting to some old text to remove the SHOULD here. See further discussion in issue #168",
      "createdAt": "2023-07-10T15:56:54Z",
      "updatedAt": "2025-02-06T13:20:10Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "6686854b85b7739cca905289604abc3ae1e39b2b",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "mirjak-patch-24",
      "headRefOid": "e13e9e771af3a907f7f406725d447cbfa9214e77",
      "closedAt": "2023-07-25T22:21:30Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "gorryfair",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think this is wrong, and we need to keep the SHOULD. RFC8961 (2b) also says as much about the feedback timer:\r\n\"observations SHOULD be taken and incorporated into the RTO at least once per RTT or as frequently as data is exchanged in cases where that happens less frequently than once per RTT.",
          "createdAt": "2023-07-11T14:05:11Z",
          "updatedAt": "2023-07-11T14:05:11Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs5awFfH",
          "commit": {
            "abbreviatedOid": "98ecdb8"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "I'm not a big fan of needed, but this is fine by me.",
          "createdAt": "2023-07-10T16:54:33Z",
          "updatedAt": "2023-07-10T16:55:10Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "nit: I think needed is strong here\r\n\r\n```suggestion\r\nfashion, at least one acknowledgement per round trip is needed when there\r\n```",
              "createdAt": "2023-07-10T16:54:34Z",
              "updatedAt": "2023-07-10T16:55:10Z"
            },
            {
              "originalPosition": 7,
              "body": "```suggestion\r\nTo enable a sender to respond to potential network congestion in a timely\r\n```",
              "createdAt": "2023-07-10T16:54:45Z",
              "updatedAt": "2023-07-10T16:55:10Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5awHkI",
          "commit": {
            "abbreviatedOid": "e13e9e7"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-10T17:00:10Z",
          "updatedAt": "2023-07-10T17:00:11Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "I actually don't think this is the only reason, there's also to avoid being unnecessarily CWND limited.",
              "createdAt": "2023-07-10T17:00:10Z",
              "updatedAt": "2023-07-10T17:00:11Z"
            }
          ]
        }
      ]
    },
    {
      "number": 211,
      "id": "PR_kwDODddxTs5VG7oa",
      "title": "Remove SHOULD from 1 ACK/RTT",
      "url": "https://github.com/quicwg/ack-frequency/pull/211",
      "state": "MERGED",
      "author": "ianswett",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "design"
      ],
      "body": "This is a much more minimal change than #210\r\n\r\nFixes #168.\r\n\r\nCloses #210",
      "createdAt": "2023-07-10T17:03:30Z",
      "updatedAt": "2025-02-06T13:22:21Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "6686854b85b7739cca905289604abc3ae1e39b2b",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "ianswett-should-1ack",
      "headRefOid": "52a8eabfa82277543554062845d79ebdefec6a1d",
      "closedAt": "2023-07-25T22:21:29Z",
      "mergedAt": "2023-07-25T22:21:29Z",
      "mergedBy": "ianswett",
      "mergeCommit": {
        "oid": "e2e095305b8a16ced3bcb078c76dc95962b50eab"
      },
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I actually prefer PR https://github.com/quicwg/ack-frequency/pull/210 as it neutral explain the situation and does even try to say anything about what an endpoint should do. But I guess that might be a matter of taste. No strong opinion.",
          "createdAt": "2023-07-10T19:59:53Z",
          "updatedAt": "2023-07-10T19:59:53Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "I prefer this because the sentence follows a paragraph discussing the possible issues that may arise from reducing the ACK frequency too low.\r\n\r\nI'd also prefer to submit one of these before IETF, because we already discussed this in Yokohama.",
          "createdAt": "2023-07-23T20:17:57Z",
          "updatedAt": "2023-07-23T20:17:57Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs5b71IK",
          "commit": {
            "abbreviatedOid": "0b3b23b"
          },
          "author": "nibanks",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "LGTM, and I agree with your reasoning for using this wording.",
          "createdAt": "2023-07-23T22:41:28Z",
          "updatedAt": "2023-07-23T22:41:28Z",
          "comments": []
        },
        {
          "id": "PRR_kwDODddxTs5cJwiw",
          "commit": {
            "abbreviatedOid": "0b3b23b"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-25T18:07:38Z",
          "updatedAt": "2023-07-25T18:07:38Z",
          "comments": [
            {
              "originalPosition": 3,
              "body": "```suggestion\r\nTo limit the consequences of reduced acknowledgement frequency, \r\n```",
              "createdAt": "2023-07-25T18:07:38Z",
              "updatedAt": "2023-07-25T18:07:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5cJwzR",
          "commit": {
            "abbreviatedOid": "0b3b23b"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-25T18:08:20Z",
          "updatedAt": "2023-07-25T18:08:21Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\nat least one acknowledgement per round trip is needed when\r\n```",
              "createdAt": "2023-07-25T18:08:20Z",
              "updatedAt": "2023-07-25T18:08:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5cJxKr",
          "commit": {
            "abbreviatedOid": "0b3b23b"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-25T18:09:20Z",
          "updatedAt": "2023-07-25T18:09:20Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "This is proposing to take half on the other PR. I would prefer to just state the fact than nessearily giving any sender recommendation. However, I don't have a strong opinion.",
              "createdAt": "2023-07-25T18:09:20Z",
              "updatedAt": "2023-07-25T18:09:21Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5cLioW",
          "commit": {
            "abbreviatedOid": "0b3b23b"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-25T22:06:08Z",
          "updatedAt": "2023-07-25T22:06:09Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\nthere are ack-eliciting packets in flight.\r\n```",
              "createdAt": "2023-07-25T22:06:08Z",
              "updatedAt": "2023-07-25T22:06:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5cLknS",
          "commit": {
            "abbreviatedOid": "3226857"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-25T22:15:47Z",
          "updatedAt": "2023-07-25T22:15:47Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\ncan cause a receiver to send an acknowledgement at least once per round trip\r\n```",
              "createdAt": "2023-07-25T22:15:47Z",
              "updatedAt": "2023-07-25T22:20:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5cLlnz",
          "commit": {
            "abbreviatedOid": "f4b6a03"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-25T22:20:37Z",
          "updatedAt": "2023-07-25T22:20:38Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "```suggestion\r\nwhen there are ack-eliciting packets in flight.\r\n```",
              "createdAt": "2023-07-25T22:20:37Z",
              "updatedAt": "2023-07-25T22:20:38Z"
            }
          ]
        }
      ]
    },
    {
      "number": 212,
      "id": "PR_kwDODddxTs5VH6N-",
      "title": "Decreases the peer's max_ack_delay",
      "url": "https://github.com/quicwg/ack-frequency/pull/212",
      "state": "MERGED",
      "author": "ianswett",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "I believe this is backwards.  The important thing is that if the sender of the ACK_FREQUENCY frame doesn't use the new, smaller ack delay for PTO until it's certain the peer has received it.",
      "createdAt": "2023-07-10T19:50:31Z",
      "updatedAt": "2025-02-06T13:22:20Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "6686854b85b7739cca905289604abc3ae1e39b2b",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "ianswett-decrease-mad",
      "headRefOid": "51cad9960a8bf62baf4d38d74f7259e2ba7ee2af",
      "closedAt": "2023-07-24T02:23:26Z",
      "mergedAt": "2023-07-24T02:23:26Z",
      "mergedBy": "ianswett",
      "mergeCommit": {
        "oid": "819b4ef2338e99d6517d41dd190333509f40b8b0"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs5axj7a",
          "commit": {
            "abbreviatedOid": "51cad99"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-07-10T20:00:52Z",
          "updatedAt": "2023-07-10T20:00:52Z",
          "comments": []
        }
      ]
    },
    {
      "number": 216,
      "id": "PR_kwDODddxTs5WYhPw",
      "title": "Give IMMEDIATE_ACK a 1 byte codepoint",
      "url": "https://github.com/quicwg/ack-frequency/pull/216",
      "state": "MERGED",
      "author": "ianswett",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #181 by making IMMEDIATE_ACK 0x1f\r\n\r\nACK_FREQUENCY already has a 2 byte codepoint.\r\n\r\nAlso changes the transport parameter value, because this is not backwards compatible.",
      "createdAt": "2023-07-25T22:35:07Z",
      "updatedAt": "2025-02-06T13:20:08Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "e2e095305b8a16ced3bcb078c76dc95962b50eab",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "ianswett-2bytes",
      "headRefOid": "22459195954fc44931fd7bc32e9e400b4f39bd77",
      "closedAt": "2023-10-23T16:00:24Z",
      "mergedAt": "2023-10-23T16:00:24Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "5df318c12ff84a366ed3505057642bd37db7c8cf"
      },
      "comments": [
        {
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I don't think this PR achieves the intended effect.\r\n0xaf = 175\r\n0xaccf = 44239\r\nThe 1-byte range ends at 63, the 2-byte range at 16383: https://datatracker.ietf.org/doc/html/rfc9000#name-variable-length-integer-enc. Therefore 0xaf is a 2-byte value, whereas 0xaccf is a 4-byte value.",
          "createdAt": "2023-07-25T23:01:55Z",
          "updatedAt": "2023-07-25T23:01:55Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks, I was having that thought, but assumed I must be mistaken.\r\n\r\nIn that case, the existing value already was a 2 byte value and we don't need to change any text in the draft, correct?",
          "createdAt": "2023-07-26T00:38:54Z",
          "updatedAt": "2023-07-26T00:38:54Z"
        },
        {
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Not for this frame.\r\nIMMEDIATE_ACK is still at 0xac (= 172), which is a 2-byte code point.",
          "createdAt": "2023-07-26T01:14:34Z",
          "updatedAt": "2023-07-26T01:14:34Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "I was just thinking that.  Any suggested frame values for IMMEDIATE_ACK?",
          "createdAt": "2023-07-26T21:15:49Z",
          "updatedAt": "2023-07-26T21:15:49Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "Assuming that there is nothing attractive as a abbreviation, maybe it would be a good idea to pick the smallest unused value?\r\n\r\nFrom the pretty restricted 1-byte number space, we picked QUIC v1 frame numbers in order. Why not continue doing that?",
          "createdAt": "2023-07-26T22:56:36Z",
          "updatedAt": "2023-07-26T22:56:36Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Actually at this point we probably should set them to TBD and then let them be picked and assigned by the experts when the RFC gets published. I think we can keep the old ones for experimentation (however, we never officially registered them which we should have done). I would assume the experts would then just pick the next one in order.",
          "createdAt": "2023-07-26T23:27:58Z",
          "updatedAt": "2023-07-26T23:27:58Z"
        },
        {
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "body": "We'll need implementation and interop before we can get to RFC. We need code points to do that. Asking for a provisional registration right now, for the value we intend to use later seems ok given the stage we are at.",
          "createdAt": "2023-07-26T23:34:26Z",
          "updatedAt": "2023-07-26T23:34:26Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The values 0x00 to 0x3f require standards Action and can only be assigned as soon as the RFC is published. Therefore I basically suggest to keep using the current values for experimentation and only assign the final values on publication.",
          "createdAt": "2023-07-26T23:38:55Z",
          "updatedAt": "2023-07-26T23:38:55Z"
        },
        {
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "body": "Per https://datatracker.ietf.org/doc/html/rfc9000#section-22.1.4\r\n\r\n> The creation of a registry MAY identify a range of codepoints where registrations are governed by a different registration policy. For instance, the \"QUIC Frame Types\" registry ([Section 22.4](https://datatracker.ietf.org/doc/html/rfc9000#iana-frames)) has a stricter policy for codepoints in the range from 0 to 63.Any stricter requirements for permanent registrations do not prevent provisional registrations for affected codepoints. For instance, a provisional registration for a frame type of 61 could be requested.All registrations made by Standards Track publications MUST be permanent.\r\n\r\nMy read is that we actually allow the provisional registration in the low code point space",
          "createdAt": "2023-07-26T23:41:46Z",
          "updatedAt": "2023-07-26T23:41:46Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Ah, I only read this one:\r\n\r\n\"Permanent registrations in this registry are assigned using the Specification Required policy ([Section 4.6](https://www.rfc-editor.org/rfc/rfc8126#section-4.6) of [[RFC8126](https://datatracker.ietf.org/doc/html/rfc8126)]), except for values between 0x00 and 0x3f (in hexadecimal), inclusive, which are assigned using Standards Action or IESG Approval as defined in Sections [4.9](https://www.rfc-editor.org/rfc/rfc8126#section-4.9) and [4.10](https://www.rfc-editor.org/rfc/rfc8126#section-4.10) of [[RFC8126](https://datatracker.ietf.org/doc/html/rfc8126)].\"\r\n\r\nBut I guess the text you cite above says that provisional registration are always only \"Specification required\". That seem to circumvent the registration policy a bit. But I guess that's what it says.\r\n\r\nI think I both cases we should actually registered the code point(s) before submitting a new draft, especially if we want to ue the initial range.\r\n\r\nBut again given there is already a number we are squatting on, I propose we keep that for experimentation and assign the final number on publication. That ensures that we don't do any additional changes anymore that would burn that code point.\r\n\r\n",
          "createdAt": "2023-07-26T23:53:14Z",
          "updatedAt": "2023-07-26T23:53:14Z"
        },
        {
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "body": "Sounds reasonable to me. Caveat: I am not a DE and have not yet tried this extension ",
          "createdAt": "2023-07-27T02:25:48Z",
          "updatedAt": "2023-07-27T02:25:48Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@ianswett should we discuss this further?",
          "createdAt": "2023-08-28T15:12:37Z",
          "updatedAt": "2023-08-28T15:12:37Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "I'm happy to close this and then register permanent codepoints for the final draft.",
          "createdAt": "2023-09-02T21:31:57Z",
          "updatedAt": "2023-09-02T21:31:57Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "I've updated the PR to reflect the values I believe we should request from IANA.",
          "createdAt": "2023-09-09T17:34:14Z",
          "updatedAt": "2023-09-09T17:34:14Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Codepoint in those ranges need standard action based on RFC9000. This those values can only be assigned when publication is approved. We should not put them in the draft now.",
          "createdAt": "2023-09-18T11:30:48Z",
          "updatedAt": "2023-09-18T11:30:48Z"
        },
        {
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "body": "I'm confused because the PR title doesn't match the content, so not 100% clear what the intent is.\r\n\r\nRegardless, we can in theory request early-assignment per https://datatracker.ietf.org/doc/html/rfc7120. Perhaps that's a bit too early since we want some more interop but let the chairs know if you want to pursue it.",
          "createdAt": "2023-09-18T11:59:58Z",
          "updatedAt": "2023-09-18T11:59:58Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "Title was out of date and has been updated.\r\n\r\nMy only reason for preferring to ask for the codepoints now would be to avoid the complexity of 1 vs 2 byte IMMEDIATE_ACK frames for those who haven't yet shipped the 2 byte version, which includes me.  Otherwise, I think it's fine to wait.\r\n\r\nThat being said, given you have to negotiate the extension to have these frame types be valid, the only issue is if another extension tries using the same codepoint without registering it and one wants to use both extensions at once.  But that does seem to be the point of provisional registrations with IANA, so maybe we should register it now?",
          "createdAt": "2023-09-18T12:48:39Z",
          "updatedAt": "2023-09-18T12:48:39Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The two options are we either a) ask for provisional registration now (which we should have done for the all other codepoints anyway) and wait for draft submission until assigned. Or b) we submit now with the old values and start last call right away in order to get this done quickly.",
          "createdAt": "2023-09-18T14:07:53Z",
          "updatedAt": "2023-09-18T14:07:53Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I've put in a provisional registration request to IANA for 0x1f and 0xaf frame types. I'm also requesting provisional registration for the new transport parameter 0xff04de1b.\r\n\r\nShould we anyway also registered the old values (transport parameter 0xff04de1a and frame type 0xac) or are we sure these have never been deployed?\r\n\r\nAlso I want to note that while it is true that frames are only valid if an extension is negotiated, by creating this registry we basically have we only have one number space for all extensions and I don't think we intended to have multiple entries for the same value in the registry...? It is true that it is easier to re-use provisional assignment because you have to negotiate a transport parameter, however, not sure if that was really the intention with this process.\r\n",
          "createdAt": "2023-10-16T15:00:53Z",
          "updatedAt": "2023-10-16T15:00:53Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I updated this PR to request permanent allocation on approval for publication. I assume we want a new, shorter transport parameter for the final RFC, right?",
          "createdAt": "2023-10-16T15:09:04Z",
          "updatedAt": "2023-10-16T15:09:04Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "I think we'll want a new, shorter TP for the RFC, yes.",
          "createdAt": "2023-10-16T15:36:35Z",
          "updatedAt": "2023-10-16T15:36:35Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs5eHMSL",
          "commit": {
            "abbreviatedOid": "79b5231"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2023-08-15T16:12:29Z",
          "updatedAt": "2023-08-15T16:21:34Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\n  Type (i) = TBD,\r\n```",
              "createdAt": "2023-08-15T16:12:29Z",
              "updatedAt": "2023-08-15T16:21:34Z"
            },
            {
              "originalPosition": 14,
              "body": "```suggestion\r\nQUIC-TRANSPORT}}, ACK_FREQUENCY frames have a type of TBD1, and contain the\r\n```",
              "createdAt": "2023-08-15T16:12:46Z",
              "updatedAt": "2023-08-15T16:21:34Z"
            },
            {
              "originalPosition": 23,
              "body": "```suggestion\r\nTBD1     | ACK_FREQUENCY       | {{ack-frequency-frame}}\r\n```",
              "createdAt": "2023-08-15T16:13:08Z",
              "updatedAt": "2023-08-15T16:21:34Z"
            },
            {
              "originalPosition": 24,
              "body": "```suggestion\r\nTBD2       | IMMEDIATE_ACK       | {{immediate-ack-frame}}\r\n```",
              "createdAt": "2023-08-15T16:16:23Z",
              "updatedAt": "2023-08-15T16:21:34Z"
            },
            {
              "originalPosition": 26,
              "body": "```suggestion\r\n\r\n0xaf has been used for the ACK_FEQUENCY frame type and 0xac for the IMMEDIATE_ACK frame type for experimentation. IANA is requested to replace \"TBD1\" with the next available 2-byte value, and \"TDB2\" with the next available 1-byte value before publication.\r\n```",
              "createdAt": "2023-08-15T16:21:22Z",
              "updatedAt": "2023-08-15T16:21:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5k6BpB",
          "commit": {
            "abbreviatedOid": "132e293"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-23T15:54:29Z",
          "updatedAt": "2023-10-23T15:54:29Z",
          "comments": [
            {
              "originalPosition": 25,
              "body": "```suggestion\r\nThe following entry in {{transport-parameters}} has been requested to be provisionally added to\r\n```",
              "createdAt": "2023-10-23T15:54:29Z",
              "updatedAt": "2023-10-23T15:54:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5k6Byv",
          "commit": {
            "abbreviatedOid": "132e293"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-10-23T15:54:49Z",
          "updatedAt": "2023-10-23T15:54:50Z",
          "comments": [
            {
              "originalPosition": 41,
              "body": "```suggestion\r\nThe following frame types have requested to be provisionally added to the \"QUIC Frame Types\"\r\n```",
              "createdAt": "2023-10-23T15:54:50Z",
              "updatedAt": "2023-10-23T15:54:50Z"
            }
          ]
        }
      ]
    },
    {
      "number": 217,
      "id": "PR_kwDODddxTs5WYqRS",
      "title": "Recommend sending an ACK after a long period of idle",
      "url": "https://github.com/quicwg/ack-frequency/pull/217",
      "state": "MERGED",
      "author": "ianswett",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "From the discussion of #209 in the QUIC WG meeting",
      "createdAt": "2023-07-25T23:20:51Z",
      "updatedAt": "2025-02-06T13:22:22Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "e2e095305b8a16ced3bcb078c76dc95962b50eab",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "ianswett-idle-acks",
      "headRefOid": "2319a62a032f022b5a8049c210c8938cc10d64a0",
      "closedAt": "2023-09-02T22:55:26Z",
      "mergedAt": "2023-09-02T22:55:26Z",
      "mergedBy": "ianswett",
      "mergeCommit": {
        "oid": "c7e2418133150ab80e56bb192acebbb88b2038b3"
      },
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "The text seems more or less fine to my but think again about this: doesn't the max_ack_delay solve that problem automatically?",
          "createdAt": "2023-07-26T17:40:03Z",
          "updatedAt": "2023-08-07T14:13:26Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@ianswett  can you please review my proposed text?",
          "createdAt": "2023-08-28T15:11:58Z",
          "updatedAt": "2023-08-28T15:11:58Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks @mirjak.  I accepted your suggestion and then followed up with some small changes.  I also changed 'immediately' to 'soon'.  I'm not sure if we want to be more precise here (ie: within 1/4 of SRTT?)?",
          "createdAt": "2023-09-02T21:42:11Z",
          "updatedAt": "2023-09-02T21:42:11Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs5cQqNk",
          "commit": {
            "abbreviatedOid": "72dbec3"
          },
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-07-26T14:26:04Z",
          "updatedAt": "2023-07-26T14:26:04Z",
          "comments": []
        },
        {
          "id": "PRR_kwDODddxTs5eHQFN",
          "commit": {
            "abbreviatedOid": "72dbec3"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-08-15T16:22:23Z",
          "updatedAt": "2023-08-15T16:22:23Z",
          "comments": []
        },
        {
          "id": "PRR_kwDODddxTs5fRz8b",
          "commit": {
            "abbreviatedOid": "72dbec3"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-28T15:11:30Z",
          "updatedAt": "2023-08-28T15:11:31Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "I don't think we should use normative language here as, as the text says, this is not an issue caused by this document and it's not needed for interoperability. \r\n```suggestion\r\nWhen no acknowledgements have been sent in a long time, receiving feedback as soon\r\nas possible is important to e.g. update stale RTT measurements.  To encounter this problem, \r\nreceivers are encouraged to send an acknowledgement immediately upon receiving an\r\nack-eliciting packet when no acknowledgement has been sent in over one smoothed\r\nround trip time.  This is not an issue specific to this document, but the mechanisms \r\nspecified herein could exacerbate the issue by adding feedback delays.\r\n```",
              "createdAt": "2023-08-28T15:11:30Z",
              "updatedAt": "2023-08-28T15:11:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5f3gx8",
          "commit": {
            "abbreviatedOid": "20637aa"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-02T22:26:04Z",
          "updatedAt": "2023-09-02T22:26:05Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "```suggestion\r\nreceivers are encouraged to send an acknowledgement soon after receiving an\r\n```",
              "createdAt": "2023-09-02T22:26:04Z",
              "updatedAt": "2023-09-02T22:26:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5f3gzX",
          "commit": {
            "abbreviatedOid": "820968c"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-02T22:27:24Z",
          "updatedAt": "2023-09-02T22:27:25Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "```suggestion\r\nspecified herein could create excessive delays.\r\n```",
              "createdAt": "2023-09-02T22:27:24Z",
              "updatedAt": "2023-09-02T22:27:25Z"
            }
          ]
        }
      ]
    },
    {
      "number": 218,
      "id": "PR_kwDODddxTs5WYsir",
      "title": "Recommend eliciting an ACK soon after idle",
      "url": "https://github.com/quicwg/ack-frequency/pull/218",
      "state": "MERGED",
      "author": "ianswett",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #209",
      "createdAt": "2023-07-25T23:30:11Z",
      "updatedAt": "2025-02-06T13:22:21Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "e2e095305b8a16ced3bcb078c76dc95962b50eab",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "ianswett-elicit-ack",
      "headRefOid": "d79da353e6ca8e19be4df44578b92460c1fd70bf",
      "closedAt": "2023-09-02T22:24:52Z",
      "mergedAt": "2023-09-02T22:24:52Z",
      "mergedBy": "ianswett",
      "mergeCommit": {
        "oid": "2d55d2af39c5fb8f350018880c23536dff3f133c"
      },
      "comments": [
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks for the comments, hopefully this is clearer, though I'm open to improvements.",
          "createdAt": "2023-08-09T21:31:50Z",
          "updatedAt": "2023-08-09T21:31:50Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@ianswett can you review my proposed changes?",
          "createdAt": "2023-08-28T15:02:56Z",
          "updatedAt": "2023-08-28T15:02:56Z"
        },
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "I thought this had approvals, but it did not.  Please feel free to suggest follow-up changes.",
          "createdAt": "2023-09-04T17:14:05Z",
          "updatedAt": "2023-09-04T17:14:05Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs5cNCdZ",
          "commit": {
            "abbreviatedOid": "540458c"
          },
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-07-26T06:31:51Z",
          "updatedAt": "2023-07-26T06:32:13Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "This sentence doesn't parse.",
              "createdAt": "2023-07-26T06:31:51Z",
              "updatedAt": "2023-07-26T06:32:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5dTpjB",
          "commit": {
            "abbreviatedOid": "540458c"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-07T14:15:52Z",
          "updatedAt": "2023-08-07T14:15:52Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "```suggestion\r\nWhen a sender knows there are no inflight packets, no acknowledgements will be\r\n```",
              "createdAt": "2023-08-07T14:15:52Z",
              "updatedAt": "2023-08-07T14:15:52Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5dTpvi",
          "commit": {
            "abbreviatedOid": "540458c"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-07T14:16:00Z",
          "updatedAt": "2023-08-07T14:16:01Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "```suggestion\r\nIt is RECOMMENDED the sender sends an IMMEDIATE_ACK or ACK_FREQUENCY frame in this\r\n```",
              "createdAt": "2023-08-07T14:16:01Z",
              "updatedAt": "2023-08-07T14:16:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5dnTt5",
          "commit": {
            "abbreviatedOid": "9d9d722"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-09T21:28:19Z",
          "updatedAt": "2023-08-09T21:28:19Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\nWhen resuming sending when there are no inflight packets, no acknowledgements will be\r\nreceived for a single round trip.  Additionally, the Max Ack Delay and Ack-Eliciting Threshold\r\nvalues used by the receiver will further delay acknowledgements.\r\n```",
              "createdAt": "2023-08-09T21:28:19Z",
              "updatedAt": "2023-08-09T21:30:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5dnUrU",
          "commit": {
            "abbreviatedOid": "49645f0"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-09T21:30:58Z",
          "updatedAt": "2023-08-09T21:30:58Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\nreceived for a single round trip.  Additionally, the Max Ack Delay and Ack-Eliciting\r\nThreshold values used by the receiver will further delay acknowledgements.\r\n```",
              "createdAt": "2023-08-09T21:30:58Z",
              "updatedAt": "2023-08-09T21:30:58Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5eHQZi",
          "commit": {
            "abbreviatedOid": "6df3537"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-15T16:23:16Z",
          "updatedAt": "2023-08-15T16:23:16Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\nThreshold values used by the receiver can further delay acknowledgements.\r\n```",
              "createdAt": "2023-08-15T16:23:16Z",
              "updatedAt": "2023-08-15T16:23:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5eHRkh",
          "commit": {
            "abbreviatedOid": "6df3537"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-15T16:24:53Z",
          "updatedAt": "2023-08-15T16:24:54Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "```suggestion\r\nIn this case the sender can send an IMMEDIATE_ACK or ACK_FREQUENCY frame together with the first data frame\r\nto avoid sending for substantially more than a round trip without any\r\n```",
              "createdAt": "2023-08-15T16:24:53Z",
              "updatedAt": "2023-08-15T16:24:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5eHRzm",
          "commit": {
            "abbreviatedOid": "6df3537"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-15T16:25:34Z",
          "updatedAt": "2023-08-15T16:25:34Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "I don't think we need normative language as this is really not an intro issue.",
              "createdAt": "2023-08-15T16:25:34Z",
              "updatedAt": "2023-08-15T16:25:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5f3gqV",
          "commit": {
            "abbreviatedOid": "ad8bb1f"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-02T22:23:02Z",
          "updatedAt": "2023-09-02T22:23:03Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\nvalues used by the receiver can further delay acknowledgements.  In this case, the\r\n```",
              "createdAt": "2023-09-02T22:23:03Z",
              "updatedAt": "2023-09-02T22:23:03Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5f3gu0",
          "commit": {
            "abbreviatedOid": "5da40fb"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-02T22:23:42Z",
          "updatedAt": "2023-09-02T22:23:43Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "```suggestion\r\nfor an acknowledgement.\r\n```",
              "createdAt": "2023-09-02T22:23:42Z",
              "updatedAt": "2023-09-02T22:23:43Z"
            }
          ]
        }
      ]
    },
    {
      "number": 219,
      "id": "PR_kwDODddxTs5X_KRO",
      "title": "redefine unreported missing packets",
      "url": "https://github.com/quicwg/ack-frequency/pull/219",
      "state": "CLOSED",
      "author": "mirjak",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "fixes #213",
      "createdAt": "2023-08-15T16:32:21Z",
      "updatedAt": "2025-02-06T13:20:08Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "e2e095305b8a16ced3bcb078c76dc95962b50eab",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "mirjak-patch-25",
      "headRefOid": "3276f4a4083064ec5d0f8d8519bc2a25c9694e15",
      "closedAt": "2023-09-05T08:45:08Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs5eHipL",
          "commit": {
            "abbreviatedOid": "5a33986"
          },
          "author": "huitema",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "Just one tiny nit...",
          "createdAt": "2023-08-15T17:09:54Z",
          "updatedAt": "2023-08-15T17:10:09Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "Maybe \"Packets with packet numbers *that* have not yet been received\"?",
              "createdAt": "2023-08-15T17:09:54Z",
              "updatedAt": "2023-08-15T17:10:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5eHn6V",
          "commit": {
            "abbreviatedOid": "5a33986"
          },
          "author": "huitema",
          "authorAssociation": "NONE",
          "state": "CHANGES_REQUESTED",
          "body": "Actually, it is more complex than moving text around.",
          "createdAt": "2023-08-15T17:25:45Z",
          "updatedAt": "2023-08-15T17:26:16Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "But I don't think that captures the corner case. The issue is:\r\n\r\n* assume threshold is 2\r\n* endpoint sends ACK[0-3, 5], highest acked number is now 5 \r\n* endpoint receives packet number 6, 7.\r\n* with current text, no ACK is being sent.\r\n\r\nYet in that corner case the endpoint SHOULD send an ACK immediately, because of the hole between 3 and 5. \r\n\r\nMy suggested text would be:\r\n~~~\r\nStart of Unreported Range:\r\n: Largest Unacked minus (Reordering Threshold minus 1).\r\nUnreported Missing:\r\n: Packets with packet numbers between the Start of Unreported Range\r\n  and Largest Acked that have not yet been received.\r\n~~~",
              "createdAt": "2023-08-15T17:25:45Z",
              "updatedAt": "2023-08-15T17:26:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5eTi89",
          "commit": {
            "abbreviatedOid": "5a33986"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-17T09:29:53Z",
          "updatedAt": "2023-08-17T09:29:53Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "Why is this a corner case?\r\n\r\nThe text says:\r\n\r\n`send an immediate ACK when the gap between the smallest Unreported Missing packet and the Largest Unacked is greater than or equal to the Reordering Threshold value.`\r\n\r\nsmallest unreported missing = 4\r\nlargest unacked = 7\r\n7-4 = 3 > 2\r\n\r\nActually the immediate ACK is already send when packet 6 is received.",
              "createdAt": "2023-08-17T09:29:53Z",
              "updatedAt": "2023-08-17T09:29:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5eTjMW",
          "commit": {
            "abbreviatedOid": "5a33986"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-17T09:30:25Z",
          "updatedAt": "2023-08-17T09:30:26Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\n: Packets with packet numbers that have not (yet) been received starting from\r\n```",
              "createdAt": "2023-08-17T09:30:26Z",
              "updatedAt": "2023-08-17T09:30:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5fRvW0",
          "commit": {
            "abbreviatedOid": "3276f4a"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-08-28T15:02:01Z",
          "updatedAt": "2023-08-28T15:02:01Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "@huitema can you further explain?",
              "createdAt": "2023-08-28T15:02:01Z",
              "updatedAt": "2023-08-28T15:02:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5f9Tcz",
          "commit": {
            "abbreviatedOid": "3276f4a"
          },
          "author": "huitema",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-04T19:20:59Z",
          "updatedAt": "2023-09-05T00:05:43Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "The question that I start with: Would sending an ACK now trigger a new loss detection? If the answer is yes, the endpoint should send an ACK. If the answer is no, then the endpoint can ask different questions, e.g., \"is it time to send an ACK\"?\r\n\r\nThe corner case is this:\r\n- receiver has seen packets 0, 1, 2, 3, and 5, and has sent an ACK, with largest acked = 5. At that point, with the current definition, there are no \"unreported missing\" packet.\r\n- receiver receives packet 6. There are still no unreported missing packets. So the receiver does not send a new ACK.\r\n- but if the \"unreported missing\" included packet 4, the receiver would send a new ACK, and it would trigger a loss detection.\r\n\r\nThe problem is thus the current definition of the \"unreported missing\" set.",
              "createdAt": "2023-09-04T19:20:59Z",
              "updatedAt": "2023-09-05T00:05:43Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5f9sXH",
          "commit": {
            "abbreviatedOid": "5a33986"
          },
          "author": "huitema",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-05T00:06:31Z",
          "updatedAt": "2023-09-05T00:06:31Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "This is being fixed in #222",
              "createdAt": "2023-09-05T00:06:31Z",
              "updatedAt": "2023-09-05T00:06:31Z"
            }
          ]
        }
      ]
    },
    {
      "number": 220,
      "id": "PR_kwDODddxTs5ZgHqP",
      "title": "Immediate ACKs are good for PTO",
      "url": "https://github.com/quicwg/ack-frequency/pull/220",
      "state": "MERGED",
      "author": "ianswett",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #214",
      "createdAt": "2023-09-04T16:22:25Z",
      "updatedAt": "2025-02-06T13:22:25Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "c7e2418133150ab80e56bb192acebbb88b2038b3",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "ianswett-immediate-ack-pto",
      "headRefOid": "0792da65b457d727b3c5ce99eb12026f6bb6dfba",
      "closedAt": "2023-09-09T16:58:01Z",
      "mergedAt": "2023-09-09T16:58:01Z",
      "mergedBy": "ianswett",
      "mergeCommit": {
        "oid": "bcc56240f08cac08b628ce5a975b47dfa8b9fae2"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs5f_znQ",
          "commit": {
            "abbreviatedOid": "ed59afa"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-05T08:53:46Z",
          "updatedAt": "2023-09-05T08:53:47Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "Why would you rather skip packet numbers than using immediate_ack? I would say immediate_ack is the more explicit solution and we should only recommend that.",
              "createdAt": "2023-09-05T08:53:46Z",
              "updatedAt": "2023-09-05T08:53:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5gevnu",
          "commit": {
            "abbreviatedOid": "ed59afa"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-09-09T16:56:01Z",
          "updatedAt": "2023-09-09T16:56:01Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "Fair point, updated.",
              "createdAt": "2023-09-09T16:56:01Z",
              "updatedAt": "2023-09-09T16:56:01Z"
            }
          ]
        }
      ]
    },
    {
      "number": 221,
      "id": "PR_kwDODddxTs5ZgRla",
      "title": "Don't use Min RTT to set max_ack_delay",
      "url": "https://github.com/quicwg/ack-frequency/pull/221",
      "state": "MERGED",
      "author": "ianswett",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #215",
      "createdAt": "2023-09-04T17:03:26Z",
      "updatedAt": "2025-02-06T13:22:24Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "c7e2418133150ab80e56bb192acebbb88b2038b3",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "ianswett-min-rtt",
      "headRefOid": "d5eee0725385255ec4d5ba896e62cad22673298a",
      "closedAt": "2023-09-09T16:54:50Z",
      "mergedAt": "2023-09-09T16:54:50Z",
      "mergedBy": "ianswett",
      "mergeCommit": {
        "oid": "7719028a5b7575bd3b501d950e9060cbfa52e4a5"
      },
      "comments": [
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks for the suggestions, I took all of them.",
          "createdAt": "2023-09-09T16:55:11Z",
          "updatedAt": "2023-09-09T16:55:11Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs5f_wkO",
          "commit": {
            "abbreviatedOid": "801259e"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-09-05T08:47:18Z",
          "updatedAt": "2023-09-05T08:47:18Z",
          "comments": []
        },
        {
          "id": "PRR_kwDODddxTs5f_xjq",
          "commit": {
            "abbreviatedOid": "801259e"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "Minor editorial proposals, plus one typo",
          "createdAt": "2023-09-05T08:49:24Z",
          "updatedAt": "2023-09-05T08:51:57Z",
          "comments": [
            {
              "originalPosition": 4,
              "body": "```suggestion\r\nWhen setting the Request Max Ack Delay as a function of RTT, it is usually\r\n```\r\nIn order to avoid \"typical\" twice...",
              "createdAt": "2023-09-05T08:49:24Z",
              "updatedAt": "2023-09-05T08:51:57Z"
            },
            {
              "originalPosition": 6,
              "body": "```suggestion\r\nestimate of the typical round trip time, but not Min RTT. This avoids eliciting an\r\n```",
              "createdAt": "2023-09-05T08:49:58Z",
              "updatedAt": "2023-09-05T08:51:57Z"
            },
            {
              "originalPosition": 7,
              "body": "```suggestion\r\nunnecessarily high number of acknowledgements when min_rtt is much smaller than\r\n```",
              "createdAt": "2023-09-05T08:50:55Z",
              "updatedAt": "2023-09-05T08:51:58Z"
            }
          ]
        }
      ]
    },
    {
      "number": 222,
      "id": "PR_kwDODddxTs5ZgvZc",
      "title": "Send an immediate ACK when loss can be detected",
      "url": "https://github.com/quicwg/ack-frequency/pull/222",
      "state": "MERGED",
      "author": "ianswett",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Given the specified Reordering Threshold.\r\n\r\nThis is possible either when the delayed ACK timer or the Ack-Eliciting Threshold causes an ACK to be sent before the packet can be declared immediately lost, but with a higher Largest Acked than the missing packet.\r\n\r\nFixes #213\r\nCloses #219 ",
      "createdAt": "2023-09-04T19:26:24Z",
      "updatedAt": "2025-02-06T13:22:23Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "c7e2418133150ab80e56bb192acebbb88b2038b3",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "ianswett-corner-case",
      "headRefOid": "557dd927b3538151fe73254dd048834221373096",
      "closedAt": "2023-09-05T08:45:06Z",
      "mergedAt": "2023-09-05T08:45:06Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "2489a6fbaa23cd728d5ba58237ffa3ab8c0eca43"
      },
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Okay now I understand the problem. Will merge!",
          "createdAt": "2023-09-05T08:45:02Z",
          "updatedAt": "2023-09-05T08:45:02Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs5f9roj",
          "commit": {
            "abbreviatedOid": "557dd92"
          },
          "author": "huitema",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "I think that does fix the corner case in issue #213.",
          "createdAt": "2023-09-05T00:02:48Z",
          "updatedAt": "2023-09-05T00:03:31Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "Yes. I was arriving at the same formula.",
              "createdAt": "2023-09-05T00:02:48Z",
              "updatedAt": "2023-09-05T00:03:31Z"
            }
          ]
        }
      ]
    },
    {
      "number": 223,
      "id": "PR_kwDODddxTs5eKhVf",
      "title": "Fixes",
      "url": "https://github.com/quicwg/ack-frequency/pull/223",
      "state": "MERGED",
      "author": "martinthomson",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Basic stuff, really",
      "createdAt": "2023-10-30T20:45:01Z",
      "updatedAt": "2023-11-02T17:47:52Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "5df318c12ff84a366ed3505057642bd37db7c8cf",
      "headRepository": "martinthomson/ack-frequency",
      "headRefName": "patch-2",
      "headRefOid": "446d0ef1b46611ccbe8982929bb36ca01888593b",
      "closedAt": "2023-11-02T17:47:52Z",
      "mergedAt": "2023-11-02T17:47:52Z",
      "mergedBy": "ianswett",
      "mergeCommit": {
        "oid": "60d50182b197e50ce947c7f8a61defc7ea28391c"
      },
      "comments": [
        {
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "body": "Thanks Martin.",
          "createdAt": "2023-11-02T17:47:49Z",
          "updatedAt": "2023-11-02T17:47:49Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs5loMTT",
          "commit": {
            "abbreviatedOid": "446d0ef"
          },
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-10-30T20:46:16Z",
          "updatedAt": "2023-10-30T20:46:16Z",
          "comments": []
        },
        {
          "id": "PRR_kwDODddxTs5l-tW_",
          "commit": {
            "abbreviatedOid": "446d0ef"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-11-02T17:47:41Z",
          "updatedAt": "2023-11-02T17:47:41Z",
          "comments": []
        }
      ]
    },
    {
      "number": 249,
      "id": "PR_kwDODddxTs5f6meq",
      "title": "Add Tom as co-author of the Cus22 paper",
      "url": "https://github.com/quicwg/ack-frequency/pull/249",
      "state": "MERGED",
      "author": "thomas-fossati",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2023-11-20T14:15:58Z",
      "updatedAt": "2023-11-26T21:46:25Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "60d50182b197e50ce947c7f8a61defc7ea28391c",
      "headRepository": "thomas-fossati/ack-frequency",
      "headRefName": "patch-1",
      "headRefOid": "6e4106556944c672ae6ad320b8e2d585fb0bd063",
      "closedAt": "2023-11-26T21:46:25Z",
      "mergedAt": "2023-11-26T21:46:25Z",
      "mergedBy": "ianswett",
      "mergeCommit": {
        "oid": "c5fc33de916820622997a18928c0f1af26dfbc3a"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs5oRg2h",
          "commit": {
            "abbreviatedOid": "6e41065"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-11-26T21:46:20Z",
          "updatedAt": "2023-11-26T21:46:20Z",
          "comments": []
        }
      ]
    },
    {
      "number": 250,
      "id": "PR_kwDODddxTs5gYiL1",
      "title": "Clarify frames are congestion controlled",
      "url": "https://github.com/quicwg/ack-frequency/pull/250",
      "state": "MERGED",
      "author": "ianswett",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #240",
      "createdAt": "2023-11-26T21:55:34Z",
      "updatedAt": "2025-02-06T13:22:26Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "77dc92bea0973bc3be3686f127469c9c969b437e",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "ianswett-clarify-congestion-control",
      "headRefOid": "c8b5b5cde50d015c7736a9b4e71c3df8986685c2",
      "closedAt": "2023-11-26T23:00:51Z",
      "mergedAt": "2023-11-26T23:00:51Z",
      "mergedBy": "ianswett",
      "mergeCommit": {
        "oid": "d6bbf31c3d1d2158b957258c137ba223c10a10bd"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs5oRhaX",
          "commit": {
            "abbreviatedOid": "c8b5b5c"
          },
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-11-26T22:02:46Z",
          "updatedAt": "2023-11-26T22:02:46Z",
          "comments": []
        }
      ]
    },
    {
      "number": 252,
      "id": "PR_kwDODddxTs5gZXce",
      "title": "sender of min_ack_delay changes the ack behavior",
      "url": "https://github.com/quicwg/ack-frequency/pull/252",
      "state": "MERGED",
      "author": "kazuho",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Section 3:\r\n> Receiving a min_ack_delay transport parameter indicates that the peer might send ACK_FREQUENCY frames in the future.  Until an ACK_FREQUENCY frame is received, receiving this transport parameter does not cause the endpoint to change its acknowledgement behavior.\r\n\r\nThis paragraph is confusing.\r\n\r\nThey sound as if the receiver of min_ack_delay TP also receives the ACK_FREQUENCY frame.\r\n\r\nThe PR removes the first sentence, because it is verbose in addition to being confusing. The paragraph right above states that \"the sender of min_ack_delay TP must be prepared to receive ACK_FREQUENCY frame.\"\r\n\r\nAlso, the PR changes the verb of the second sentence from \"receiving\" to \"sending\" to reflect the roles correctly.",
      "createdAt": "2023-11-27T04:46:18Z",
      "updatedAt": "2023-11-29T22:51:03Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "d6bbf31c3d1d2158b957258c137ba223c10a10bd",
      "headRepository": "kazuho/ack-frequency",
      "headRefName": "patch-1",
      "headRefOid": "d963a935bb351510a9ff64427a86e3557e36b8f1",
      "closedAt": "2023-11-29T22:51:03Z",
      "mergedAt": "2023-11-29T22:51:03Z",
      "mergedBy": "ianswett",
      "mergeCommit": {
        "oid": "81d4aa7fc18498195aa97baf2766c975ff2820d0"
      },
      "comments": [
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "Closes #234.",
          "createdAt": "2023-11-27T05:43:29Z",
          "updatedAt": "2023-11-27T05:43:29Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs5oVPcR",
          "commit": {
            "abbreviatedOid": "d963a93"
          },
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "While I believe that this statement is incorrect (#253), it is a better phrasing than we had before.",
          "createdAt": "2023-11-27T13:14:12Z",
          "updatedAt": "2023-11-27T13:14:12Z",
          "comments": []
        },
        {
          "id": "PRR_kwDODddxTs5or-Ja",
          "commit": {
            "abbreviatedOid": "d963a93"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-11-29T22:50:01Z",
          "updatedAt": "2023-11-29T22:50:01Z",
          "comments": []
        }
      ]
    },
    {
      "number": 254,
      "id": "PR_kwDODddxTs5gZZag",
      "title": "process each ACK_FREQUENCY frame only once",
      "url": "https://github.com/quicwg/ack-frequency/pull/254",
      "state": "MERGED",
      "author": "kazuho",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "At the moment, the specification sounds as if a duplicate ACK_FREQUENCY frame has to be processed.\r\n\r\nThis is a nitpick, so I would not mind it being closed.",
      "createdAt": "2023-11-27T04:56:56Z",
      "updatedAt": "2023-11-29T22:48:20Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "d6bbf31c3d1d2158b957258c137ba223c10a10bd",
      "headRepository": "kazuho/ack-frequency",
      "headRefName": "patch-2",
      "headRefOid": "df0f5afd8ba6e187bb4fc621b9b0c6a826c02ca2",
      "closedAt": "2023-11-29T22:48:20Z",
      "mergedAt": "2023-11-29T22:48:20Z",
      "mergedBy": "ianswett",
      "mergeCommit": {
        "oid": "1f99475498c11a41b0d3e40549c04f147631f46c"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs5oqQvh",
          "commit": {
            "abbreviatedOid": "df0f5af"
          },
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-11-29T18:04:06Z",
          "updatedAt": "2023-11-29T18:04:06Z",
          "comments": []
        },
        {
          "id": "PRR_kwDODddxTs5or9te",
          "commit": {
            "abbreviatedOid": "df0f5af"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-11-29T22:48:13Z",
          "updatedAt": "2023-11-29T22:48:13Z",
          "comments": []
        }
      ]
    },
    {
      "number": 255,
      "id": "PR_kwDODddxTs5gZgpn",
      "title": "Ignore Order was replaced by Reordering Threshold",
      "url": "https://github.com/quicwg/ack-frequency/pull/255",
      "state": "MERGED",
      "author": "kazuho",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Update the text to refer to the new field.",
      "createdAt": "2023-11-27T05:35:32Z",
      "updatedAt": "2023-11-29T22:47:04Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "d6bbf31c3d1d2158b957258c137ba223c10a10bd",
      "headRepository": "kazuho/ack-frequency",
      "headRefName": "patch-3",
      "headRefOid": "c899624b67666fbb5170c1b6f5b476fea1fed4df",
      "closedAt": "2023-11-29T22:47:04Z",
      "mergedAt": "2023-11-29T22:47:04Z",
      "mergedBy": "ianswett",
      "mergeCommit": {
        "oid": "d597fc8b3a26472297e4439a1892713e5da34e45"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs5or9Zc",
          "commit": {
            "abbreviatedOid": "c899624"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-11-29T22:46:58Z",
          "updatedAt": "2023-11-29T22:46:58Z",
          "comments": []
        }
      ]
    },
    {
      "number": 256,
      "id": "PR_kwDODddxTs5goTJJ",
      "title": "Remove definition of a term that is essentially unused",
      "url": "https://github.com/quicwg/ack-frequency/pull/256",
      "state": "MERGED",
      "author": "kazuho",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "The term \"acknowledgment packet\" is used only twice in the Introduction (in the form that omits \"E\"). Neither of them talks specifically about ACK-only frames.",
      "createdAt": "2023-11-29T05:28:34Z",
      "updatedAt": "2023-11-29T22:45:58Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "d6bbf31c3d1d2158b957258c137ba223c10a10bd",
      "headRepository": "kazuho/ack-frequency",
      "headRefName": "patch-4",
      "headRefOid": "4f23c245d47f3296165858765770a20912506033",
      "closedAt": "2023-11-29T22:45:58Z",
      "mergedAt": "2023-11-29T22:45:58Z",
      "mergedBy": "ianswett",
      "mergeCommit": {
        "oid": "10a71d873713bedabfa9b7439eb7105ad99a2ea7"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs5on0wT",
          "commit": {
            "abbreviatedOid": "4f23c24"
          },
          "author": "nibanks",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-11-29T13:29:54Z",
          "updatedAt": "2023-11-29T13:29:54Z",
          "comments": []
        },
        {
          "id": "PRR_kwDODddxTs5or9JY",
          "commit": {
            "abbreviatedOid": "4f23c24"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-11-29T22:45:53Z",
          "updatedAt": "2023-11-29T22:45:53Z",
          "comments": []
        }
      ]
    },
    {
      "number": 257,
      "id": "PR_kwDODddxTs5gy6ni",
      "title": "Acknowledgment not Acknowledgement",
      "url": "https://github.com/quicwg/ack-frequency/pull/257",
      "state": "MERGED",
      "author": "ianswett",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #251",
      "createdAt": "2023-11-30T15:46:34Z",
      "updatedAt": "2025-02-06T13:22:26Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "81d4aa7fc18498195aa97baf2766c975ff2820d0",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "ianswett-fewer-es",
      "headRefOid": "875da1c987f460575de9719a8eefd824b6ecb9c0",
      "closedAt": "2023-11-30T15:52:25Z",
      "mergedAt": "2023-11-30T15:52:25Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "2b848a34d980ef9a3d937664fec0fcd54034dac8"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs5oxeH6",
          "commit": {
            "abbreviatedOid": "875da1c"
          },
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-30T15:52:27Z",
          "updatedAt": "2023-11-30T15:52:28Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "```suggestion\r\n    title: \"Reducing the acknowledgement frequency in IETF QUIC\"\r\n```\r\n\r\nNot this one, it's somebody else's!",
              "createdAt": "2023-11-30T15:52:27Z",
              "updatedAt": "2023-11-30T15:52:54Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5oxfJq",
          "commit": {
            "abbreviatedOid": "875da1c"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-30T15:54:22Z",
          "updatedAt": "2023-11-30T15:54:22Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "ups... pushed merge to early... will fix with another PR",
              "createdAt": "2023-11-30T15:54:22Z",
              "updatedAt": "2023-11-30T15:54:22Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5oxgBS",
          "commit": {
            "abbreviatedOid": "875da1c"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-30T15:56:01Z",
          "updatedAt": "2023-11-30T15:56:01Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "Actually a quick Internet search tell me that they do use the \"e\" in the title. So this change is correct.",
              "createdAt": "2023-11-30T15:56:01Z",
              "updatedAt": "2023-11-30T15:56:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5ox0D7",
          "commit": {
            "abbreviatedOid": "875da1c"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-30T16:28:59Z",
          "updatedAt": "2023-11-30T16:28:59Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "Lucas suggestion is correct, as you said it does have an 'e' in the title, and I just committed it to main.",
              "createdAt": "2023-11-30T16:28:59Z",
              "updatedAt": "2023-11-30T16:28:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5ox10j",
          "commit": {
            "abbreviatedOid": "875da1c"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-11-30T16:32:31Z",
          "updatedAt": "2023-11-30T16:32:31Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "Ah right... got confused if we remove or at it... thanks!",
              "createdAt": "2023-11-30T16:32:31Z",
              "updatedAt": "2023-11-30T16:32:31Z"
            }
          ]
        }
      ]
    },
    {
      "number": 258,
      "id": "PR_kwDODddxTs5gy722",
      "title": "ACK_FRAME -> ACK frame",
      "url": "https://github.com/quicwg/ack-frequency/pull/258",
      "state": "MERGED",
      "author": "ianswett",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #239",
      "createdAt": "2023-11-30T15:49:23Z",
      "updatedAt": "2025-02-06T13:22:27Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "81d4aa7fc18498195aa97baf2766c975ff2820d0",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "ianswett-ackframe",
      "headRefOid": "aeb31e49140fa736c86377b41502b31856f206de",
      "closedAt": "2023-11-30T15:52:49Z",
      "mergedAt": "2023-11-30T15:52:49Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "290cab8a52331a99b46596edf8c5df16ee6cba6b"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs5oxddv",
          "commit": {
            "abbreviatedOid": "aeb31e4"
          },
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-11-30T15:51:26Z",
          "updatedAt": "2023-11-30T15:51:26Z",
          "comments": []
        }
      ]
    },
    {
      "number": 259,
      "id": "PR_kwDODddxTs5gy-dU",
      "title": "Sequence number is monotonically increasing",
      "url": "https://github.com/quicwg/ack-frequency/pull/259",
      "state": "MERGED",
      "author": "ianswett",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #236 \r\n\r\nThere was a request for clarification that it doesn't have to start at 0, but is that necessary?",
      "createdAt": "2023-11-30T15:55:15Z",
      "updatedAt": "2025-02-06T13:22:27Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "290cab8a52331a99b46596edf8c5df16ee6cba6b",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "ianswett-monotonic-sequence",
      "headRefOid": "9edb002a685af9caa6a35c20105eb0c32c85dde1",
      "closedAt": "2023-12-11T02:43:27Z",
      "mergedAt": "2023-12-11T02:43:27Z",
      "mergedBy": "ianswett",
      "mergeCommit": {
        "oid": "28acefeeb0d603908f3477317734685a21be181a"
      },
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I don't think we have to say that it doesn't have to start at 0... but I guess it's matter of taste...",
          "createdAt": "2023-11-30T15:58:10Z",
          "updatedAt": "2023-11-30T15:58:10Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs5oxgtO",
          "commit": {
            "abbreviatedOid": "be5cf2d"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-11-30T15:57:15Z",
          "updatedAt": "2023-11-30T15:57:15Z",
          "comments": []
        },
        {
          "id": "PRR_kwDODddxTs5pwDs8",
          "commit": {
            "abbreviatedOid": "73034dc"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2023-12-11T02:42:26Z",
          "updatedAt": "2023-12-11T02:42:26Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "```suggestion\r\nSequence Number value in the frame is greater than the largest processed\r\n```",
              "createdAt": "2023-12-11T02:42:26Z",
              "updatedAt": "2023-12-11T02:42:27Z"
            }
          ]
        }
      ]
    },
    {
      "number": 260,
      "id": "PR_kwDODddxTs5gzDHc",
      "title": "ACK_FREQUENCY frame not this frame",
      "url": "https://github.com/quicwg/ack-frequency/pull/260",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "fixes #241",
      "createdAt": "2023-11-30T16:06:10Z",
      "updatedAt": "2025-02-06T13:20:07Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "290cab8a52331a99b46596edf8c5df16ee6cba6b",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "mirjak-patch-26",
      "headRefOid": "4e5b466d586d9ff03542caef265da89071ffe543",
      "closedAt": "2023-12-11T02:45:17Z",
      "mergedAt": "2023-12-11T02:45:17Z",
      "mergedBy": "ianswett",
      "mergeCommit": {
        "oid": "34eb1bd0c84a2d30a7dd7c47d1e0b2805e69e14c"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs5oyAdk",
          "commit": {
            "abbreviatedOid": "eb72c66"
          },
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2023-11-30T16:52:26Z",
          "updatedAt": "2023-11-30T16:52:26Z",
          "comments": []
        }
      ]
    },
    {
      "number": 261,
      "id": "PR_kwDODddxTs5j6YSk",
      "title": "number maximum-sized packet in the cwnd",
      "url": "https://github.com/quicwg/ack-frequency/pull/261",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "fixes #226",
      "createdAt": "2024-01-12T11:13:51Z",
      "updatedAt": "2025-02-06T13:20:07Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "34eb1bd0c84a2d30a7dd7c47d1e0b2805e69e14c",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "mirjak-patch-27",
      "headRefOid": "78a99219f8ca588b976a828d01ce327798a338b7",
      "closedAt": "2024-03-01T11:05:42Z",
      "mergedAt": "2024-03-01T11:05:42Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "761eb021c594a9c4056db728ae9beb284a5e692e"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs5sXCUe",
          "commit": {
            "abbreviatedOid": "78a9921"
          },
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-01-12T11:23:57Z",
          "updatedAt": "2024-01-12T11:23:57Z",
          "comments": []
        }
      ]
    },
    {
      "number": 262,
      "id": "PR_kwDODddxTs5j6dJd",
      "title": "Reference in sec 3 to new frames types",
      "url": "https://github.com/quicwg/ack-frequency/pull/262",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "fixes #230",
      "createdAt": "2024-01-12T11:28:13Z",
      "updatedAt": "2025-02-06T13:19:20Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "34eb1bd0c84a2d30a7dd7c47d1e0b2805e69e14c",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "mirjak-patch-28",
      "headRefOid": "97021660b373d2ce47a2a70b3333c98f9374d533",
      "closedAt": "2024-03-01T11:06:14Z",
      "mergedAt": "2024-03-01T11:06:14Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "820f2e545db9a1bacc7175bbcf9db1e69dae69bf"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs5sYDfR",
          "commit": {
            "abbreviatedOid": "c6b7d57"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-12T13:16:08Z",
          "updatedAt": "2024-01-12T13:16:08Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\nframes are the ACK_FREQUENCY Frame (see {{ack-frequency-frame}}) and the\r\n```",
              "createdAt": "2024-01-12T13:16:08Z",
              "updatedAt": "2024-01-12T13:16:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5uboXG",
          "commit": {
            "abbreviatedOid": "d67060c"
          },
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-31T01:31:30Z",
          "updatedAt": "2024-01-31T01:32:24Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\nframes are the ACK_FREQUENCY frame (see {{ack-frequency-frame}}) and the\r\n```",
              "createdAt": "2024-01-31T01:31:31Z",
              "updatedAt": "2024-01-31T01:32:24Z"
            },
            {
              "originalPosition": 7,
              "body": "```suggestion\r\nIMMEDIATE_ACK frame (see {{immediate-ack-frame}}).\r\n```",
              "createdAt": "2024-01-31T01:32:17Z",
              "updatedAt": "2024-01-31T01:32:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5ubosI",
          "commit": {
            "abbreviatedOid": "d67060c"
          },
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "LGTM modulo the casing nit",
          "createdAt": "2024-01-31T01:33:16Z",
          "updatedAt": "2024-01-31T01:33:16Z",
          "comments": []
        }
      ]
    },
    {
      "number": 263,
      "id": "PR_kwDODddxTs5j6ejV",
      "title": "Fix section references",
      "url": "https://github.com/quicwg/ack-frequency/pull/263",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "fixes #231",
      "createdAt": "2024-01-12T11:32:27Z",
      "updatedAt": "2025-02-06T13:19:58Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "34eb1bd0c84a2d30a7dd7c47d1e0b2805e69e14c",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "mirjak-patch-29",
      "headRefOid": "a9251777f7067a422f9ae4048f4ec05ce413e424",
      "closedAt": "2024-02-01T14:43:23Z",
      "mergedAt": "2024-02-01T14:43:23Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "75804fa45fc7f3a974271ba2a007bde9f1d24e03"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs5ubo1h",
          "commit": {
            "abbreviatedOid": "a925177"
          },
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "LGTM",
          "createdAt": "2024-01-31T01:34:05Z",
          "updatedAt": "2024-01-31T01:34:05Z",
          "comments": []
        }
      ]
    },
    {
      "number": 264,
      "id": "PR_kwDODddxTs5j6kAC",
      "title": "no IMMEDIATE_ACK in 0RTT",
      "url": "https://github.com/quicwg/ack-frequency/pull/264",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "fixes #238",
      "createdAt": "2024-01-12T11:46:00Z",
      "updatedAt": "2025-02-06T13:19:57Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "34eb1bd0c84a2d30a7dd7c47d1e0b2805e69e14c",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "mirjak-patch-30",
      "headRefOid": "7300554e2e1c160b2e7f920f6526b66696b2b93c",
      "closedAt": "2024-02-01T16:04:52Z",
      "mergedAt": "2024-02-01T16:04:52Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "e6becb8a9457053cdeb856a6a9c267608c06d4c3"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs5sXRdo",
          "commit": {
            "abbreviatedOid": "e8bf5fa"
          },
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-01-12T11:50:15Z",
          "updatedAt": "2024-01-12T11:50:15Z",
          "comments": []
        },
        {
          "id": "PRR_kwDODddxTs5sYDuP",
          "commit": {
            "abbreviatedOid": "e8bf5fa"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-12T13:16:32Z",
          "updatedAt": "2024-01-12T13:16:32Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\nand IMMEDIATE_ACK frames cannot be sent in 0-RTT packets, as per\r\n```",
              "createdAt": "2024-01-12T13:16:32Z",
              "updatedAt": "2024-01-12T13:16:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5ubpBR",
          "commit": {
            "abbreviatedOid": "7300554"
          },
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "LGTM",
          "createdAt": "2024-01-31T01:35:08Z",
          "updatedAt": "2024-01-31T01:35:08Z",
          "comments": []
        }
      ]
    },
    {
      "number": 265,
      "id": "PR_kwDODddxTs5j7gdE",
      "title": "acknowledgments receiver is data sender",
      "url": "https://github.com/quicwg/ack-frequency/pull/265",
      "state": "CLOSED",
      "author": "mirjak",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "fixed #224",
      "createdAt": "2024-01-12T14:13:55Z",
      "updatedAt": "2025-02-06T13:19:56Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "34eb1bd0c84a2d30a7dd7c47d1e0b2805e69e14c",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "mirjak-patch-31",
      "headRefOid": "97c2d32ec23bcaa00a2a3f8db97fcb358ed675eb",
      "closedAt": "2024-01-31T09:09:48Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs5sYfmc",
          "commit": {
            "abbreviatedOid": "97c2d32"
          },
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-12T14:17:29Z",
          "updatedAt": "2024-01-12T14:17:37Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\n  reducing the number of acknowledgments also reduces the processing\r\n  cost on the sender side.\r\n```",
              "createdAt": "2024-01-12T14:17:30Z",
              "updatedAt": "2024-01-12T14:17:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5sYn5V",
          "commit": {
            "abbreviatedOid": "97c2d32"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-12T14:33:41Z",
          "updatedAt": "2024-01-12T14:33:41Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "I thinks this change mostly reverts my proposed change. I think the original sentence was correct, so if people think more words don't help, we don't have to accept this PR. But I thought it might clarify things. I guess it would be good if @LPardue takes a look who raised the issue.",
              "createdAt": "2024-01-12T14:33:41Z",
              "updatedAt": "2024-01-12T14:33:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5ubu1n",
          "commit": {
            "abbreviatedOid": "97c2d32"
          },
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-31T01:57:09Z",
          "updatedAt": "2024-01-31T01:57:09Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "So after thinking some more, IMO there's a bit too much passive voice in the current document, making it hard to determine the subject and the effects. I made a new PR that makes things clearer to me at least - https://github.com/quicwg/ack-frequency/pull/271",
              "createdAt": "2024-01-31T01:57:09Z",
              "updatedAt": "2024-01-31T01:57:23Z"
            }
          ]
        }
      ]
    },
    {
      "number": 266,
      "id": "PR_kwDODddxTs5j7nNS",
      "title": "abstract and intro",
      "url": "https://github.com/quicwg/ack-frequency/pull/266",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "fixes #229",
      "createdAt": "2024-01-12T14:27:52Z",
      "updatedAt": "2025-02-06T13:19:16Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "34eb1bd0c84a2d30a7dd7c47d1e0b2805e69e14c",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "mirjak-patch-32",
      "headRefOid": "1a9ee83c568b423b269db32b74eb9ea087600cd3",
      "closedAt": "2024-03-01T11:09:07Z",
      "mergedAt": "2024-03-01T11:09:07Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "4ff776741378aec3bdfae953b46e8c5045c7ce60"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs5sYoaS",
          "commit": {
            "abbreviatedOid": "a47bba0"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-12T14:34:47Z",
          "updatedAt": "2024-01-12T14:34:47Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\nThis document specifies a QUIC extension for an endpoint to\r\n```",
              "createdAt": "2024-01-12T14:34:47Z",
              "updatedAt": "2024-01-12T14:34:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5sYoeS",
          "commit": {
            "abbreviatedOid": "a47bba0"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-12T14:34:55Z",
          "updatedAt": "2024-01-12T14:34:55Z",
          "comments": [
            {
              "originalPosition": 21,
              "body": "```suggestion\r\nbehavior. This document specifies a QUIC extension for an endpoint to\r\n```",
              "createdAt": "2024-01-12T14:34:55Z",
              "updatedAt": "2024-01-12T14:34:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5sYog5",
          "commit": {
            "abbreviatedOid": "a47bba0"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-12T14:35:01Z",
          "updatedAt": "2024-01-12T14:35:01Z",
          "comments": [
            {
              "originalPosition": 25,
              "body": "```suggestion\r\nextension and specifies two new frame types to request changes the peer's\r\n```",
              "createdAt": "2024-01-12T14:35:01Z",
              "updatedAt": "2024-01-12T14:35:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5ubmAU",
          "commit": {
            "abbreviatedOid": "3ec4a5a"
          },
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-31T01:18:22Z",
          "updatedAt": "2024-01-31T01:18:22Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "maybe \r\n\r\n```suggestion\r\nThis document specifies an extension to QUIC that permits an endpoint to\r\nrequest that its peer changes its behavior when sending or delaying acknowledgments.\r\n```",
              "createdAt": "2024-01-31T01:18:22Z",
              "updatedAt": "2024-01-31T09:11:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5ubmv3",
          "commit": {
            "abbreviatedOid": "3ec4a5a"
          },
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-31T01:22:40Z",
          "updatedAt": "2024-01-31T01:22:41Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "maybe \r\n```suggestion\r\nThe QUIC transport protocol recommends to send an ACK frame\r\nafter receiving at least two ack-eliciting packets; see  {{Section 13.2 of QUIC-TRANSPORT}}. However, it leaves the determination\r\nof how frequently to send acknowledgments in response to ack-eliciting packets\r\n```\r\n\r\n",
              "createdAt": "2024-01-31T01:22:40Z",
              "updatedAt": "2024-01-31T01:22:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5ubm25",
          "commit": {
            "abbreviatedOid": "3ec4a5a"
          },
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-31T01:23:18Z",
          "updatedAt": "2024-01-31T01:23:19Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "if you like my suggestion for abstract, consider also updating this sentence for consistency.",
              "createdAt": "2024-01-31T01:23:19Z",
              "updatedAt": "2024-01-31T01:23:19Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5uboKR",
          "commit": {
            "abbreviatedOid": "3ec4a5a"
          },
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-31T01:30:26Z",
          "updatedAt": "2024-01-31T01:30:27Z",
          "comments": [
            {
              "originalPosition": 25,
              "body": "```suggestion\r\nextension and specifies two new frame types to request changes to the peer's\r\n```",
              "createdAt": "2024-01-31T01:30:26Z",
              "updatedAt": "2024-01-31T01:30:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5udtsE",
          "commit": {
            "abbreviatedOid": "4a9489d"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-31T09:39:10Z",
          "updatedAt": "2024-01-31T09:39:11Z",
          "comments": [
            {
              "originalPosition": 22,
              "body": "```suggestion\r\nbehavior. This document specifies an extension to QUIC that permits an endpoint to\r\nrequest that its peer changes its behavior when sending or delaying acknowledgments.\r\n```",
              "createdAt": "2024-01-31T09:39:10Z",
              "updatedAt": "2024-01-31T09:39:11Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5x5c8d",
          "commit": {
            "abbreviatedOid": "e374d7c"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-01T11:07:20Z",
          "updatedAt": "2024-03-01T11:07:20Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "```suggestion\r\nafter receiving at least two ack-eliciting packets; see \r\n{{Section 13.2 of QUIC-TRANSPORT}}. However, it leaves the determination\r\n```",
              "createdAt": "2024-03-01T11:07:20Z",
              "updatedAt": "2024-03-01T11:07:20Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5x5dXI",
          "commit": {
            "abbreviatedOid": "e8b4e0f"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-01T11:08:22Z",
          "updatedAt": "2024-03-01T11:08:23Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "```suggestion\r\nafter receiving at least two ack-eliciting packets; see\r\n```",
              "createdAt": "2024-03-01T11:08:23Z",
              "updatedAt": "2024-03-01T11:08:23Z"
            }
          ]
        }
      ]
    },
    {
      "number": 267,
      "id": "PR_kwDODddxTs5j72Hk",
      "title": "Use terms consistently",
      "url": "https://github.com/quicwg/ack-frequency/pull/267",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "fixes #233",
      "createdAt": "2024-01-12T14:55:27Z",
      "updatedAt": "2025-02-06T13:19:18Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "75804fa45fc7f3a974271ba2a007bde9f1d24e03",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "mirjak-patch-33",
      "headRefOid": "4e340a7f1e25c9fa5de0fdc75c7937001d0fbebb",
      "closedAt": "2024-02-01T16:04:04Z",
      "mergedAt": "2024-02-01T16:04:04Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "c174c8ab165b4a4faa33dd310a6021f7a1e784eb"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs5saKxW",
          "commit": {
            "abbreviatedOid": "29496c9"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-12T18:14:34Z",
          "updatedAt": "2024-01-12T18:14:35Z",
          "comments": [
            {
              "originalPosition": 186,
              "body": "```suggestion\r\nestimate of the typical RTT, but not the minimum RTT (min_rtt)\r\n```",
              "createdAt": "2024-01-12T18:14:35Z",
              "updatedAt": "2024-01-12T18:14:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5ubvdC",
          "commit": {
            "abbreviatedOid": "818b872"
          },
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-31T02:00:12Z",
          "updatedAt": "2024-01-31T02:00:12Z",
          "comments": [
            {
              "originalPosition": 216,
              "body": "```suggestion\r\n6.1.2 of {{QUIC-RECOVERY}}) or the Probe Timeout (PTO) (Section 6.2 of {{QUIC-RECOVERY}}),\r\n```",
              "createdAt": "2024-01-31T02:00:12Z",
              "updatedAt": "2024-01-31T02:00:13Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5ubvgW",
          "commit": {
            "abbreviatedOid": "818b872"
          },
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "LGTM modulo typo",
          "createdAt": "2024-01-31T02:00:30Z",
          "updatedAt": "2024-01-31T02:00:30Z",
          "comments": []
        }
      ]
    },
    {
      "number": 268,
      "id": "PR_kwDODddxTs5j7-ul",
      "title": "add ref to RFC9000 21.9 in sec considerations",
      "url": "https://github.com/quicwg/ack-frequency/pull/268",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "#243",
      "createdAt": "2024-01-12T15:12:47Z",
      "updatedAt": "2025-02-06T13:19:20Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "34eb1bd0c84a2d30a7dd7c47d1e0b2805e69e14c",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "mirjak-patch-34",
      "headRefOid": "b538f5f9add590083effcd7c836df9df79320779",
      "closedAt": "2024-03-01T11:10:30Z",
      "mergedAt": "2024-03-01T11:10:30Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "83ec3a4f65db735ac556c141379c3a89a73fd605"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs5sY-Bj",
          "commit": {
            "abbreviatedOid": "b1d8e51"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-12T15:13:16Z",
          "updatedAt": "2024-01-12T15:13:16Z",
          "comments": [
            {
              "originalPosition": 19,
              "body": "```suggestion\r\nEspecially, the IMMEDIATE_ACK frame does not only imply processing cost for receiving\r\n```",
              "createdAt": "2024-01-12T15:13:16Z",
              "updatedAt": "2024-01-12T15:13:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5ubvrb",
          "commit": {
            "abbreviatedOid": "b084bc2"
          },
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-31T02:01:28Z",
          "updatedAt": "2024-01-31T02:01:28Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "```suggestion\r\nACK_FREQUENCY and IMMEDIATE_ACK frames, to cause disproportional\r\n```",
              "createdAt": "2024-01-31T02:01:28Z",
              "updatedAt": "2024-01-31T02:01:28Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5ubvyi",
          "commit": {
            "abbreviatedOid": "b084bc2"
          },
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "This is good, thanks!",
          "createdAt": "2024-01-31T02:02:06Z",
          "updatedAt": "2024-01-31T02:02:06Z",
          "comments": []
        }
      ]
    },
    {
      "number": 269,
      "id": "PR_kwDODddxTs5j8BRa",
      "title": "IMMEDIATE_ACK is part of this as well",
      "url": "https://github.com/quicwg/ack-frequency/pull/269",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "fixes #237",
      "createdAt": "2024-01-12T15:18:14Z",
      "updatedAt": "2025-02-06T13:19:55Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "34eb1bd0c84a2d30a7dd7c47d1e0b2805e69e14c",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "mirjak-patch-35",
      "headRefOid": "d855306ddc787e5f502b3e0f14859017808c8fbb",
      "closedAt": "2024-02-01T16:05:10Z",
      "mergedAt": "2024-02-01T16:05:10Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "b016d4b3e8c74fea7fc7c099c302ef08fe85d078"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs5sZAt9",
          "commit": {
            "abbreviatedOid": "d855306"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-12T15:18:59Z",
          "updatedAt": "2024-01-12T15:19:00Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "This next paragraph is already addressed in PR #264 .",
              "createdAt": "2024-01-12T15:18:59Z",
              "updatedAt": "2024-01-12T15:19:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5ubwBB",
          "commit": {
            "abbreviatedOid": "d855306"
          },
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "LGTM",
          "createdAt": "2024-01-31T02:03:29Z",
          "updatedAt": "2024-01-31T02:03:29Z",
          "comments": []
        }
      ]
    },
    {
      "number": 270,
      "id": "PR_kwDODddxTs5j9M51",
      "title": "note on reordering threshold",
      "url": "https://github.com/quicwg/ack-frequency/pull/270",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "fixes #246",
      "createdAt": "2024-01-12T18:09:57Z",
      "updatedAt": "2025-02-06T13:19:20Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "34eb1bd0c84a2d30a7dd7c47d1e0b2805e69e14c",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "mirjak-patch-36",
      "headRefOid": "550740e23d3e589b50061903b2f6c6b97a4befd2",
      "closedAt": "2024-03-01T11:11:26Z",
      "mergedAt": "2024-03-01T11:11:26Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "1367ca9c6b8b4c4d308b909eb9157c8cfe04e45d"
      },
      "comments": [
        {
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "body": "@gloinul does this address your issue #246 ?",
          "createdAt": "2024-01-31T02:04:21Z",
          "updatedAt": "2024-01-31T02:04:21Z"
        },
        {
          "author": "gloinul",
          "authorAssociation": "NONE",
          "body": "Yes it does. This is clarer. Thanks.\r\n",
          "createdAt": "2024-01-31T07:55:17Z",
          "updatedAt": "2024-01-31T07:55:17Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs5saK7Q",
          "commit": {
            "abbreviatedOid": "0b6c1ad"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-01-12T18:15:05Z",
          "updatedAt": "2024-01-12T18:15:06Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "```suggestion\r\nsee {{out-of-order}}.\r\n```",
              "createdAt": "2024-01-12T18:15:05Z",
              "updatedAt": "2024-01-12T18:15:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5ufMid",
          "commit": {
            "abbreviatedOid": "550740e"
          },
          "author": "gloinul",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-01-31T12:58:42Z",
          "updatedAt": "2024-01-31T12:58:42Z",
          "comments": []
        }
      ]
    },
    {
      "number": 271,
      "id": "PR_kwDODddxTs5lhRN1",
      "title": "Clarify motivations",
      "url": "https://github.com/quicwg/ack-frequency/pull/271",
      "state": "MERGED",
      "author": "LPardue",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Alternative to #265.\r\n\r\nFixes #224\r\n",
      "createdAt": "2024-01-31T01:55:54Z",
      "updatedAt": "2025-02-06T13:19:14Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "34eb1bd0c84a2d30a7dd7c47d1e0b2805e69e14c",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "lucas/fix-224",
      "headRefOid": "25f17582fbae70b77872fd3265cb5436ca044d63",
      "closedAt": "2024-03-04T16:39:10Z",
      "mergedAt": "2024-03-04T16:39:10Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "40ae5610956817b23402d8a5d9dd33243d1a81a7"
      },
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@LPardue actually I think your second part wasn't fully concrete. I made an update on that. Can you review and confirm this works?",
          "createdAt": "2024-03-01T11:17:27Z",
          "updatedAt": "2024-03-01T11:17:27Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs5x5gsh",
          "commit": {
            "abbreviatedOid": "fe629c9"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-01T11:16:39Z",
          "updatedAt": "2024-03-01T11:16:40Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "```suggestion\r\n- Similarly, receiving UDP datagrams can also be CPU intensive. Reducing the\r\n  acknowledgement frequency therefore also reduces the CPU usage at the data\r\n  sender as it has to receive and process less acknowledgment-only packets.\r\n```",
              "createdAt": "2024-03-01T11:16:40Z",
              "updatedAt": "2024-03-01T11:16:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5x6588",
          "commit": {
            "abbreviatedOid": "f0ba783"
          },
          "author": "gorryfair",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "wfm",
          "createdAt": "2024-03-01T14:11:51Z",
          "updatedAt": "2024-03-01T14:11:51Z",
          "comments": []
        },
        {
          "id": "PRR_kwDODddxTs5yABTq",
          "commit": {
            "abbreviatedOid": "f0ba783"
          },
          "author": "gorryfair",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-03-02T08:03:56Z",
          "updatedAt": "2024-03-02T08:03:56Z",
          "comments": []
        },
        {
          "id": "PRR_kwDODddxTs5yG2EF",
          "commit": {
            "abbreviatedOid": "f0ba783"
          },
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-04T14:03:52Z",
          "updatedAt": "2024-03-04T14:03:52Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "```suggestion\r\n  sender as it has to receive and process fewer acknowledgment-only packets.\r\n```",
              "createdAt": "2024-03-04T14:03:52Z",
              "updatedAt": "2024-03-04T14:03:52Z"
            }
          ]
        }
      ]
    },
    {
      "number": 272,
      "id": "PR_kwDODddxTs5l3d7F",
      "title": "Fix typo",
      "url": "https://github.com/quicwg/ack-frequency/pull/272",
      "state": "MERGED",
      "author": "martinduke",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-02-02T19:02:30Z",
      "updatedAt": "2024-02-02T21:05:29Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "b016d4b3e8c74fea7fc7c099c302ef08fe85d078",
      "headRepository": "martinduke/ack-frequency",
      "headRefName": "main",
      "headRefOid": "bd07138d1d4b212250e3026de70c58fce28edd05",
      "closedAt": "2024-02-02T21:05:29Z",
      "mergedAt": "2024-02-02T21:05:29Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "be7a054287a752d55a356089ab49ada1bda8b876"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs5u313z",
          "commit": {
            "abbreviatedOid": "bd07138"
          },
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-02-02T19:12:25Z",
          "updatedAt": "2024-02-02T19:12:25Z",
          "comments": []
        }
      ]
    },
    {
      "number": 273,
      "id": "PR_kwDODddxTs5mBEKU",
      "title": "Clarify when RFC9000 sends immediate ACK",
      "url": "https://github.com/quicwg/ack-frequency/pull/273",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "fixes #247",
      "createdAt": "2024-02-05T12:27:46Z",
      "updatedAt": "2025-02-06T13:19:18Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "be7a054287a752d55a356089ab49ada1bda8b876",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "mirjak-patch-37",
      "headRefOid": "5b6045b76563b40174b0e477b6113482d3daa515",
      "closedAt": "2024-03-04T13:58:39Z",
      "mergedAt": "2024-03-04T13:58:39Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "d8d4794dec9f6ed5aafb028f691ba0880140a8dc"
      },
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "@gloinul can you confirm this addresses your issue?",
          "createdAt": "2024-03-01T11:18:50Z",
          "updatedAt": "2024-03-01T11:18:50Z"
        },
        {
          "author": "gloinul",
          "authorAssociation": "NONE",
          "body": "Thanks, this do address my issue. ",
          "createdAt": "2024-03-04T13:53:10Z",
          "updatedAt": "2024-03-04T13:53:10Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs5vBWWo",
          "commit": {
            "abbreviatedOid": "9ba6485"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-05T12:29:31Z",
          "updatedAt": "2024-02-05T12:29:32Z",
          "comments": [
            {
              "originalPosition": 13,
              "body": "```suggestion\r\npacket.\r\n```",
              "createdAt": "2024-02-05T12:29:32Z",
              "updatedAt": "2024-02-05T12:29:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5yGuv2",
          "commit": {
            "abbreviatedOid": "5b6045b"
          },
          "author": "gloinul",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-03-04T13:53:21Z",
          "updatedAt": "2024-03-04T13:53:21Z",
          "comments": []
        }
      ]
    },
    {
      "number": 274,
      "id": "PR_kwDODddxTs5mBIb5",
      "title": "Explain example further",
      "url": "https://github.com/quicwg/ack-frequency/pull/274",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "fixes #248",
      "createdAt": "2024-02-05T12:37:47Z",
      "updatedAt": "2025-02-06T13:19:17Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "be7a054287a752d55a356089ab49ada1bda8b876",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "mirjak-patch-38",
      "headRefOid": "967da83a8bb1f8626c3883bc87ea0a3d6ef9f8c7",
      "closedAt": "2024-03-01T11:19:17Z",
      "mergedAt": "2024-03-01T11:19:17Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "a9b1d36050b0cac9dee46a6c7dfa217d47e4f734"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs5vBrpu",
          "commit": {
            "abbreviatedOid": "2dd32a3"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-05T12:58:58Z",
          "updatedAt": "2024-02-05T12:58:58Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "```suggestion\r\n(with a reordering threshold of 3).\r\n```",
              "createdAt": "2024-02-05T12:58:58Z",
              "updatedAt": "2024-02-05T12:58:58Z"
            }
          ]
        }
      ]
    },
    {
      "number": 275,
      "id": "PR_kwDODddxTs5mBP1C",
      "title": "Clarify when to send ACK_FREQUENCY frame",
      "url": "https://github.com/quicwg/ack-frequency/pull/275",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "fixes #228",
      "createdAt": "2024-02-05T12:53:30Z",
      "updatedAt": "2025-02-06T13:19:05Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "be7a054287a752d55a356089ab49ada1bda8b876",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "mirjak-patch-39",
      "headRefOid": "288ed118ecc679e7e6f4560b06fbef8be65eac0d",
      "closedAt": "2024-03-04T21:05:00Z",
      "mergedAt": "2024-03-04T21:05:00Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "f3db784002225e27a57b7aa67f467b8104910075"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs5vBpDm",
          "commit": {
            "abbreviatedOid": "a739027"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-05T12:54:31Z",
          "updatedAt": "2024-02-05T12:54:32Z",
          "comments": [
            {
              "originalPosition": 9,
              "body": "```suggestion\r\nmay change continuously, of course not every change should trigger an update.\r\n```",
              "createdAt": "2024-02-05T12:54:31Z",
              "updatedAt": "2024-02-05T12:54:32Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5vBpiL",
          "commit": {
            "abbreviatedOid": "d0fcc4f"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-05T12:55:34Z",
          "updatedAt": "2024-02-05T12:55:34Z",
          "comments": [
            {
              "originalPosition": 11,
              "body": "```suggestion\r\nUsually, it is not nessecary to send an ACK_FREQUENCY frame more than once per\r\nRTT and likely it needs to be sent even less frequently.\r\nIdeally, an ACK_FREQUENCY frame is sent only if a relevant change in the\r\n```",
              "createdAt": "2024-02-05T12:55:34Z",
              "updatedAt": "2024-02-05T12:55:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5vBqAb",
          "commit": {
            "abbreviatedOid": "c8aa6f9"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-05T12:56:07Z",
          "updatedAt": "2024-02-05T12:56:08Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "```suggestion\r\nsetting of the reordering threshold or locally-selected calculation of the\r\n```",
              "createdAt": "2024-02-05T12:56:08Z",
              "updatedAt": "2024-02-05T12:56:08Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5vBqcm",
          "commit": {
            "abbreviatedOid": "21c8447"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-05T12:56:38Z",
          "updatedAt": "2024-02-05T12:56:39Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "```suggestion\r\nUsually, it is not necessary to send an ACK_FREQUENCY frame more than once per\r\n```",
              "createdAt": "2024-02-05T12:56:39Z",
              "updatedAt": "2024-02-05T12:56:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5vH2HQ",
          "commit": {
            "abbreviatedOid": "451cc11"
          },
          "author": "martinthomson",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-06T05:55:03Z",
          "updatedAt": "2024-02-06T06:00:33Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\nNote that the congestion window and the RTT estimate change over the lifetime of a\r\n```\r\n\r\nI don't know what \"average\" would mean for the congestion window.  Would it be better to phrase this in terms of outstanding/unacknowledged data?",
              "createdAt": "2024-02-06T05:55:03Z",
              "updatedAt": "2024-02-06T06:00:33Z"
            },
            {
              "originalPosition": 6,
              "body": "```suggestion\r\nconnection and therefore might require sending many ACK_FREQUENCY frames to\r\n```\r\n\r\nFrequent implies one per RTT, which would be bad.",
              "createdAt": "2024-02-06T05:55:34Z",
              "updatedAt": "2024-02-06T06:00:33Z"
            },
            {
              "originalPosition": 9,
              "body": "```suggestion\r\nensure optimal performance, though not every change should trigger an update.\r\n```",
              "createdAt": "2024-02-06T05:55:50Z",
              "updatedAt": "2024-02-06T06:00:33Z"
            },
            {
              "originalPosition": 15,
              "body": "There's that \"average\" again.\r\n\r\nThe problem I have with this text is that it says that you compute the value and then only ask the peer to change if the computed value changes.  However, this is still going to thrash quite a bit as estimates fluctuate.  Especially during slow start, where big changes are commonplace (but more ACK frames is fine).\r\n\r\nI would instead recommend some amount of hysteresis in values.  That should have the desired effect.",
              "createdAt": "2024-02-06T06:00:27Z",
              "updatedAt": "2024-02-06T06:00:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5x5sbl",
          "commit": {
            "abbreviatedOid": "451cc11"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-01T11:48:01Z",
          "updatedAt": "2024-03-01T11:48:01Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "I don't think frequent implies one per RTT. I think frequent is more correct because it's about the period you send ACKs and not the number of ACKs.",
              "createdAt": "2024-03-01T11:48:01Z",
              "updatedAt": "2024-03-01T11:48:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5x5tkW",
          "commit": {
            "abbreviatedOid": "bcceaf5"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-01T11:51:14Z",
          "updatedAt": "2024-03-01T11:51:14Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "```suggestion\r\nIdeally, an ACK_FREQUENCY frame is sent only if a relevant change in the\r\nlonger-term development of the congestion window or RTT estimates is detected that impacts the local\r\n```",
              "createdAt": "2024-03-01T11:51:14Z",
              "updatedAt": "2024-03-01T11:51:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5x5u3o",
          "commit": {
            "abbreviatedOid": "bcceaf5"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-01T11:54:50Z",
          "updatedAt": "2024-03-01T11:54:50Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "The congestion window for most congestion control algorithms makes a sawtooth over a period of cwnd/2 RTTs. The congestion window increases by one for cwnd/2 RTTs and then is halved when a congestion indication occurs. That means the congestion window changes constantly but the average (over cwnd/2 RTTs) stays constant. Only if there is a real change in bandwidth and therefore the average value changes, it makes sense to also adjust the ack frequency.\r\n\r\nI tried to change the working to \"longer-term development\". @martinthomson does that help?",
              "createdAt": "2024-03-01T11:54:50Z",
              "updatedAt": "2024-03-01T11:55:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5yACcg",
          "commit": {
            "abbreviatedOid": "bcceaf5"
          },
          "author": "gorryfair",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-02T08:12:39Z",
          "updatedAt": "2024-03-02T08:12:39Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "I don't much like \"many\"or \"frequent\", is it enough to say \"additional\"?",
              "createdAt": "2024-03-02T08:12:39Z",
              "updatedAt": "2024-03-02T08:12:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5yACcq",
          "commit": {
            "abbreviatedOid": "bcceaf5"
          },
          "author": "gorryfair",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-02T08:12:44Z",
          "updatedAt": "2024-03-02T08:12:44Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "I suspect this may just trying to explain too much, not normally sending one more than a RTT seems reasonable; adjusting if there is a significant change in cwnd or smoothed RTT also seems useful to note. I didn't like \"average cwnd\" or longer term development much though.",
              "createdAt": "2024-03-02T08:12:44Z",
              "updatedAt": "2024-03-02T08:12:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5yAEaQ",
          "commit": {
            "abbreviatedOid": "bcceaf5"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-02T09:14:04Z",
          "updatedAt": "2024-03-02T09:14:04Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "addition to what?",
              "createdAt": "2024-03-02T09:14:04Z",
              "updatedAt": "2024-03-02T09:14:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5yAEiM",
          "commit": {
            "abbreviatedOid": "bcceaf5"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-02T09:14:53Z",
          "updatedAt": "2024-03-02T09:14:53Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "@gorryfair what do you mean by \"not normally sending one more than a RTT \"?\r\n\r\nDo you have any wording suggestion?",
              "createdAt": "2024-03-02T09:14:53Z",
              "updatedAt": "2024-03-02T09:14:53Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5yAIZB",
          "commit": {
            "abbreviatedOid": "bcceaf5"
          },
          "author": "gorryfair",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-02T10:10:49Z",
          "updatedAt": "2024-03-02T10:10:49Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "I'd prefer something like: \"Ideally, an ACK_FREQUENCY frame ought to be sent after a change in the\r\nthe window or the smoothed RTT that impacts the local\r\nsetting of the reordering threshold or locally-selected calculation of the\r\nAck-Eliciting Threshold or Requested Max Ack Delay.\"",
              "createdAt": "2024-03-02T10:10:49Z",
              "updatedAt": "2024-03-02T10:10:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5yGzIV",
          "commit": {
            "abbreviatedOid": "bcceaf5"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-04T14:00:48Z",
          "updatedAt": "2024-03-04T14:00:49Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "```suggestion\r\nIdeally, an ACK_FREQUENCY frame is sent only if a relevant change\r\nin the congestion window or smoothed RTT is detected that impacts the local\r\n```",
              "createdAt": "2024-03-04T14:00:48Z",
              "updatedAt": "2024-03-04T14:01:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5yKKgu",
          "commit": {
            "abbreviatedOid": "c8f9239"
          },
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-04T20:20:59Z",
          "updatedAt": "2024-03-04T20:20:59Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "I wonder if rearranging the paragraph would make things a bit more clear. Taking the proposed text and shuffling things a bit, something like\r\n\r\n> Usually, it is sufficient to send an ACK_FREQUENCY frame once per RTT or at a\r\nlower frequency. However, the congestion window and RTT estimate can change over\r\nthe lifetime of a connection, which might require sending frames at a higher\r\nfrequency in order to achive optimal performance. Not every change to congestion\r\nwindow or RTT estimate warrants sending an ACK_FREQUENCY frame, ideally sending\r\noccurs only when a change to congestion window or smoothed RTT impacts the local\r\nsetting of: the reordering threshold, or locally-selected calculation of the\r\nAck-Eliciting Threshold, or Requested Max Ack Delay.",
              "createdAt": "2024-03-04T20:20:59Z",
              "updatedAt": "2024-03-04T20:20:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5yKboF",
          "commit": {
            "abbreviatedOid": "c8f9239"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-04T20:59:25Z",
          "updatedAt": "2024-03-04T20:59:25Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\nconnection and therefore might require sending updates in an ACK_FREQUENCY frames to\r\n```",
              "createdAt": "2024-03-04T20:59:25Z",
              "updatedAt": "2024-03-04T20:59:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5yKceU",
          "commit": {
            "abbreviatedOid": "96f2a92"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-04T21:00:45Z",
          "updatedAt": "2024-03-04T21:00:45Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "```suggestion\r\nIdeally, an ACK_FREQUENCY frame is sent only when a relevant change\r\n```",
              "createdAt": "2024-03-04T21:00:45Z",
              "updatedAt": "2024-03-04T21:00:45Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5yKdOt",
          "commit": {
            "abbreviatedOid": "d04eb67"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-04T21:02:23Z",
          "updatedAt": "2024-03-04T21:02:24Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "```suggestion\r\nsetting of the reordering threshold or locally-selected calculation of the\r\neither Ack-Eliciting Threshold or the Requested Max Ack Delay.\r\n```",
              "createdAt": "2024-03-04T21:02:23Z",
              "updatedAt": "2024-03-04T21:02:24Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5yKeHg",
          "commit": {
            "abbreviatedOid": "c8f9239"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-04T21:04:46Z",
          "updatedAt": "2024-03-04T21:04:46Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "thanks for the proposal. I don't think your first sentence is putting the emphasis right. therefore I slightly prefer the current order of statements but I made some small wording updates that hopefully help. I will merge for now but if further editorial improvements are needed we can probably still address this later with another PR. Thanks!",
              "createdAt": "2024-03-04T21:04:46Z",
              "updatedAt": "2024-03-04T21:04:46Z"
            }
          ]
        }
      ]
    },
    {
      "number": 276,
      "id": "PR_kwDODddxTs5mBedM",
      "title": "max value of max_ack_delay",
      "url": "https://github.com/quicwg/ack-frequency/pull/276",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "related to #235",
      "createdAt": "2024-02-05T13:20:02Z",
      "updatedAt": "2025-02-06T13:19:16Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "be7a054287a752d55a356089ab49ada1bda8b876",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "mirjak-patch-40",
      "headRefOid": "f604ce21a2cd01c399129a496f82f6833772ecd0",
      "closedAt": "2024-03-01T11:58:34Z",
      "mergedAt": "2024-03-01T11:58:34Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "0b7e1041945854e99b06b1bb9b7dee3505059998"
      },
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I will merge that now but leave the issue open and comment @marten-seemann comment there.",
          "createdAt": "2024-03-01T11:58:31Z",
          "updatedAt": "2024-03-01T11:58:31Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs5vCHHT",
          "commit": {
            "abbreviatedOid": "39f780e"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-02-05T13:37:48Z",
          "updatedAt": "2024-02-05T13:37:49Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\n  by the peer. Note that values of 2^14 or greater are invalid for max_ack_delay.\r\n```",
              "createdAt": "2024-02-05T13:37:49Z",
              "updatedAt": "2024-02-05T13:37:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5vCVzj",
          "commit": {
            "abbreviatedOid": "f604ce2"
          },
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "I think #235 would be better addressed by defining the maximum value for the Requested Max Ack Delay (1000*2^14, if I understand correctly), instead of reiterating what RFC 9000 defines.",
          "createdAt": "2024-02-05T14:02:22Z",
          "updatedAt": "2024-02-05T14:02:22Z",
          "comments": []
        }
      ]
    },
    {
      "number": 277,
      "id": "PR_kwDODddxTs5mBn60",
      "title": "change CE behaviour only when threshold > 1",
      "url": "https://github.com/quicwg/ack-frequency/pull/277",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "fixes #253 ",
      "createdAt": "2024-02-05T13:37:05Z",
      "updatedAt": "2025-02-06T13:19:06Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "be7a054287a752d55a356089ab49ada1bda8b876",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "mirjak-patch-41",
      "headRefOid": "113fd26a1a8661087b3c7dbff1b8a033b80fc365",
      "closedAt": "2024-03-04T20:56:28Z",
      "mergedAt": "2024-03-04T20:56:28Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "807e162ce77cd1528ea7224d16dc809b03785ca3"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs5x69Je",
          "commit": {
            "abbreviatedOid": "c18e307"
          },
          "author": "gorryfair",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-01T14:18:14Z",
          "updatedAt": "2024-03-01T14:18:14Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "/That means only when a transition from non-CE-marked\r\nto CE-marked occurs an immediate acknowledgement is sent./\r\nThis results in sending an immediate acknowledgement only when there is a transition from non-CE-marked\r\nto CE-marked an  is sent./",
              "createdAt": "2024-03-01T14:18:14Z",
              "updatedAt": "2024-03-01T14:18:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5x6_Az",
          "commit": {
            "abbreviatedOid": "c18e307"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-01T14:22:04Z",
          "updatedAt": "2024-03-01T14:22:04Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "```suggestion\r\nThreshold or max_ack_delay. This results in sending an immediate\r\nacknowledgement only when there is a transition from non-CE-marked\r\nto CE-marked.\r\n```",
              "createdAt": "2024-03-01T14:22:04Z",
              "updatedAt": "2024-03-01T14:22:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5yKGDV",
          "commit": {
            "abbreviatedOid": "7676819"
          },
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-04T20:09:38Z",
          "updatedAt": "2024-03-04T20:09:38Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "```suggestion\r\nthe endpoint resumes sending acknowledgements based on the Ack-Eliciting\r\n```",
              "createdAt": "2024-03-04T20:09:38Z",
              "updatedAt": "2024-03-04T20:09:38Z"
            }
          ]
        }
      ]
    },
    {
      "number": 278,
      "id": "PR_kwDODddxTs5oZxbR",
      "title": "how to request one ack per rtt",
      "url": "https://github.com/quicwg/ack-frequency/pull/278",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "fixes #227",
      "createdAt": "2024-03-01T12:17:12Z",
      "updatedAt": "2025-02-06T13:19:06Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "0b7e1041945854e99b06b1bb9b7dee3505059998",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "mirjak-patch-42",
      "headRefOid": "c098c81948baf26a6f152a9af20a3b9ecebe58e2",
      "closedAt": "2024-03-04T20:53:07Z",
      "mergedAt": "2024-03-04T20:53:07Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "39001297a8a3cac6a7d8c26a8563d06cbc342c5a"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs5x66zN",
          "commit": {
            "abbreviatedOid": "5a9693a"
          },
          "author": "gorryfair",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-01T14:13:38Z",
          "updatedAt": "2024-03-01T14:13:38Z",
          "comments": [
            {
              "originalPosition": 24,
              "body": "/receive/received/",
              "createdAt": "2024-03-01T14:13:38Z",
              "updatedAt": "2024-03-01T14:13:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5x67OC",
          "commit": {
            "abbreviatedOid": "5a9693a"
          },
          "author": "gorryfair",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "see correction.",
          "createdAt": "2024-03-01T14:14:30Z",
          "updatedAt": "2024-03-01T14:14:30Z",
          "comments": []
        },
        {
          "id": "PRR_kwDODddxTs5x67us",
          "commit": {
            "abbreviatedOid": "5a9693a"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-01T14:15:35Z",
          "updatedAt": "2024-03-01T14:15:35Z",
          "comments": [
            {
              "originalPosition": 24,
              "body": "```suggestion\r\nhas been received for more than one round trip time.  Although if the\r\n```",
              "createdAt": "2024-03-01T14:15:35Z",
              "updatedAt": "2024-03-01T14:15:36Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5yBeJ6",
          "commit": {
            "abbreviatedOid": "b450ece"
          },
          "author": "martinthomson",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "The three options seem right.",
          "createdAt": "2024-03-03T13:37:59Z",
          "updatedAt": "2024-03-03T13:39:27Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\ncan use the extension in this draft to request a receiver\r\n```",
              "createdAt": "2024-03-03T13:37:59Z",
              "updatedAt": "2024-03-03T13:39:27Z"
            },
            {
              "originalPosition": 8,
              "body": "Does the colon mean that a list follows?",
              "createdAt": "2024-03-03T13:38:15Z",
              "updatedAt": "2024-03-03T13:39:27Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5yG2S9",
          "commit": {
            "abbreviatedOid": "86002b7"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-04T14:04:06Z",
          "updatedAt": "2024-03-04T14:04:07Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "I don't think it has to follow a list...",
              "createdAt": "2024-03-04T14:04:07Z",
              "updatedAt": "2024-03-04T14:04:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5yKEOT",
          "commit": {
            "abbreviatedOid": "86002b7"
          },
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-04T20:05:18Z",
          "updatedAt": "2024-03-04T20:07:15Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "It seems weird to me to use the colon this way, but also is there a word missing, like \"in the following ways\"?",
              "createdAt": "2024-03-04T20:05:18Z",
              "updatedAt": "2024-03-04T20:07:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5yKWHu",
          "commit": {
            "abbreviatedOid": "86002b7"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-04T20:52:03Z",
          "updatedAt": "2024-03-04T20:52:03Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "```suggestion\r\nwhen there are ack-eliciting packets in flight, in the following ways:\r\n```",
              "createdAt": "2024-03-04T20:52:03Z",
              "updatedAt": "2024-03-04T20:52:03Z"
            }
          ]
        }
      ]
    },
    {
      "number": 279,
      "id": "PR_kwDODddxTs5oe6xo",
      "title": "Add tables to describe each variables for out-of-order examples",
      "url": "https://github.com/quicwg/ack-frequency/pull/279",
      "state": "MERGED",
      "author": "tatsuhiro-t",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "This adds tables that show each variables when a packet is received for out-of-order packet examples.  This would clarify what happens exactly for each packet reception and how algorithm works.\r\n\r\nThis clarifies my own comment at https://github.com/quicwg/ack-frequency/issues/248#issuecomment-1880749218\r\nThis might be redundant, but it would help understanding how algorithm works.",
      "createdAt": "2024-03-02T12:41:36Z",
      "updatedAt": "2024-04-09T16:51:10Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "0b7e1041945854e99b06b1bb9b7dee3505059998",
      "headRepository": "tatsuhiro-t/ack-frequency",
      "headRefName": "example-tables",
      "headRefOid": "4ca50a4895535d89a00a5424909b6604b489acfb",
      "closedAt": "2024-04-09T16:51:09Z",
      "mergedAt": "2024-04-09T16:51:09Z",
      "mergedBy": "ianswett",
      "mergeCommit": {
        "oid": "4ca50a4895535d89a00a5424909b6604b489acfb"
      },
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "Thanks for suggesting this. I will not merge that now but if more people provide feedback and think this helps, we can still merge this later as this is purely editorial!",
          "createdAt": "2024-03-04T20:54:03Z",
          "updatedAt": "2024-03-04T20:54:03Z"
        },
        {
          "author": "tatsuhiro-t",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I think the PR has an advantage over the existing way of expressing examples because it does not require additional text to explain why ACK is needed.   The table is self explanatory and it contains values calculated by the presented algorithm, and it helps readers understand how it works.  That said, I am fine to close this if everyone is satisfied with the current examples.",
          "createdAt": "2024-03-22T09:43:42Z",
          "updatedAt": "2024-03-22T09:43:42Z"
        },
        {
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "body": "As a bit of an ack-frequency noobie, I prefer Tatsuhiro's table and going only with that qould work for me. Although, it's HTML rendering could use a few tweaks . I have a local change I'll create as a PR on top to show how I think we can improve things.\r\n\r\n",
          "createdAt": "2024-03-22T12:22:01Z",
          "updatedAt": "2024-03-22T12:22:01Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs50RXfi",
          "commit": {
            "abbreviatedOid": "4ca50a4"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "I find it a bit confusing to have two ways of expressing the same example, so I'd be inclined to settle on a single approach, but I don't have a strong opinion.",
          "createdAt": "2024-03-21T03:49:56Z",
          "updatedAt": "2024-03-21T03:49:56Z",
          "comments": []
        }
      ]
    },
    {
      "number": 280,
      "id": "PR_kwDODddxTs5omRyQ",
      "title": "min_ack_delay and default max_ack_delay value",
      "url": "https://github.com/quicwg/ack-frequency/pull/280",
      "state": "CLOSED",
      "author": "mirjak",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-03-04T14:32:37Z",
      "updatedAt": "2025-02-06T13:19:13Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "d8d4794dec9f6ed5aafb028f691ba0880140a8dc",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "mirjak-patch-43",
      "headRefOid": "fb0e051a1ea456f72a098aafa3cc9fea94cfc01f",
      "closedAt": "2024-03-04T14:45:57Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "merged #282 instead",
          "createdAt": "2024-03-04T14:45:57Z",
          "updatedAt": "2024-03-04T14:45:57Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs5yHJrv",
          "commit": {
            "abbreviatedOid": "059d0f9"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-04T14:35:04Z",
          "updatedAt": "2024-03-04T14:35:05Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\nis greater than the received max_ack_delay or the default as specified in\r\n```",
              "createdAt": "2024-03-04T14:35:05Z",
              "updatedAt": "2024-03-04T14:35:05Z"
            }
          ]
        }
      ]
    },
    {
      "number": 281,
      "id": "PR_kwDODddxTs5omTWO",
      "title": "Update draft-ietf-quic-ack-frequency.md",
      "url": "https://github.com/quicwg/ack-frequency/pull/281",
      "state": "CLOSED",
      "author": "LPardue",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-03-04T14:35:48Z",
      "updatedAt": "2024-03-04T14:45:34Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "d8d4794dec9f6ed5aafb028f691ba0880140a8dc",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "min-max-bounds",
      "headRefOid": "266e77278121ed99ab08091ca92c35191ec3e31e",
      "closedAt": "2024-03-04T14:45:26Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "body": "I don't like this, so closing :D",
          "createdAt": "2024-03-04T14:45:26Z",
          "updatedAt": "2024-03-04T14:45:26Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 282,
      "id": "PR_kwDODddxTs5omWr2",
      "title": "easy change to address max_ack_delay sentence",
      "url": "https://github.com/quicwg/ack-frequency/pull/282",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-03-04T14:42:42Z",
      "updatedAt": "2025-02-06T13:19:12Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "d8d4794dec9f6ed5aafb028f691ba0880140a8dc",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "mirjak-patch-44",
      "headRefOid": "5bb0e1d210b6d2c39164c0a5949a6d7df7658f5d",
      "closedAt": "2024-03-04T14:45:34Z",
      "mergedAt": "2024-03-04T14:45:34Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "9ba65817add6f2f0484b3729ada3ed6e0ac3d4c6"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs5yHO15",
          "commit": {
            "abbreviatedOid": "5bb0e1d"
          },
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-03-04T14:43:38Z",
          "updatedAt": "2024-03-04T14:43:38Z",
          "comments": []
        }
      ]
    },
    {
      "number": 283,
      "id": "PR_kwDODddxTs5onGCZ",
      "title": "Change order of sentences to make error handling more clear",
      "url": "https://github.com/quicwg/ack-frequency/pull/283",
      "state": "CLOSED",
      "author": "mirjak",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "fixes #232",
      "createdAt": "2024-03-04T16:20:00Z",
      "updatedAt": "2025-02-06T13:19:11Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "9ba65817add6f2f0484b3729ada3ed6e0ac3d4c6",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "mirjak-patch-45",
      "headRefOid": "b50e1c3876bd20550fc756653d7ea6834eabefee",
      "closedAt": "2024-03-04T16:20:54Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": []
    },
    {
      "number": 284,
      "id": "PR_kwDODddxTs5onMCV",
      "title": "SHOULD set max_ack_delay and FRAME_ENCODING_ERROR",
      "url": "https://github.com/quicwg/ack-frequency/pull/284",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "fixes #232\r\n\r\nThis PR changes \"MUST set the max_ack_delay\" to a SHOULD. In the whole draft, we now rather say that the ACK_FREQUENCY frame is a request. We can't enforce a certain ACK sending behaviour and as such, I think this should also only be a SHOULD.\r\n\r\nFurther it change the error type to FRAME_ENCODING_ERROR. This is an encoding error during frame process and inline with e.g. https://www.rfc-editor.org/rfc/rfc9000#section-4.6-2 on MAX_STREAMS frame this should therefore be a FRAME_ENCODING_ERROR.\r\n\r\nAnd finally this PR changes the order of sentences, to make it more clear that both a too low and a too high value can be invalid.",
      "createdAt": "2024-03-04T16:31:38Z",
      "updatedAt": "2025-02-06T13:19:07Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "9ba65817add6f2f0484b3729ada3ed6e0ac3d4c6",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "mirjak-patch-46",
      "headRefOid": "c5eacf3f7abde093d927c5e9669f226fe2eeaa70",
      "closedAt": "2024-03-04T18:17:39Z",
      "mergedAt": "2024-03-04T18:17:39Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "f194d00c02ea8f11f59ce081f289bec9efb02bbf"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs5yIS7B",
          "commit": {
            "abbreviatedOid": "40a14e7"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-04T16:32:33Z",
          "updatedAt": "2024-03-04T16:32:33Z",
          "comments": [
            {
              "originalPosition": 12,
              "body": "```suggestion\r\n  of 2^14 or greater are invalid for max_ack_delay. A value smaller than\r\n  the min_ack_delay advertised by the peer is also invalid. Receipt of an\r\n```",
              "createdAt": "2024-03-04T16:32:33Z",
              "updatedAt": "2024-03-04T16:32:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5yIVBq",
          "commit": {
            "abbreviatedOid": "6950fda"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-04T16:36:23Z",
          "updatedAt": "2024-03-04T16:36:23Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "```suggestion\r\n  FRAME_ENCODING_ERROR.\r\n```",
              "createdAt": "2024-03-04T16:36:23Z",
              "updatedAt": "2024-03-04T16:36:23Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5yIqbg",
          "commit": {
            "abbreviatedOid": "c5eacf3"
          },
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-03-04T17:15:46Z",
          "updatedAt": "2024-03-04T17:15:46Z",
          "comments": []
        }
      ]
    },
    {
      "number": 285,
      "id": "PR_kwDODddxTs5pXI18",
      "title": "Add reviewers to acknowledgement section!",
      "url": "https://github.com/quicwg/ack-frequency/pull/285",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-03-12T10:58:50Z",
      "updatedAt": "2025-02-06T13:19:03Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "f3db784002225e27a57b7aa67f467b8104910075",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "mirjak-patch-47",
      "headRefOid": "f8c614103a84499c4132a267b86c70f39f484f33",
      "closedAt": "2024-03-21T03:47:19Z",
      "mergedAt": "2024-03-21T03:47:19Z",
      "mergedBy": "ianswett",
      "mergeCommit": {
        "oid": "3958dc6b2f55d670127cd4a04b0f41a6b2f972aa"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs5zFLj3",
          "commit": {
            "abbreviatedOid": "8bc13e1"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-12T11:00:26Z",
          "updatedAt": "2024-03-12T11:00:26Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\nMagnus Westerlund, Kazuho Oku, Marten Seemann, Gorry Fairhurst and\r\n```",
              "createdAt": "2024-03-12T11:00:26Z",
              "updatedAt": "2024-03-12T11:00:26Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5zzZws",
          "commit": {
            "abbreviatedOid": "3eb84ce"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-03-18T12:43:12Z",
          "updatedAt": "2024-03-18T12:43:18Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "```suggestion\r\nIngemar Johansson.\r\n```\r\n\r\nNit: As much as I appreciate the feedback, I don't typically see exclamation points in IETF drafts.",
              "createdAt": "2024-03-18T12:43:13Z",
              "updatedAt": "2024-03-18T12:43:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs5zzpMA",
          "commit": {
            "abbreviatedOid": "3eb84ce"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-03-18T13:09:11Z",
          "updatedAt": "2024-03-18T13:09:12Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "Not sure why this happened. I agree :-)",
              "createdAt": "2024-03-18T13:09:12Z",
              "updatedAt": "2024-03-18T13:09:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs50RVC9",
          "commit": {
            "abbreviatedOid": "f8c6141"
          },
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-03-21T03:35:14Z",
          "updatedAt": "2024-03-21T03:35:14Z",
          "comments": []
        }
      ]
    },
    {
      "number": 286,
      "id": "PR_kwDODddxTs5pXbCj",
      "title": "remove empty change log appendix",
      "url": "https://github.com/quicwg/ack-frequency/pull/286",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2024-03-12T11:42:01Z",
      "updatedAt": "2025-02-06T13:19:03Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "f3db784002225e27a57b7aa67f467b8104910075",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "mirjak-patch-48",
      "headRefOid": "6fcc79de7abd4d93d7704df569dda8cc2ef21315",
      "closedAt": "2024-03-18T12:43:52Z",
      "mergedAt": "2024-03-18T12:43:52Z",
      "mergedBy": "ianswett",
      "mergeCommit": {
        "oid": "066ed05ffa6194ad4a5310573f8512c0d5882dd6"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs5zzaDi",
          "commit": {
            "abbreviatedOid": "6fcc79d"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-03-18T12:43:47Z",
          "updatedAt": "2024-03-18T12:43:47Z",
          "comments": []
        }
      ]
    },
    {
      "number": 287,
      "id": "PR_kwDODddxTs5rQSqj",
      "title": "Tweak Abstract sentence",
      "url": "https://github.com/quicwg/ack-frequency/pull/287",
      "state": "MERGED",
      "author": "ianswett",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "",
      "createdAt": "2024-03-31T17:01:55Z",
      "updatedAt": "2025-02-06T13:22:28Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "3958dc6b2f55d670127cd4a04b0f41a6b2f972aa",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "ianswett-tweak-abstract",
      "headRefOid": "a88b14d149a2fc8ff0faa74d07b185498236edb7",
      "closedAt": "2024-04-23T10:54:14Z",
      "mergedAt": "2024-04-23T10:54:14Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "670b74db2081d63323eb869f1012d54c802f606f"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 288,
      "id": "PR_kwDODddxTs5rQUn-",
      "title": "Tweak Introduction",
      "url": "https://github.com/quicwg/ack-frequency/pull/288",
      "state": "MERGED",
      "author": "ianswett",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "",
      "createdAt": "2024-03-31T17:15:15Z",
      "updatedAt": "2025-02-06T13:22:32Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "3958dc6b2f55d670127cd4a04b0f41a6b2f972aa",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "ianswett-tweak-introduction",
      "headRefOid": "49b1226d4213053c0ba2d7c4dfb03e517eedd07d",
      "closedAt": "2024-04-23T16:40:58Z",
      "mergedAt": "2024-04-23T16:40:57Z",
      "mergedBy": "ianswett",
      "mergeCommit": {
        "oid": "39aa40e5373988d25ed9235357674b91cd69b1c4"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs54N5T0",
          "commit": {
            "abbreviatedOid": "6c70e78"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-23T10:56:15Z",
          "updatedAt": "2024-04-23T10:56:15Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "```suggestion\r\nack-eliciting packets. This document specifies an extension to QUIC that enables\r\n```\r\nThis sentence is the same as in the abstract.",
              "createdAt": "2024-04-23T10:56:15Z",
              "updatedAt": "2024-04-23T10:56:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs54N7eQ",
          "commit": {
            "abbreviatedOid": "6c70e78"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-23T11:01:04Z",
          "updatedAt": "2024-04-23T11:01:04Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "I actually find the initial sentence better and more clear because the point is it's after the data receivers decision when to send ACKs but it would be nice if the sender could give input. ",
              "createdAt": "2024-04-23T11:01:04Z",
              "updatedAt": "2024-04-23T11:41:49Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs54RBZc",
          "commit": {
            "abbreviatedOid": "6c70e78"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-23T16:22:43Z",
          "updatedAt": "2024-04-23T16:22:44Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "Agreed, should we remove it?",
              "createdAt": "2024-04-23T16:22:43Z",
              "updatedAt": "2024-04-23T16:22:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs54RBzo",
          "commit": {
            "abbreviatedOid": "6c70e78"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-23T16:23:33Z",
          "updatedAt": "2024-04-23T16:23:33Z",
          "comments": [
            {
              "originalPosition": 16,
              "body": "SG, I can revert this rewrite",
              "createdAt": "2024-04-23T16:23:33Z",
              "updatedAt": "2024-04-23T16:23:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs54RF2m",
          "commit": {
            "abbreviatedOid": "6c70e78"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-23T16:31:55Z",
          "updatedAt": "2024-04-23T16:31:55Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "No, we need to say this in the body as well (and I think it is actually good practice to repeat the same wording). See the RFC style guide section 4.3 (https://www.rfc-editor.org/rfc/rfc7322.html#section-4.3):\r\n\r\n>   Note\r\n>   also that an Abstract is not a substitute for an Introduction; the\r\n>   RFC should be self-contained as if there were no Abstract.",
              "createdAt": "2024-04-23T16:31:55Z",
              "updatedAt": "2024-04-23T16:31:55Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs54RGRa",
          "commit": {
            "abbreviatedOid": "db2f51a"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-04-23T16:32:49Z",
          "updatedAt": "2024-04-23T16:32:49Z",
          "comments": []
        },
        {
          "id": "PRR_kwDODddxTs54RI17",
          "commit": {
            "abbreviatedOid": "db2f51a"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-23T16:38:30Z",
          "updatedAt": "2024-04-23T16:38:30Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "```suggestion\r\nQUIC that enables an endpoint to request its peer change its behavior when sending or\r\n```",
              "createdAt": "2024-04-23T16:38:30Z",
              "updatedAt": "2024-04-23T16:38:30Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs54RJ12",
          "commit": {
            "abbreviatedOid": "6c70e78"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-23T16:40:36Z",
          "updatedAt": "2024-04-23T16:40:36Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "Thanks, suggestion applied.",
              "createdAt": "2024-04-23T16:40:36Z",
              "updatedAt": "2024-04-23T16:40:36Z"
            }
          ]
        }
      ]
    },
    {
      "number": 289,
      "id": "PR_kwDODddxTs5rQWuQ",
      "title": "Tweak Motivation",
      "url": "https://github.com/quicwg/ack-frequency/pull/289",
      "state": "MERGED",
      "author": "ianswett",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "",
      "createdAt": "2024-03-31T17:42:31Z",
      "updatedAt": "2025-02-06T13:22:31Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "3958dc6b2f55d670127cd4a04b0f41a6b2f972aa",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "ianswett-tweak-motivation",
      "headRefOid": "3b55af33b82220c80f963d0a0d51a421df48fdd3",
      "closedAt": "2024-04-23T16:34:01Z",
      "mergedAt": "2024-04-23T16:34:01Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "624c08150787c5d25ac744eaffe3a37e13173de2"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs51e2gQ",
          "commit": {
            "abbreviatedOid": "3667302"
          },
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-01T10:09:43Z",
          "updatedAt": "2024-04-01T10:09:44Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\n    author:\r\n```",
              "createdAt": "2024-04-01T10:09:43Z",
              "updatedAt": "2024-04-01T10:09:44Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs51e23T",
          "commit": {
            "abbreviatedOid": "e8ef5bd"
          },
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-01T10:11:06Z",
          "updatedAt": "2024-04-01T10:11:06Z",
          "comments": [
            {
              "originalPosition": 40,
              "body": "```suggestion\r\nHowever, as discussed in {{implementation}}, a unilateral reduction in\r\n```",
              "createdAt": "2024-04-01T10:11:06Z",
              "updatedAt": "2024-04-01T10:11:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs54ONvR",
          "commit": {
            "abbreviatedOid": "4743b12"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-23T11:39:16Z",
          "updatedAt": "2024-04-23T11:39:16Z",
          "comments": [
            {
              "originalPosition": 50,
              "body": "```suggestion\r\n({{Section 13.2.1 of QUIC-TRANSPORT}}) without any ability for the data\r\nsender to impact this behavior.  A data sender's constraints on the\r\n```\r\nI feel this part is missing from the flow as you removed the middle sentence (\"This does not allow...\"). Note I copied this wording from the intro text now.",
              "createdAt": "2024-04-23T11:39:16Z",
              "updatedAt": "2024-04-23T11:39:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs54OOI8",
          "commit": {
            "abbreviatedOid": "4743b12"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-23T11:40:08Z",
          "updatedAt": "2024-04-23T11:40:08Z",
          "comments": [
            {
              "originalPosition": 43,
              "body": "```suggestion\r\ncontrol and loss recovery.\r\n```\r\nI suggest to also remove the line break here as you now merged this two paragraphs basically together.",
              "createdAt": "2024-04-23T11:40:08Z",
              "updatedAt": "2024-04-23T11:40:08Z"
            }
          ]
        }
      ]
    },
    {
      "number": 290,
      "id": "PR_kwDODddxTs5rQa03",
      "title": "Tweak Negotiating Extension Use",
      "url": "https://github.com/quicwg/ack-frequency/pull/290",
      "state": "MERGED",
      "author": "ianswett",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "Possibly we should rename this to \"Advertising Extension Support\" or something similar as well, since I'm not sure I'd consider this unilateral advertisement approach 'negotiating'?",
      "createdAt": "2024-03-31T18:26:58Z",
      "updatedAt": "2025-02-06T13:22:29Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "3958dc6b2f55d670127cd4a04b0f41a6b2f972aa",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "ianswett-tweak-negotiating",
      "headRefOid": "a24437020112ff6a6f2a9cb24afe470380a477cb",
      "closedAt": "2024-04-23T11:09:58Z",
      "mergedAt": "2024-04-23T11:09:57Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "c6184d881c4473bbac99933adbcb05c95093683a"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 291,
      "id": "PR_kwDODddxTs5rTMXV",
      "title": "Add pretty tables to describe each variables for out-of-order examples",
      "url": "https://github.com/quicwg/ack-frequency/pull/291",
      "state": "MERGED",
      "author": "LPardue",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Builds on top of @tatsuhiro-t's examples in https://github.com/quicwg/ack-frequency/pull/279 but makes them render a bit nicer. Also removes the old rendering of the example as @ianswett noted that duplicate renderings were a bit confusing (see https://github.com/quicwg/ack-frequency/pull/279#pullrequestreview-1950709730)",
      "createdAt": "2024-04-01T09:59:53Z",
      "updatedAt": "2025-02-06T13:22:30Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "3958dc6b2f55d670127cd4a04b0f41a6b2f972aa",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "example-tables",
      "headRefOid": "1f25be0c6fa38aab27cc0fb56fdd8aa50bfe7cee",
      "closedAt": "2024-04-09T16:51:08Z",
      "mergedAt": "2024-04-09T16:51:08Z",
      "mergedBy": "ianswett",
      "mergeCommit": {
        "oid": "ed814ec28b153fe659b1228127a511151562a495"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs51ftO0",
          "commit": {
            "abbreviatedOid": "1f25be0"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-04-01T13:12:39Z",
          "updatedAt": "2024-04-01T13:12:39Z",
          "comments": []
        },
        {
          "id": "PRR_kwDODddxTs51f0YN",
          "commit": {
            "abbreviatedOid": "1f25be0"
          },
          "author": "tatsuhiro-t",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-04-01T13:32:13Z",
          "updatedAt": "2024-04-01T13:32:13Z",
          "comments": []
        }
      ]
    },
    {
      "number": 292,
      "id": "PR_kwDODddxTs5rUUbm",
      "title": "Tweak ACK_FREQUENCY Frame",
      "url": "https://github.com/quicwg/ack-frequency/pull/292",
      "state": "MERGED",
      "author": "ianswett",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "",
      "createdAt": "2024-04-01T13:35:55Z",
      "updatedAt": "2025-02-06T13:22:33Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "3958dc6b2f55d670127cd4a04b0f41a6b2f972aa",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "ianswett-tweak-ack-freq-frame",
      "headRefOid": "9b72f259c7ce61167704904bba8ec6ed190510fc",
      "closedAt": "2024-04-26T09:51:17Z",
      "mergedAt": "2024-04-26T09:51:17Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "43826901a89a731a6cc99238a402bdfe50f0de52"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs54OEVU",
          "commit": {
            "abbreviatedOid": "6c32f90"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-23T11:17:51Z",
          "updatedAt": "2024-04-23T11:17:51Z",
          "comments": [
            {
              "originalPosition": 52,
              "body": "There is a very subtile point here which maybe wasn't clear but now is lost entirely. The limit of 2^14 is defined by RFC9000 for max_ack_delay. We don't want to respecify this here (so in case any changes are needed those only need to be done in one place). That's why it was important that it previously said \"Note that ...\". But maybe it would be good to make that more clear...?",
              "createdAt": "2024-04-23T11:17:51Z",
              "updatedAt": "2024-04-23T11:17:51Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs54mziy",
          "commit": {
            "abbreviatedOid": "2edb24e"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-25T19:44:22Z",
          "updatedAt": "2024-04-25T19:44:22Z",
          "comments": [
            {
              "originalPosition": 52,
              "body": "Good point, I reverted this portion of the change and added a reference to RFC9000.",
              "createdAt": "2024-04-25T19:44:22Z",
              "updatedAt": "2024-04-25T19:44:22Z"
            }
          ]
        }
      ]
    },
    {
      "number": 293,
      "id": "PR_kwDODddxTs5rUzUY",
      "title": "Tweak Sending Acknowledgements",
      "url": "https://github.com/quicwg/ack-frequency/pull/293",
      "state": "MERGED",
      "author": "ianswett",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "",
      "createdAt": "2024-04-01T14:41:57Z",
      "updatedAt": "2025-02-06T13:22:34Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "3958dc6b2f55d670127cd4a04b0f41a6b2f972aa",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "ianswett-tweak-sending-acks",
      "headRefOid": "bb3ad7183d422c0ccca4612d3823ae932759b443",
      "closedAt": "2024-04-30T09:12:48Z",
      "mergedAt": "2024-04-30T09:12:48Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "4bd57f0e57725ca674b3d841de2a51c8839ff4e9"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs54OHbP",
          "commit": {
            "abbreviatedOid": "6bb8e45"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-23T11:24:59Z",
          "updatedAt": "2024-04-23T11:24:59Z",
          "comments": [
            {
              "originalPosition": 48,
              "body": "The text that you removed was added based on issue #247 as a requested clarification.",
              "createdAt": "2024-04-23T11:24:59Z",
              "updatedAt": "2024-04-23T11:24:59Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs54mveS",
          "commit": {
            "abbreviatedOid": "6bb8e45"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-25T19:33:28Z",
          "updatedAt": "2024-04-25T19:33:28Z",
          "comments": [
            {
              "originalPosition": 48,
              "body": "Thanks for pointing that out.\r\n\r\nI worry that this description is not specific enough, since it contains less text than RFC9000, and I would prefer to not restate what a reordered ack-eliciting packet is here.\r\n\r\n",
              "createdAt": "2024-04-25T19:33:28Z",
              "updatedAt": "2024-04-25T19:33:28Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs54sXFS",
          "commit": {
            "abbreviatedOid": "6bb8e45"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-26T12:09:38Z",
          "updatedAt": "2024-04-26T12:09:38Z",
          "comments": [
            {
              "originalPosition": 48,
              "body": "```suggestion\r\nsend an immediate acknowledgment upon receipt of a reordered ack-eliciting\r\npacket or if a gap in the packet numbers was detected.\r\nThis extension modifies that response after an ACK_FREQUENCY frame with\r\n```\r\nThe point in the issue was that packets gaps are not covered by this sentence. Does this phrasing maybe work?",
              "createdAt": "2024-04-26T12:09:38Z",
              "updatedAt": "2024-04-26T12:09:38Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs547NNY",
          "commit": {
            "abbreviatedOid": "6bb8e45"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-29T15:08:25Z",
          "updatedAt": "2024-04-29T15:08:25Z",
          "comments": [
            {
              "originalPosition": 48,
              "body": "Re-reading the issue, I see how my text isn't sufficient, but I think the existing text in the draft isn't quite clear enough.",
              "createdAt": "2024-04-29T15:08:25Z",
              "updatedAt": "2024-04-29T15:08:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs547WAY",
          "commit": {
            "abbreviatedOid": "2b1ded9"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-29T15:21:49Z",
          "updatedAt": "2024-04-29T15:21:50Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "\"create after\" reads weirdly. maybe this:\r\n```suggestion\r\npacket. After an ACK_FREQUENCY frame\r\nwith a Reordering Threshold value other than 1 has been received,\r\nthis extension delays immediate acknowledgements to reordered\r\nack-eliciting packets and the gaps they can create.\r\n```\r\nAny better?",
              "createdAt": "2024-04-29T15:21:50Z",
              "updatedAt": "2024-04-29T15:21:50Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs548-_Y",
          "commit": {
            "abbreviatedOid": "bb3ad71"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-29T18:24:47Z",
          "updatedAt": "2024-04-29T18:24:47Z",
          "comments": [
            {
              "originalPosition": 49,
              "body": "Not sure that makes a real difference but maybe \"if\" is better here:\r\n```suggestion\r\npacket. If an ACK_FREQUENCY frame with a Reordering Threshold value other\r\n```",
              "createdAt": "2024-04-29T18:24:47Z",
              "updatedAt": "2024-04-29T18:24:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs54-YTI",
          "commit": {
            "abbreviatedOid": "bb3ad71"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-29T20:54:28Z",
          "updatedAt": "2024-04-29T20:54:28Z",
          "comments": [
            {
              "originalPosition": 49,
              "body": "I slightly prefer After, but either works",
              "createdAt": "2024-04-29T20:54:28Z",
              "updatedAt": "2024-04-29T20:54:28Z"
            }
          ]
        }
      ]
    },
    {
      "number": 294,
      "id": "PR_kwDODddxTs5rVMEU",
      "title": "Remaining tweaks",
      "url": "https://github.com/quicwg/ack-frequency/pull/294",
      "state": "MERGED",
      "author": "ianswett",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "",
      "createdAt": "2024-04-01T15:41:26Z",
      "updatedAt": "2025-02-06T13:22:32Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "3958dc6b2f55d670127cd4a04b0f41a6b2f972aa",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "ianswett-tweak-therest",
      "headRefOid": "3c600f748061539432761114160ebe5187814ff2",
      "closedAt": "2024-04-23T16:32:20Z",
      "mergedAt": "2024-04-23T16:32:20Z",
      "mergedBy": "ianswett",
      "mergeCommit": {
        "oid": "3d9f300f0cc7e27659f1f5d1e766e6bb5ad2ea70"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs54OLK-",
          "commit": {
            "abbreviatedOid": "d3a1dac"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-23T11:33:15Z",
          "updatedAt": "2024-04-23T11:33:16Z",
          "comments": [
            {
              "originalPosition": 61,
              "body": "Sorry for being super nit-picking here but we spend soo much time to word-smith this part that I want to be super careful. Is there a reason why you changed \"likely\" to \"probably\"? As a non-native speaker there is not much difference for me but maybe \"likely\" is slightly stronger? Not a big issues but wanted to double-check... ",
              "createdAt": "2024-04-23T11:33:16Z",
              "updatedAt": "2024-04-23T11:33:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs54RFRZ",
          "commit": {
            "abbreviatedOid": "d3a1dac"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-23T16:30:48Z",
          "updatedAt": "2024-04-23T16:30:48Z",
          "comments": [
            {
              "originalPosition": 61,
              "body": "Good point, likely is better here.",
              "createdAt": "2024-04-23T16:30:48Z",
              "updatedAt": "2024-04-23T16:30:48Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs54RFWA",
          "commit": {
            "abbreviatedOid": "d3a1dac"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-04-23T16:30:58Z",
          "updatedAt": "2024-04-23T16:30:58Z",
          "comments": [
            {
              "originalPosition": 61,
              "body": "```suggestion\r\nRTT and likely even less frequently. Ideally, an ACK_FREQUENCY frame is sent only\r\n```",
              "createdAt": "2024-04-23T16:30:58Z",
              "updatedAt": "2024-04-23T16:30:58Z"
            }
          ]
        }
      ]
    },
    {
      "number": 296,
      "id": "PR_kwDODddxTs5wHdz2",
      "title": "Gorry's editorial comments",
      "url": "https://github.com/quicwg/ack-frequency/pull/296",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Thanks!",
      "createdAt": "2024-05-21T18:55:51Z",
      "updatedAt": "2025-02-06T13:19:02Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "4bd57f0e57725ca674b3d841de2a51c8839ff4e9",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "mirjak-patch-49",
      "headRefOid": "2b53404b96f60e493163a5795af7c5033c35638f",
      "closedAt": "2024-05-31T22:05:03Z",
      "mergedAt": "2024-05-31T22:05:03Z",
      "mergedBy": "ianswett",
      "mergeCommit": {
        "oid": "9bf148774b15e8cd5e08b213dc16e29b23606198"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs57pjPd",
          "commit": {
            "abbreviatedOid": "3425ba7"
          },
          "author": "gorryfair",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "Looks good, thanks.",
          "createdAt": "2024-05-23T16:27:00Z",
          "updatedAt": "2024-05-23T16:27:00Z",
          "comments": []
        },
        {
          "id": "PRR_kwDODddxTs58XBGu",
          "commit": {
            "abbreviatedOid": "3425ba7"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "One suggestion and one Question, but otherwise LG",
          "createdAt": "2024-05-29T20:37:46Z",
          "updatedAt": "2024-05-29T20:40:56Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "I'm unsure what this means, but I can see why bandwidth may not be exactly correct.  What about \"high packet rate connections.\"?",
              "createdAt": "2024-05-29T20:37:46Z",
              "updatedAt": "2024-05-29T20:40:56Z"
            },
            {
              "originalPosition": 27,
              "body": "```suggestion\r\nability for the data sender to influence this behavior.  A data sender's constraints\r\n```\r\n\r\nWe use influence above, and I think it's slightly better than control in this case.",
              "createdAt": "2024-05-29T20:38:38Z",
              "updatedAt": "2024-05-29T20:40:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs58a-Vo",
          "commit": {
            "abbreviatedOid": "3425ba7"
          },
          "author": "gorryfair",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-30T07:25:45Z",
          "updatedAt": "2024-05-30T07:25:46Z",
          "comments": [
            {
              "originalPosition": 27,
              "body": "If /influence/ is more consistent that's fine with me, the word I wanted to avoid was /impact/.",
              "createdAt": "2024-05-30T07:25:46Z",
              "updatedAt": "2024-05-30T07:25:46Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs58a_bQ",
          "commit": {
            "abbreviatedOid": "3425ba7"
          },
          "author": "gorryfair",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-30T07:26:34Z",
          "updatedAt": "2024-05-30T07:26:34Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "packet rate is fine also",
              "createdAt": "2024-05-30T07:26:34Z",
              "updatedAt": "2024-05-30T07:26:34Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs58hIk1",
          "commit": {
            "abbreviatedOid": "4989ba0"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-05-30T18:09:37Z",
          "updatedAt": "2024-05-30T18:09:37Z",
          "comments": [
            {
              "originalPosition": 18,
              "body": "```suggestion\r\n  reduction can be critical for high packet rate connections.\r\n```",
              "createdAt": "2024-05-30T18:09:37Z",
              "updatedAt": "2024-05-30T18:09:37Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs58hIp1",
          "commit": {
            "abbreviatedOid": "2b53404"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-05-30T18:09:48Z",
          "updatedAt": "2024-05-30T18:09:48Z",
          "comments": []
        }
      ]
    },
    {
      "number": 300,
      "id": "PR_kwDODddxTs512g69",
      "title": "start with packet number 0 in examples",
      "url": "https://github.com/quicwg/ack-frequency/pull/300",
      "state": "MERGED",
      "author": "marten-seemann",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #299.",
      "createdAt": "2024-07-19T05:00:55Z",
      "updatedAt": "2024-07-20T22:16:38Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "9bf148774b15e8cd5e08b213dc16e29b23606198",
      "headRepository": "marten-seemann/ack-frequency",
      "headRefName": "patch-1",
      "headRefOid": "7dce1ee48f7e4c1f9b03a14bcaa5ab8307fb9050",
      "closedAt": "2024-07-20T22:16:38Z",
      "mergedAt": "2024-07-20T22:16:38Z",
      "mergedBy": "ianswett",
      "mergeCommit": {
        "oid": "68f493178d94efab2881233641bbae3897152a89"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs6CicJM",
          "commit": {
            "abbreviatedOid": "7dce1ee"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-07-20T21:59:00Z",
          "updatedAt": "2024-07-20T21:59:00Z",
          "comments": []
        }
      ]
    },
    {
      "number": 301,
      "id": "PR_kwDODddxTs512hGo",
      "title": "apply RFC 9000 principles to error codes",
      "url": "https://github.com/quicwg/ack-frequency/pull/301",
      "state": "MERGED",
      "author": "marten-seemann",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #298.",
      "createdAt": "2024-07-19T05:01:52Z",
      "updatedAt": "2024-07-20T21:57:05Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "9bf148774b15e8cd5e08b213dc16e29b23606198",
      "headRepository": "marten-seemann/ack-frequency",
      "headRefName": "patch-2",
      "headRefOid": "a5c7c7375226eda6e1cbda1967fbb5aabcf622bd",
      "closedAt": "2024-07-20T21:57:05Z",
      "mergedAt": "2024-07-20T21:57:05Z",
      "mergedBy": "ianswett",
      "mergeCommit": {
        "oid": "a48b364ace299f53b90b89bdf78f0641305662ed"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs6CicGX",
          "commit": {
            "abbreviatedOid": "a5c7c73"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-07-20T21:56:59Z",
          "updatedAt": "2024-07-20T21:56:59Z",
          "comments": []
        }
      ]
    },
    {
      "number": 302,
      "id": "PR_kwDODddxTs512hUg",
      "title": "fix reference to RFC 9002",
      "url": "https://github.com/quicwg/ack-frequency/pull/302",
      "state": "MERGED",
      "author": "marten-seemann",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #297.",
      "createdAt": "2024-07-19T05:03:01Z",
      "updatedAt": "2024-07-20T21:56:15Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "9bf148774b15e8cd5e08b213dc16e29b23606198",
      "headRepository": "marten-seemann/ack-frequency",
      "headRefName": "patch-3",
      "headRefOid": "d2669e2bb8195f3250885ee258551e7342efb906",
      "closedAt": "2024-07-20T21:56:14Z",
      "mergedAt": "2024-07-20T21:56:14Z",
      "mergedBy": "ianswett",
      "mergeCommit": {
        "oid": "e770be6c02ce2a5ee8962ba8b0c5a080545c5c97"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs6CicFe",
          "commit": {
            "abbreviatedOid": "d2669e2"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-07-20T21:56:07Z",
          "updatedAt": "2024-07-20T21:56:07Z",
          "comments": []
        }
      ]
    },
    {
      "number": 303,
      "id": "PR_kwDODddxTs51_xrt",
      "title": "Only send an ACK if Ack-eliciting packets have been received",
      "url": "https://github.com/quicwg/ack-frequency/pull/303",
      "state": "MERGED",
      "author": "ianswett",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #295",
      "createdAt": "2024-07-20T22:03:45Z",
      "updatedAt": "2025-02-06T13:22:35Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "a48b364ace299f53b90b89bdf78f0641305662ed",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "ianswett-clarify-sending-acks",
      "headRefOid": "0e7d39ab57021a6c17fcf643063d586bc784ec8f",
      "closedAt": "2024-07-23T05:09:52Z",
      "mergedAt": "2024-07-23T05:09:52Z",
      "mergedBy": "ianswett",
      "mergeCommit": {
        "oid": "dc5a39cc0ddc53ea2ab25284156d85ee0bb896fd"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs6Cicpp",
          "commit": {
            "abbreviatedOid": "742a04f"
          },
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-07-20T22:12:50Z",
          "updatedAt": "2024-07-20T22:12:50Z",
          "comments": []
        },
        {
          "id": "PRR_kwDODddxTs6CicsU",
          "commit": {
            "abbreviatedOid": "026f3ea"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2024-07-20T22:15:06Z",
          "updatedAt": "2024-07-20T22:15:06Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\nAfter receiving an ACK_FREQUENCY frame and the data receiver updates its\r\n```",
              "createdAt": "2024-07-20T22:15:06Z",
              "updatedAt": "2024-07-20T22:15:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs6CsG6Y",
          "commit": {
            "abbreviatedOid": "72aca05"
          },
          "author": "nibanks",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-07-22T21:42:06Z",
          "updatedAt": "2024-07-22T21:42:06Z",
          "comments": []
        },
        {
          "id": "PRR_kwDODddxTs6CsMxj",
          "commit": {
            "abbreviatedOid": "72aca05"
          },
          "author": "larseggert",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "LGTM with a nit",
          "createdAt": "2024-07-22T22:04:29Z",
          "updatedAt": "2024-07-22T22:06:01Z",
          "comments": [
            {
              "originalPosition": 7,
              "body": "Wording\r\n```suggestion\r\nAfter receiving an ACK_FREQUENCY frame and updating its\r\nmax_ack_delay and Ack-Eliciting Threshold values ({{ack-frequency-frame}}), the data receiver\r\n```",
              "createdAt": "2024-07-22T22:04:29Z",
              "updatedAt": "2024-07-22T22:06:01Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs6Cseet",
          "commit": {
            "abbreviatedOid": "0e7d39a"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2024-07-22T23:23:37Z",
          "updatedAt": "2024-07-22T23:23:37Z",
          "comments": []
        }
      ]
    },
    {
      "number": 308,
      "id": "PR_kwDODddxTs6F8Yvv",
      "title": "Larger than 0 for ECN",
      "url": "https://github.com/quicwg/ack-frequency/pull/308",
      "state": "CLOSED",
      "author": "ianswett",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Fixes #307",
      "createdAt": "2024-12-20T18:49:39Z",
      "updatedAt": "2025-02-06T13:21:53Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "dc5a39cc0ddc53ea2ab25284156d85ee0bb896fd",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "ianswett-ack-ce",
      "headRefOid": "46dc4f9f406c4e9151f84f588c75b510ee43a9e8",
      "closedAt": "2024-12-23T20:14:00Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "This fix is not correct. This was discussed in issue #253 and PR #277. I will add also a comment in the new issue #307.",
          "createdAt": "2024-12-23T13:38:21Z",
          "updatedAt": "2024-12-23T13:38:21Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs6WF9Ps",
          "commit": {
            "abbreviatedOid": "46dc4f9"
          },
          "author": "martinduke",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "This is Editorial, but even if threshold==0, we're acking anyway so the qualifier isn't really necessary.\r\n\r\nI might also add a sentence saying that this changes the advice in RFC 9000 Section 13.2.1, which is to immediately ACK every CE packet. This is probably important for reviewers to understand.\r\n\r\nWhether you take my advice or not, LGTM.",
          "createdAt": "2024-12-20T18:51:46Z",
          "updatedAt": "2024-12-20T18:55:35Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\nRegardless of the Ack-Eliciting Threshold, an endpoint SHOULD send\r\n```",
              "createdAt": "2024-12-20T18:51:46Z",
              "updatedAt": "2024-12-20T18:55:11Z"
            }
          ]
        }
      ]
    },
    {
      "number": 312,
      "id": "PR_kwDODddxTs6JGFjR",
      "title": "Re-add sentence that IMMEDIATE_ACK does not need to be retransmitted.",
      "url": "https://github.com/quicwg/ack-frequency/pull/312",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "fixes issue #310\r\n\r\nThis was agreed and added in PR #136 but, I believe by mistake, removed in editorial pass in PR #160.",
      "createdAt": "2025-01-27T14:40:15Z",
      "updatedAt": "2025-02-06T13:18:57Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "dc5a39cc0ddc53ea2ab25284156d85ee0bb896fd",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "mirjak-patch-50",
      "headRefOid": "835bf2b3c3cdb7b41ce2b7a45def0ff1290541df",
      "closedAt": "2025-02-06T12:51:27Z",
      "mergedAt": "2025-02-06T12:51:27Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "c58fdaaf03ffb934f921c0f19d79cae5e926ac2f"
      },
      "comments": [
        {
          "author": "martinduke",
          "authorAssociation": "CONTRIBUTOR",
          "body": "LGTM",
          "createdAt": "2025-01-27T15:12:05Z",
          "updatedAt": "2025-01-27T15:12:05Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs6ZioqT",
          "commit": {
            "abbreviatedOid": "835bf2b"
          },
          "author": "martinduke",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-01-27T16:52:35Z",
          "updatedAt": "2025-01-27T16:52:35Z",
          "comments": []
        },
        {
          "id": "PRR_kwDODddxTs6ZivGE",
          "commit": {
            "abbreviatedOid": "835bf2b"
          },
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-01-27T17:02:43Z",
          "updatedAt": "2025-01-27T17:02:43Z",
          "comments": []
        },
        {
          "id": "PRR_kwDODddxTs6a1FMl",
          "commit": {
            "abbreviatedOid": "835bf2b"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-02-06T04:06:51Z",
          "updatedAt": "2025-02-06T04:06:51Z",
          "comments": []
        }
      ]
    },
    {
      "number": 313,
      "id": "PR_kwDODddxTs6JGR8_",
      "title": "Clarify Ack-Eliciting Threshold of 0 and 1",
      "url": "https://github.com/quicwg/ack-frequency/pull/313",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "fixes #307",
      "createdAt": "2025-01-27T15:03:02Z",
      "updatedAt": "2025-02-06T13:18:55Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "dc5a39cc0ddc53ea2ab25284156d85ee0bb896fd",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "mirjak-patch-51",
      "headRefOid": "82be5d063ce2727b31f6146fa517920b09a8abad",
      "closedAt": "2025-02-06T12:55:49Z",
      "mergedAt": "2025-02-06T12:55:49Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "4ca6ddd12149b36b0b438b41b2968940315eb8ea"
      },
      "comments": [
        {
          "author": "martinduke",
          "authorAssociation": "CONTRIBUTOR",
          "body": "LGTM.\r\n\r\nThanks, I think this makes things far clearer.",
          "createdAt": "2025-01-27T15:11:19Z",
          "updatedAt": "2025-01-27T15:11:19Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs6Ziofs",
          "commit": {
            "abbreviatedOid": "2ebe1cc"
          },
          "author": "martinduke",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-01-27T16:52:20Z",
          "updatedAt": "2025-01-27T16:52:20Z",
          "comments": []
        },
        {
          "id": "PRR_kwDODddxTs6Ziw-l",
          "commit": {
            "abbreviatedOid": "2ebe1cc"
          },
          "author": "LPardue",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "nit: just a little suggestion feel free to ignore",
          "createdAt": "2025-01-27T17:06:00Z",
          "updatedAt": "2025-01-27T17:09:09Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "Seems like this could be more easily read a new para and losing the \"anyway\" qualifier, since that is implicit in construction of the sentence.\r\n\r\n```suggestion\r\n\r\nIf the Ack-Eliciting Threshold is 0, every packet is immediately\r\n```",
              "createdAt": "2025-01-27T17:06:00Z",
              "updatedAt": "2025-01-27T17:09:09Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs6a1Fad",
          "commit": {
            "abbreviatedOid": "04f9d29"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "Some small suggestions, but LGTM",
          "createdAt": "2025-02-06T04:07:59Z",
          "updatedAt": "2025-02-06T04:09:29Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\nacknowledged, CE marked or not. If the Ack-Eliciting Threshold\r\n```",
              "createdAt": "2025-02-06T04:07:59Z",
              "updatedAt": "2025-02-06T04:09:29Z"
            },
            {
              "originalPosition": 5,
              "body": "```suggestion\r\nIf the Ack-Eliciting Threshold is 0, every ack-eliciting packet is immediately\r\n```",
              "createdAt": "2025-02-06T04:08:13Z",
              "updatedAt": "2025-02-06T04:09:29Z"
            },
            {
              "originalPosition": 11,
              "body": "```suggestion\r\nAcknowledging the first CE marked packet immediately maintains\r\n```",
              "createdAt": "2025-02-06T04:09:08Z",
              "updatedAt": "2025-02-06T04:09:29Z"
            }
          ]
        }
      ]
    },
    {
      "number": 314,
      "id": "PR_kwDODddxTs6JG94X",
      "title": "fix 1-off error in definition and example",
      "url": "https://github.com/quicwg/ack-frequency/pull/314",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "fixes #305\r\n\r\nI look at this multiple times and also checked with Ian. Not sure how this happened but we must have missed something at some point. I provide his change now which should also align with RFC9002, as @michael-eriksson pointed out.",
      "createdAt": "2025-01-27T16:24:43Z",
      "updatedAt": "2025-02-06T13:18:53Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "dc5a39cc0ddc53ea2ab25284156d85ee0bb896fd",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "mirjak-patch-52-1",
      "headRefOid": "341a8ac99cabda8aa9ca6949bd580fa3c405e4e7",
      "closedAt": "2025-02-06T13:05:38Z",
      "mergedAt": "2025-02-06T13:05:38Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "22a4da03dfce15de825362c4ad8e432ed61a6e71"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs6a1GPA",
          "commit": {
            "abbreviatedOid": "3e58062"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "One small suggestion, but LGTM",
          "createdAt": "2025-02-06T04:11:54Z",
          "updatedAt": "2025-02-06T04:12:44Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\nLargest Reported Missing:\r\n```",
              "createdAt": "2025-02-06T04:11:55Z",
              "updatedAt": "2025-02-06T04:12:44Z"
            }
          ]
        }
      ]
    },
    {
      "number": 315,
      "id": "PR_kwDODddxTs6JHDnC",
      "title": "clarify that no batch process is assumed in examples.",
      "url": "https://github.com/quicwg/ack-frequency/pull/315",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "fixes #309",
      "createdAt": "2025-01-27T16:35:22Z",
      "updatedAt": "2025-02-06T13:18:56Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "dc5a39cc0ddc53ea2ab25284156d85ee0bb896fd",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "mirjak-patch-53",
      "headRefOid": "49904d360bfc6b9602129346d66a3495e74ae4a9",
      "closedAt": "2025-02-06T12:55:15Z",
      "mergedAt": "2025-02-06T12:55:15Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "99d1528af439c654be9e2ca19831519444728195"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs6Ziy4U",
          "commit": {
            "abbreviatedOid": "1ed9051"
          },
          "author": "nibanks",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-01-27T17:09:24Z",
          "updatedAt": "2025-01-27T17:09:24Z",
          "comments": []
        },
        {
          "id": "PRR_kwDODddxTs6aMpXw",
          "commit": {
            "abbreviatedOid": "1ed9051"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-01-31T14:57:17Z",
          "updatedAt": "2025-01-31T14:57:17Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "```suggestion\r\nNote that the following examples assume that packets are \r\nprocessed one-by-one in the received order as indicated below.\r\n```",
              "createdAt": "2025-01-31T14:57:17Z",
              "updatedAt": "2025-01-31T14:57:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs6a1GgO",
          "commit": {
            "abbreviatedOid": "49904d3"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-02-06T04:13:16Z",
          "updatedAt": "2025-02-06T04:13:16Z",
          "comments": []
        }
      ]
    },
    {
      "number": 317,
      "id": "PR_kwDODddxTs6KS2KG",
      "title": "make update-ci",
      "url": "https://github.com/quicwg/ack-frequency/pull/317",
      "state": "MERGED",
      "author": "LPardue",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "- **Automatic update of .github/workflows/ghpages.yml**\r\n- **Automatic update of .github/workflows/publish.yml**\r\n- **Automatic update of .github/workflows/archive.yml**\r\n- **Automatic update of .github/workflows/update.yml**\r\n",
      "createdAt": "2025-02-06T15:25:03Z",
      "updatedAt": "2025-02-06T15:29:00Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "8fc24e5e63a25277adaae359642feaafd39982c3",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "update-ci",
      "headRefOid": "67167ac64b4190814ed091bf4cc5d00064ac43d1",
      "closedAt": "2025-02-06T15:29:00Z",
      "mergedAt": "2025-02-06T15:29:00Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "cbdf6ae6b030f91d1e0a8b7a3e8b2d23a227adab"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 318,
      "id": "PR_kwDODddxTs6Lwvek",
      "title": "clarify that immediate ACK is sent when gap gets filled",
      "url": "https://github.com/quicwg/ack-frequency/pull/318",
      "state": "CLOSED",
      "author": "mirjak",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-02-19T14:40:13Z",
      "updatedAt": "2025-02-28T22:42:28Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "cbdf6ae6b030f91d1e0a8b7a3e8b2d23a227adab",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "mirjak-patch-1",
      "headRefOid": "eb9e827582b60f356eb2acdada9a889001e34ede",
      "closedAt": "2025-02-28T22:42:27Z",
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "#319 merged instead",
          "createdAt": "2025-02-28T22:42:27Z",
          "updatedAt": "2025-02-28T22:42:27Z"
        }
      ],
      "reviews": []
    },
    {
      "number": 319,
      "id": "PR_kwDODddxTs6L8WoQ",
      "title": "When to send an immediate ACK",
      "url": "https://github.com/quicwg/ack-frequency/pull/319",
      "state": "MERGED",
      "author": "ianswett",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Upon receipt of a previously missing packet.\r\n\r\nThis is an alternative to #318 that reuses Largest Acked.\r\n\r\nFixes #304",
      "createdAt": "2025-02-20T18:44:26Z",
      "updatedAt": "2025-02-28T22:42:05Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "cbdf6ae6b030f91d1e0a8b7a3e8b2d23a227adab",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "ianswett-immediate-ack",
      "headRefOid": "53b9a146b57db16c651228f0e3ef1c3a71b7e61b",
      "closedAt": "2025-02-28T22:42:04Z",
      "mergedAt": "2025-02-28T22:42:04Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "1b11adea6969d1ee9cd705f012806054dc4a3463"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs6eENte",
          "commit": {
            "abbreviatedOid": "53b9a14"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-02-28T22:41:59Z",
          "updatedAt": "2025-02-28T22:41:59Z",
          "comments": []
        }
      ]
    },
    {
      "number": 320,
      "id": "PR_kwDODddxTs6NBrcC",
      "title": "Tiniest NiT on CE ?",
      "url": "https://github.com/quicwg/ack-frequency/pull/320",
      "state": "MERGED",
      "author": "gorryfair",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "Immediate response when CE marked or not, ought to refer to the packet being ACK'ed.",
      "createdAt": "2025-03-01T09:50:24Z",
      "updatedAt": "2025-03-27T13:12:14Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "1b11adea6969d1ee9cd705f012806054dc4a3463",
      "headRepository": "gorryfair/ack-frequency",
      "headRefName": "patch-12",
      "headRefOid": "935c9410df322a15b829a850dde6f518cd30c140",
      "closedAt": "2025-03-27T13:12:14Z",
      "mergedAt": "2025-03-27T13:12:14Z",
      "mergedBy": "ianswett",
      "mergeCommit": {
        "oid": "4834d265b6b4e0a06491e0f01b497a3c57d772fd"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs6eG6dY",
          "commit": {
            "abbreviatedOid": "146c3ab"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "I think the existing text is fairly clear, but I tried to make it read easier in my suggestion.",
          "createdAt": "2025-03-02T01:42:28Z",
          "updatedAt": "2025-03-02T01:43:05Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "Is this better?\r\n\r\n```suggestion\r\nacknowledged, whether it is CE marked or not. If the Ack-Eliciting Threshold\r\n```",
              "createdAt": "2025-03-02T01:42:28Z",
              "updatedAt": "2025-03-02T01:43:05Z"
            }
          ]
        }
      ]
    },
    {
      "number": 322,
      "id": "PR_kwDODddxTs6Wy0Pa",
      "title": "do not send an immediate ack while `largest_acked - smallest_unreported` is within the threshold",
      "url": "https://github.com/quicwg/ack-frequency/pull/322",
      "state": "OPEN",
      "author": "kazuho",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Reverts #319 and clarifies what I think has been implied by the paragraph right above.\r\n\r\nCloses #321.",
      "createdAt": "2025-05-19T22:30:35Z",
      "updatedAt": "2025-09-17T01:20:10Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "4834d265b6b4e0a06491e0f01b497a3c57d772fd",
      "headRepository": "kazuho/ack-frequency",
      "headRefName": "kazuho/buffer-reordering",
      "headRefOid": "0ed4566a5164fa4f4939adcf2dcb88186325c02a",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "As pointed out by @martinduke in https://github.com/quicwg/ack-frequency/issues/321#issuecomment-2894703542 the PR was missing one aspect of the problem.\r\n\r\nI've updated the text to explain the principle then to point out what it means specifically.",
          "createdAt": "2025-05-22T05:44:55Z",
          "updatedAt": "2025-05-22T05:44:55Z"
        },
        {
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I don't this this is reverting #319 because it don't think was clear if this implied by the previous text. Also it doesn't help to make any assumption about what may be implied if it is not specified clearly.\r\n\r\nI'd be okay with this change but I'd say it add a new consideration that wasn't therefore and maybe something we should discuss rather than slipping it in last minutes after WGLC without any awareness given this is a protocol change from my point of view.",
          "createdAt": "2025-07-07T15:46:07Z",
          "updatedAt": "2025-07-07T15:46:07Z"
        },
        {
          "author": "martinduke",
          "authorAssociation": "CONTRIBUTOR",
          "body": "I agree with @mirjak  that this worth bringing up in Madrid.",
          "createdAt": "2025-07-07T17:22:09Z",
          "updatedAt": "2025-07-07T17:22:09Z"
        },
        {
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "body": "@mirjak \r\n> I don't this this is reverting #319 \r\n\r\nThis is correct. The initial version of this pull request did, but it no longer does.",
          "createdAt": "2025-07-24T13:11:29Z",
          "updatedAt": "2025-07-24T13:11:29Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs6qA9b6",
          "commit": {
            "abbreviatedOid": "5ecddc9"
          },
          "author": "marten-seemann",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-05-20T02:36:18Z",
          "updatedAt": "2025-05-20T02:36:18Z",
          "comments": []
        },
        {
          "id": "PRR_kwDODddxTs6qja7f",
          "commit": {
            "abbreviatedOid": "18914eb"
          },
          "author": "martinduke",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-05-22T14:10:17Z",
          "updatedAt": "2025-05-22T14:10:17Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "Shouldn't this be \"less than or equal to\"?\r\n\r\nIIUC, if Largest Acked is 10 and Reordering Threshold is 3, then packet 7 is at danger of being declared lost. so we should ack 7 immediately.",
              "createdAt": "2025-05-22T14:10:17Z",
              "updatedAt": "2025-05-22T14:10:17Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs616BoK",
          "commit": {
            "abbreviatedOid": "18914eb"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-07-24T14:19:05Z",
          "updatedAt": "2025-07-24T14:19:05Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "Yes, can we align this better with the original language (which we fixed I think multiple times)",
              "createdAt": "2025-07-24T14:19:05Z",
              "updatedAt": "2025-07-24T14:19:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs65RalP",
          "commit": {
            "abbreviatedOid": "18914eb"
          },
          "author": "MarcoPolo",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-08-12T02:27:47Z",
          "updatedAt": "2025-08-12T02:35:41Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "agreed. I think this should be less than or equal to. Consider the case where Reordering Threshold = 1, largest ack is 4, then we should ack on receiving packet 3, which is consistent with RFC 9000.",
              "createdAt": "2025-08-12T02:27:47Z",
              "updatedAt": "2025-08-12T02:35:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs65e9un",
          "commit": {
            "abbreviatedOid": "18914eb"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-08-12T17:02:56Z",
          "updatedAt": "2025-08-12T17:02:56Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "```suggestion\r\nThreshold value SHOULD send an immediate ACK whenever it receives an ack-eliciting, out-of order packet\r\nwhose packet number is outside the reordering window of the peer, i.e. when\r\n* the gap between the smallest Unreported Missing packet and the\r\n  Largest Unacked packet is greater than or equal to the Reordering\r\n  Threshold value; or\r\n* the received packet number is less than or equal to `Largest Acked - Reordering Threshold`.\r\n\r\nThe first condition triggers an ACK as soon as the reordering threshold is reached and\r\na packet can be declared lost at the sender. The second condition addresses packets that have been\r\nreceived later, out of order and are already spuriously declared lost by the sender. This enables the sender\r\nto detect spurious retransmissions and revert the congestion control status accordingly.\r\n```",
              "createdAt": "2025-08-12T17:02:56Z",
              "updatedAt": "2025-08-12T17:02:56Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs65fYkJ",
          "commit": {
            "abbreviatedOid": "18914eb"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-08-12T17:37:47Z",
          "updatedAt": "2025-08-12T17:37:47Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "@kazuho @MarcoPolo @MarcoPolo please check if my proposed text below works for you!",
              "createdAt": "2025-08-12T17:37:47Z",
              "updatedAt": "2025-08-12T17:37:47Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs65gRd6",
          "commit": {
            "abbreviatedOid": "18914eb"
          },
          "author": "MarcoPolo",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-08-12T18:40:33Z",
          "updatedAt": "2025-08-12T18:40:33Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "Is there ambiguity in this sentence?\r\n\r\n> the gap between the smallest Unreported Missing packet and the\r\n  Largest Unacked packet is greater than or equal to the Reordering\r\n  Threshold value\r\n  \r\nImagine the reordering threshold is 1, and the smallest unreported missing is 2, and largest unacked is 3. I would expect the gap between 2 and 3 to be 0 (no gap), but we should send an ack in this case. I think using \"difference\" as the current PR suggests is clearer.\r\n\r\nI understand that the current draft-11 uses that \"gap\" text.\r\n\r\n",
              "createdAt": "2025-08-12T18:40:33Z",
              "updatedAt": "2025-08-12T18:40:33Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs65gocT",
          "commit": {
            "abbreviatedOid": "18914eb"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-08-12T19:00:35Z",
          "updatedAt": "2025-08-12T19:00:35Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "Yes, gap is in the current draft and if we want to change this this might be a separate issue because we would at least need to check if we use this same wording in other places in the draft.",
              "createdAt": "2025-08-12T19:00:35Z",
              "updatedAt": "2025-08-12T19:00:35Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs65jV7Z",
          "commit": {
            "abbreviatedOid": "18914eb"
          },
          "author": "MarcoPolo",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-08-12T22:20:18Z",
          "updatedAt": "2025-08-12T22:20:18Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "I think it may just be my misunderstanding. The adjusted text is fine by me.",
              "createdAt": "2025-08-12T22:20:18Z",
              "updatedAt": "2025-08-12T22:20:18Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs65mWJw",
          "commit": {
            "abbreviatedOid": "18914eb"
          },
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-08-13T03:41:24Z",
          "updatedAt": "2025-08-13T03:41:25Z",
          "comments": [
            {
              "originalPosition": 20,
              "body": "@martinduke @mirjak Thank you! Marking this comment as resolved, as we adopt @mirjak's proposed text below.",
              "createdAt": "2025-08-13T03:41:24Z",
              "updatedAt": "2025-08-13T03:41:25Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs65mXGM",
          "commit": {
            "abbreviatedOid": "7b7fb5f"
          },
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-08-13T03:44:57Z",
          "updatedAt": "2025-08-13T03:45:13Z",
          "comments": [
            {
              "originalPosition": 15,
              "body": "```suggestion\r\n* the difference between the smallest Unreported Missing packet and the\r\n```\r\n\r\nAs to @MarcoPolo's point, I think we can actually change \"gap\" to \"difference\" in this pull request and call it a day.\r\n\r\nThe word \"gap\" is used three times in the current draft, but this is the only case where the word is used as a synonym of \"difference.\" The other two cases use the word to indicate a hole in the packet numbers being received, which is consistent with [how the word is used in RFC 9000](https://datatracker.ietf.org/doc/html/rfc9000#section-19.3.1-5.2.1).",
              "createdAt": "2025-08-13T03:44:57Z",
              "updatedAt": "2025-08-13T03:46:31Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs65vmQY",
          "commit": {
            "abbreviatedOid": "f16d07e"
          },
          "author": "MarcoPolo",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-08-13T14:19:15Z",
          "updatedAt": "2025-08-13T14:19:15Z",
          "comments": []
        },
        {
          "id": "PRR_kwDODddxTs65zM55",
          "commit": {
            "abbreviatedOid": "f16d07e"
          },
          "author": "martinduke",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-08-13T18:25:05Z",
          "updatedAt": "2025-08-13T18:25:05Z",
          "comments": []
        },
        {
          "id": "PRR_kwDODddxTs7AEvKH",
          "commit": {
            "abbreviatedOid": "0ed4566"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "Based on the text, I think we're in a good spot, but I suggested SHOULD to avoid this causing a huge number of unnecessary immediate acknowledgements.",
          "createdAt": "2025-09-14T21:24:59Z",
          "updatedAt": "2025-09-14T21:25:57Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "```suggestion\r\nAck-Eliciting Threshold counter, as any ACK would.\r\n\r\nIn order to avoid unnecessary immediate acknowledgements, implementations SHOULD implement adaptive packet threshold loss detection and communicate the increased Reordering Threshold value to the receiver.\r\n```",
              "createdAt": "2025-09-14T21:24:59Z",
              "updatedAt": "2025-09-14T21:25:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs7Aps61",
          "commit": {
            "abbreviatedOid": "0ed4566"
          },
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-09-17T01:20:10Z",
          "updatedAt": "2025-09-17T01:20:10Z",
          "comments": [
            {
              "originalPosition": 28,
              "body": "I agree with the intent but I'm not sure if this is the correct place. IMO the added text should go to section 6.3 (Setting the Reordering Threshold Value) but I'm concerned section 6.3 itself is oddly placed (#332, #333).",
              "createdAt": "2025-09-17T01:20:10Z",
              "updatedAt": "2025-09-17T01:59:29Z"
            }
          ]
        }
      ]
    },
    {
      "number": 326,
      "id": "PR_kwDODddxTs6etsTp",
      "title": "clarify transport parameters enables receiving the frames",
      "url": "https://github.com/quicwg/ack-frequency/pull/326",
      "state": "MERGED",
      "author": "marten-seemann",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "I think this was intended, but we can make it more explicit. This is how DATAGRAM and RESET_STREAM_AT interpret their respective transport parameter as well.",
      "createdAt": "2025-07-14T01:42:19Z",
      "updatedAt": "2025-07-23T16:48:45Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "4834d265b6b4e0a06491e0f01b497a3c57d772fd",
      "headRepository": "marten-seemann/ack-frequency",
      "headRefName": "clarify-transport-parameter-meaning",
      "headRefOid": "884224a49ce0a52b8e0c2b59b7db5745abfbe1f7",
      "closedAt": "2025-07-23T16:48:45Z",
      "mergedAt": "2025-07-23T16:48:45Z",
      "mergedBy": "ianswett",
      "mergeCommit": {
        "oid": "6661c696d769cd3bb3a1763a63c61d4905a320db"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs6zwDXI",
          "commit": {
            "abbreviatedOid": "884224a"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-07-14T10:17:31Z",
          "updatedAt": "2025-07-14T10:17:31Z",
          "comments": []
        },
        {
          "id": "PRR_kwDODddxTs6zxCIh",
          "commit": {
            "abbreviatedOid": "884224a"
          },
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-07-14T11:26:02Z",
          "updatedAt": "2025-07-14T11:26:02Z",
          "comments": []
        },
        {
          "id": "PRR_kwDODddxTs61sRZY",
          "commit": {
            "abbreviatedOid": "884224a"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-07-23T16:48:36Z",
          "updatedAt": "2025-07-23T16:48:36Z",
          "comments": []
        }
      ]
    },
    {
      "number": 328,
      "id": "PR_kwDODddxTs6jUURo",
      "title": "text on ACK ranges",
      "url": "https://github.com/quicwg/ack-frequency/pull/328",
      "state": "OPEN",
      "author": "mirjak",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "fixes #327 and #323",
      "createdAt": "2025-08-12T17:31:08Z",
      "updatedAt": "2025-09-15T06:57:26Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "6661c696d769cd3bb3a1763a63c61d4905a320db",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "mirjak-patch-2",
      "headRefOid": "1764ff9f85a07884c3caf47b3af4ca351ba8e905",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs65fXPZ",
          "commit": {
            "abbreviatedOid": "65dbcea"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-08-12T17:36:03Z",
          "updatedAt": "2025-08-12T17:36:04Z",
          "comments": [
            {
              "originalPosition": 8,
              "body": "```suggestion\r\nlonger included in the ACK frame. Therefore when a larger ack delay is used,\r\n```",
              "createdAt": "2025-08-12T17:36:03Z",
              "updatedAt": "2025-08-12T17:36:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs65fdC4",
          "commit": {
            "abbreviatedOid": "bd7992d"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-08-12T17:44:12Z",
          "updatedAt": "2025-08-12T17:44:12Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\nextension. However, as discussed in {{Section 13.2.4 of QUIC-TRANSPORT}} this does not\r\n```",
              "createdAt": "2025-08-12T17:44:12Z",
              "updatedAt": "2025-08-12T17:44:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs65f-oj",
          "commit": {
            "abbreviatedOid": "c37eee5"
          },
          "author": "martinduke",
          "authorAssociation": "CONTRIBUTOR",
          "state": "CHANGES_REQUESTED",
          "body": "",
          "createdAt": "2025-08-12T18:20:58Z",
          "updatedAt": "2025-08-12T18:21:06Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "```suggestion\r\nextension. Unlike {{QUIC-TRANSPORT}}, however, large values for\r\nreordering_threshold and ack_eliciting threshold can prevent an\r\nACK frame from being sent although there are multiple ACK ranges.\r\nImplementations need to be certain to send an ACK before any\r\nunsent ACK range is truncated.\r\n```",
              "createdAt": "2025-08-12T18:20:59Z",
              "updatedAt": "2025-08-12T18:21:06Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs65gFOD",
          "commit": {
            "abbreviatedOid": "c37eee5"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-08-12T18:26:59Z",
          "updatedAt": "2025-08-12T18:27:00Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "This is a different point now than I was trying to make. Yes you proposed text now addresses your issue @martinduke but I was trying to address @gorryfair's issue with this text. I thought the first sentence to note at all ACK have to be ack'ed at least once addresses your issue sufficiently @martinduke without necessarily giving more details...?\r\n\r\nAlso the wording \"prevent an ACK frame from being sent although there are multiple ACK ranges\" doesn't make necessarily sense to me because just having an ACK range or multiple never has been a trigger to sent an ACK.",
              "createdAt": "2025-08-12T18:26:59Z",
              "updatedAt": "2025-08-12T18:27:00Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs65gLCg",
          "commit": {
            "abbreviatedOid": "c37eee5"
          },
          "author": "martinduke",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-08-12T18:34:04Z",
          "updatedAt": "2025-08-12T18:34:04Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "Ok, my text can be added separately to fix my issue.\r\n\r\nHaving an ACK range has been a trigger in RFC9000, because any OOO packet is an ACK trigger.  That's why an ACK_FREQUENCY implementer probably has to write new code for this case. I'm open to different wording, but the reason I'm energized about this issue is because this is, in fact, new code subtly required by this draft.",
              "createdAt": "2025-08-12T18:34:04Z",
              "updatedAt": "2025-08-12T18:34:04Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs65gj28",
          "commit": {
            "abbreviatedOid": "c37eee5"
          },
          "author": "mirjak",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-08-12T18:56:07Z",
          "updatedAt": "2025-08-12T18:56:07Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "Okay, then let's try to add a separate note. Do you want to make another proposal, or should I try to adapt your text?",
              "createdAt": "2025-08-12T18:56:07Z",
              "updatedAt": "2025-08-12T18:56:07Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs65hUHf",
          "commit": {
            "abbreviatedOid": "c37eee5"
          },
          "author": "martinduke",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-08-12T19:44:41Z",
          "updatedAt": "2025-08-12T19:44:41Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "Maybe try to adapt it. I'm not sure what part of the paragraph is for Gorry and what is for me.",
              "createdAt": "2025-08-12T19:44:41Z",
              "updatedAt": "2025-08-12T19:44:41Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs65thNX",
          "commit": {
            "abbreviatedOid": "8abcb18"
          },
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "Looks good! Below suggestions are purely editorial from someone not so fluent in English.",
          "createdAt": "2025-08-13T12:19:04Z",
          "updatedAt": "2025-08-13T12:21:28Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\nextension. With large values for the Ack-Eliciting Threshold or the Reordering Threshold,\r\nimplementations might accumulate multiple new ACK ranges before sending an ACK.\r\n```",
              "createdAt": "2025-08-13T12:19:04Z",
              "updatedAt": "2025-08-13T12:21:28Z"
            },
            {
              "originalPosition": 14,
              "body": "```suggestion\r\nlonger included in the ACK frame. Therefore, when ACK frames are sent less often,\r\n```",
              "createdAt": "2025-08-13T12:20:20Z",
              "updatedAt": "2025-08-13T12:21:28Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs65zK6f",
          "commit": {
            "abbreviatedOid": "1764ff9"
          },
          "author": "martinduke",
          "authorAssociation": "CONTRIBUTOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-08-13T18:22:11Z",
          "updatedAt": "2025-08-13T18:22:11Z",
          "comments": []
        },
        {
          "id": "PRR_kwDODddxTs7AEpLi",
          "commit": {
            "abbreviatedOid": "1764ff9"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "I suggested some rewording, thanks for the PR.",
          "createdAt": "2025-09-14T20:56:35Z",
          "updatedAt": "2025-09-14T21:12:12Z",
          "comments": [
            {
              "originalPosition": 6,
              "body": "```suggestion\r\nAll packets still have to be acknowledged at least once with this extension,\r\nas stated in {{Section 13.2.1 of QUIC-TRANSPORT}}. With large values for\r\nAck-Eliciting Threshold or the Reordering Threshold,\r\n```",
              "createdAt": "2025-09-14T20:56:35Z",
              "updatedAt": "2025-09-14T21:12:12Z"
            },
            {
              "originalPosition": 14,
              "body": "```suggestion\r\nAs such, implementations have to take more care to avoid truncating ACK ranges\r\nbefore they are sent at least once. As discussed in {{Section 13.2.4 of QUIC-TRANSPORT}}\r\nthis does not guarantee that every acknowledgment is seen by the sender.\r\n```",
              "createdAt": "2025-09-14T21:11:33Z",
              "updatedAt": "2025-09-14T21:12:12Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs7AHVbl",
          "commit": {
            "abbreviatedOid": "c37eee5"
          },
          "author": "gorryfair",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-09-15T06:55:39Z",
          "updatedAt": "2025-09-15T06:55:39Z",
          "comments": [
            {
              "originalPosition": 10,
              "body": "We seem to be missing the robustness point that with a larger ack delay is used,\r\nthe effect of lost or re-ordered packets with ACK frames needs to be thought through or this becomes prone to loss on the return path.",
              "createdAt": "2025-09-15T06:55:39Z",
              "updatedAt": "2025-09-15T06:55:40Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs7AHWoW",
          "commit": {
            "abbreviatedOid": "1764ff9"
          },
          "author": "gorryfair",
          "authorAssociation": "CONTRIBUTOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-09-15T06:57:26Z",
          "updatedAt": "2025-09-15T06:57:26Z",
          "comments": [
            {
              "originalPosition": 14,
              "body": "Still missing the robustness decisions?",
              "createdAt": "2025-09-15T06:57:26Z",
              "updatedAt": "2025-09-15T06:57:26Z"
            }
          ]
        }
      ]
    },
    {
      "number": 330,
      "id": "PR_kwDODddxTs6kECHv",
      "title": "s/before/without sending an ACK",
      "url": "https://github.com/quicwg/ack-frequency/pull/330",
      "state": "MERGED",
      "author": "mirjak",
      "authorAssociation": "CONTRIBUTOR",
      "assignees": [],
      "labels": [],
      "body": "fixes #329",
      "createdAt": "2025-08-18T09:00:50Z",
      "updatedAt": "2025-08-20T11:13:20Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "6661c696d769cd3bb3a1763a63c61d4905a320db",
      "headRepository": "quicwg/ack-frequency",
      "headRefName": "mirjak-patch-3",
      "headRefOid": "25a8fe55351ddf5e1c6099bb970a2dae5faf921f",
      "closedAt": "2025-08-20T11:13:20Z",
      "mergedAt": "2025-08-20T11:13:20Z",
      "mergedBy": "mirjak",
      "mergeCommit": {
        "oid": "54a824829891b9cc274fffa37fee26f2e2e6b986"
      },
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs66bHxq",
          "commit": {
            "abbreviatedOid": "25a8fe5"
          },
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-08-18T09:55:32Z",
          "updatedAt": "2025-08-18T09:55:32Z",
          "comments": []
        },
        {
          "id": "PRR_kwDODddxTs66wJsK",
          "commit": {
            "abbreviatedOid": "25a8fe5"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-08-19T17:16:50Z",
          "updatedAt": "2025-08-19T17:16:50Z",
          "comments": []
        }
      ]
    },
    {
      "number": 331,
      "id": "PR_kwDODddxTs6mWJ7S",
      "title": "add unit for clarity",
      "url": "https://github.com/quicwg/ack-frequency/pull/331",
      "state": "OPEN",
      "author": "MarcoPolo",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [
        "editorial"
      ],
      "body": "Adding milliseconds here makes it clear that the values above 2^14 _milliseconds_ are invalid. The distinction helps because the field is in microseconds, but the limit and reference are in milliseconds.",
      "createdAt": "2025-09-01T22:22:10Z",
      "updatedAt": "2025-09-17T01:17:14Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "54a824829891b9cc274fffa37fee26f2e2e6b986",
      "headRepository": "MarcoPolo/ack-frequency",
      "headRefName": "add-unit",
      "headRefOid": "3633ade9183f4a21cdaa08e3d2dc7bb57dea8233",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs7AEozE",
          "commit": {
            "abbreviatedOid": "3633ade"
          },
          "author": "ianswett",
          "authorAssociation": "COLLABORATOR",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-09-14T20:52:12Z",
          "updatedAt": "2025-09-14T20:52:12Z",
          "comments": []
        },
        {
          "id": "PRR_kwDODddxTs7AprRI",
          "commit": {
            "abbreviatedOid": "3633ade"
          },
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "state": "APPROVED",
          "body": "",
          "createdAt": "2025-09-17T01:17:14Z",
          "updatedAt": "2025-09-17T01:17:14Z",
          "comments": []
        }
      ]
    },
    {
      "number": 333,
      "id": "PR_kwDODddxTs6o9-aZ",
      "title": "Move section 6.3 out",
      "url": "https://github.com/quicwg/ack-frequency/pull/333",
      "state": "OPEN",
      "author": "kazuho",
      "authorAssociation": "MEMBER",
      "assignees": [],
      "labels": [],
      "body": "Moves section 6.3 (Setting the Reordering Threshold Value) out of section 6 (Sending Acknowledgments) that talks about the behavior of the receiver, and places it alongside other sections that talks about the sender behavior.\r\n\r\ncloses #332.",
      "createdAt": "2025-09-17T01:56:06Z",
      "updatedAt": "2025-09-18T02:11:05Z",
      "baseRepository": "quicwg/ack-frequency",
      "baseRefName": "main",
      "baseRefOid": "54a824829891b9cc274fffa37fee26f2e2e6b986",
      "headRepository": "kazuho/ack-frequency",
      "headRefName": "kazuho/section6-3",
      "headRefOid": "dabdccb67b0fa8400af7639d819b9c784969553d",
      "closedAt": null,
      "mergedAt": null,
      "mergedBy": null,
      "mergeCommit": null,
      "comments": [],
      "reviews": [
        {
          "id": "PRR_kwDODddxTs7Ap7u5",
          "commit": {
            "abbreviatedOid": "dabdccb"
          },
          "author": "kazuho",
          "authorAssociation": "MEMBER",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-09-17T01:58:39Z",
          "updatedAt": "2025-09-17T01:58:39Z",
          "comments": [
            {
              "originalPosition": 29,
              "body": "```suggestion\r\n\r\nIn order to avoid unnecessary immediate acknowledgements, senders SHOULD implement adaptive packet threshold loss detection and communicate the increased Reordering Threshold value to the receiver.\r\n\r\n```\r\n\r\n@ianswett I've borrowed the text from https://github.com/quicwg/ack-frequency/pull/322#discussion_r2347587598; WDYT?",
              "createdAt": "2025-09-17T01:58:39Z",
              "updatedAt": "2025-09-17T01:58:39Z"
            }
          ]
        },
        {
          "id": "PRR_kwDODddxTs7A8GrT",
          "commit": {
            "abbreviatedOid": "dabdccb"
          },
          "author": "MarcoPolo",
          "authorAssociation": "NONE",
          "state": "APPROVED",
          "body": "Agreed that this spot makes more sense, and I prefer this spot over placing this in section 4 (as mentioned in #332).",
          "createdAt": "2025-09-18T02:11:05Z",
          "updatedAt": "2025-09-18T02:11:05Z",
          "comments": []
        }
      ]
    }
  ]
}